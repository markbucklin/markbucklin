% $Revision: 1.1.6.4 $
%
% @file:      NIDAQmx.m
%
% Purpose:    MATLAB Class code for NIDAQmx API Projection Layer
%
% Authors:   Autogenerated by code in M:\14\whemdan.14a\matlab\toolbox\shared\testmeas\tools\apiprojector
%
% Generated: 26-Sep-2013 14:34:23
%
% Copyright 2010 - 2013 The MathWorks, Inc.
%
% $Date: 2014/03/13 05:31:10 $
%
%
classdef NIDAQmx < handle
    properties (Constant)
        % Standard Constants
        apiProjectorNotImplemented = -123456;

        % API Constants
       TRUE =  int32(1);
       FALSE =  int32(0);
       NULL =  int32(0);
       DAQmx_Buf_Input_BufSize =  int32(6252); % 0x186C
       DAQmx_Buf_Input_OnbrdBufSize =  int32(8970); % 0x230A
       DAQmx_Buf_Output_BufSize =  int32(6253); % 0x186D
       DAQmx_Buf_Output_OnbrdBufSize =  int32(8971); % 0x230B
       DAQmx_SelfCal_Supported =  int32(6240); % 0x1860
       DAQmx_SelfCal_LastTemp =  int32(6244); % 0x1864
       DAQmx_ExtCal_RecommendedInterval =  int32(6248); % 0x1868
       DAQmx_ExtCal_LastTemp =  int32(6247); % 0x1867
       DAQmx_Cal_UserDefinedInfo =  int32(6241); % 0x1861
       DAQmx_Cal_UserDefinedInfo_MaxSize =  int32(6428); % 0x191C
       DAQmx_Cal_DevTemp =  int32(8763); % 0x223B
       DAQmx_AI_Max =  int32(6109); % 0x17DD
       DAQmx_AI_Min =  int32(6110); % 0x17DE
       DAQmx_AI_CustomScaleName =  int32(6112); % 0x17E0
       DAQmx_AI_MeasType =  int32(1685); % 0x0695
       DAQmx_AI_Voltage_Units =  int32(4244); % 0x1094
       DAQmx_AI_Voltage_dBRef =  int32(10672); % 0x29B0
       DAQmx_AI_Voltage_ACRMS_Units =  int32(6114); % 0x17E2
       DAQmx_AI_Temp_Units =  int32(4147); % 0x1033
       DAQmx_AI_Thrmcpl_Type =  int32(4176); % 0x1050
       DAQmx_AI_Thrmcpl_ScaleType =  int32(10704); % 0x29D0
       DAQmx_AI_Thrmcpl_CJCSrc =  int32(4149); % 0x1035
       DAQmx_AI_Thrmcpl_CJCVal =  int32(4150); % 0x1036
       DAQmx_AI_Thrmcpl_CJCChan =  int32(4148); % 0x1034
       DAQmx_AI_RTD_Type =  int32(4146); % 0x1032
       DAQmx_AI_RTD_R0 =  int32(4144); % 0x1030
       DAQmx_AI_RTD_A =  int32(4112); % 0x1010
       DAQmx_AI_RTD_B =  int32(4113); % 0x1011
       DAQmx_AI_RTD_C =  int32(4115); % 0x1013
       DAQmx_AI_Thrmstr_A =  int32(6345); % 0x18C9
       DAQmx_AI_Thrmstr_B =  int32(6347); % 0x18CB
       DAQmx_AI_Thrmstr_C =  int32(6346); % 0x18CA
       DAQmx_AI_Thrmstr_R1 =  int32(4193); % 0x1061
       DAQmx_AI_ForceReadFromChan =  int32(6392); % 0x18F8
       DAQmx_AI_Current_Units =  int32(1793); % 0x0701
       DAQmx_AI_Current_ACRMS_Units =  int32(6115); % 0x17E3
       DAQmx_AI_Strain_Units =  int32(2433); % 0x0981
       DAQmx_AI_StrainGage_GageFactor =  int32(2452); % 0x0994
       DAQmx_AI_StrainGage_PoissonRatio =  int32(2456); % 0x0998
       DAQmx_AI_StrainGage_Cfg =  int32(2434); % 0x0982
       DAQmx_AI_Resistance_Units =  int32(2389); % 0x0955
       DAQmx_AI_Freq_Units =  int32(2054); % 0x0806
       DAQmx_AI_Freq_ThreshVoltage =  int32(2069); % 0x0815
       DAQmx_AI_Freq_Hyst =  int32(2068); % 0x0814
       DAQmx_AI_LVDT_Units =  int32(2320); % 0x0910
       DAQmx_AI_LVDT_Sensitivity =  int32(2361); % 0x0939
       DAQmx_AI_LVDT_SensitivityUnits =  int32(8602); % 0x219A
       DAQmx_AI_RVDT_Units =  int32(2167); % 0x0877
       DAQmx_AI_RVDT_Sensitivity =  int32(2307); % 0x0903
       DAQmx_AI_RVDT_SensitivityUnits =  int32(8603); % 0x219B
       DAQmx_AI_EddyCurrentProxProbe_Units =  int32(10944); % 0x2AC0
       DAQmx_AI_EddyCurrentProxProbe_Sensitivity =  int32(10942); % 0x2ABE
       DAQmx_AI_EddyCurrentProxProbe_SensitivityUnits =  int32(10943); % 0x2ABF
       DAQmx_AI_SoundPressure_MaxSoundPressureLvl =  int32(8762); % 0x223A
       DAQmx_AI_SoundPressure_Units =  int32(5416); % 0x1528
       DAQmx_AI_SoundPressure_dBRef =  int32(10673); % 0x29B1
       DAQmx_AI_Microphone_Sensitivity =  int32(5430); % 0x1536
       DAQmx_AI_Accel_Units =  int32(1651); % 0x0673
       DAQmx_AI_Accel_dBRef =  int32(10674); % 0x29B2
       DAQmx_AI_Accel_Sensitivity =  int32(1682); % 0x0692
       DAQmx_AI_Accel_SensitivityUnits =  int32(8604); % 0x219C
       DAQmx_AI_Force_Units =  int32(12149); % 0x2F75
       DAQmx_AI_Force_IEPESensor_Sensitivity =  int32(12161); % 0x2F81
       DAQmx_AI_Force_IEPESensor_SensitivityUnits =  int32(12162); % 0x2F82
       DAQmx_AI_Pressure_Units =  int32(12150); % 0x2F76
       DAQmx_AI_Torque_Units =  int32(12151); % 0x2F77
       DAQmx_AI_Bridge_Units =  int32(12178); % 0x2F92
       DAQmx_AI_Bridge_ElectricalUnits =  int32(12167); % 0x2F87
       DAQmx_AI_Bridge_PhysicalUnits =  int32(12168); % 0x2F88
       DAQmx_AI_Bridge_ScaleType =  int32(12169); % 0x2F89
       DAQmx_AI_Bridge_TwoPointLin_First_ElectricalVal =  int32(12170); % 0x2F8A
       DAQmx_AI_Bridge_TwoPointLin_First_PhysicalVal =  int32(12171); % 0x2F8B
       DAQmx_AI_Bridge_TwoPointLin_Second_ElectricalVal =  int32(12172); % 0x2F8C
       DAQmx_AI_Bridge_TwoPointLin_Second_PhysicalVal =  int32(12173); % 0x2F8D
       DAQmx_AI_Bridge_Table_ElectricalVals =  int32(12174); % 0x2F8E
       DAQmx_AI_Bridge_Table_PhysicalVals =  int32(12175); % 0x2F8F
       DAQmx_AI_Bridge_Poly_ForwardCoeff =  int32(12176); % 0x2F90
       DAQmx_AI_Bridge_Poly_ReverseCoeff =  int32(12177); % 0x2F91
       DAQmx_AI_Is_TEDS =  int32(10627); % 0x2983
       DAQmx_AI_TEDS_Units =  int32(8672); % 0x21E0
       DAQmx_AI_Coupling =  int32(100); % 0x0064
       DAQmx_AI_Impedance =  int32(98); % 0x0062
       DAQmx_AI_TermCfg =  int32(4247); % 0x1097
       DAQmx_AI_InputSrc =  int32(8600); % 0x2198
       DAQmx_AI_ResistanceCfg =  int32(6273); % 0x1881
       DAQmx_AI_LeadWireResistance =  int32(6126); % 0x17EE
       DAQmx_AI_Bridge_Cfg =  int32(135); % 0x0087
       DAQmx_AI_Bridge_NomResistance =  int32(6124); % 0x17EC
       DAQmx_AI_Bridge_InitialVoltage =  int32(6125); % 0x17ED
       DAQmx_AI_Bridge_InitialRatio =  int32(12166); % 0x2F86
       DAQmx_AI_Bridge_ShuntCal_Enable =  int32(148); % 0x0094
       DAQmx_AI_Bridge_ShuntCal_Select =  int32(8661); % 0x21D5
       DAQmx_AI_Bridge_ShuntCal_GainAdjust =  int32(6463); % 0x193F
       DAQmx_AI_Bridge_ShuntCal_ShuntCalAResistance =  int32(12152); % 0x2F78
       DAQmx_AI_Bridge_ShuntCal_ShuntCalAActualResistance =  int32(12153); % 0x2F79
       DAQmx_AI_Bridge_Balance_CoarsePot =  int32(6129); % 0x17F1
       DAQmx_AI_Bridge_Balance_FinePot =  int32(6388); % 0x18F4
       DAQmx_AI_CurrentShunt_Loc =  int32(6130); % 0x17F2
       DAQmx_AI_CurrentShunt_Resistance =  int32(6131); % 0x17F3
       DAQmx_AI_Excit_Src =  int32(6132); % 0x17F4
       DAQmx_AI_Excit_Val =  int32(6133); % 0x17F5
       DAQmx_AI_Excit_UseForScaling =  int32(6140); % 0x17FC
       DAQmx_AI_Excit_UseMultiplexed =  int32(8576); % 0x2180
       DAQmx_AI_Excit_ActualVal =  int32(6275); % 0x1883
       DAQmx_AI_Excit_DCorAC =  int32(6139); % 0x17FB
       DAQmx_AI_Excit_VoltageOrCurrent =  int32(6134); % 0x17F6
       DAQmx_AI_ACExcit_Freq =  int32(257); % 0x0101
       DAQmx_AI_ACExcit_SyncEnable =  int32(258); % 0x0102
       DAQmx_AI_ACExcit_WireMode =  int32(6349); % 0x18CD
       DAQmx_AI_Atten =  int32(6145); % 0x1801
       DAQmx_AI_ProbeAtten =  int32(10888); % 0x2A88
       DAQmx_AI_OpenThrmcplDetectEnable =  int32(12146); % 0x2F72
       DAQmx_AI_Lowpass_Enable =  int32(6146); % 0x1802
       DAQmx_AI_Lowpass_CutoffFreq =  int32(6147); % 0x1803
       DAQmx_AI_Lowpass_SwitchCap_ClkSrc =  int32(6276); % 0x1884
       DAQmx_AI_Lowpass_SwitchCap_ExtClkFreq =  int32(6277); % 0x1885
       DAQmx_AI_Lowpass_SwitchCap_ExtClkDiv =  int32(6278); % 0x1886
       DAQmx_AI_Lowpass_SwitchCap_OutClkDiv =  int32(6279); % 0x1887
       DAQmx_AI_ResolutionUnits =  int32(5988); % 0x1764
       DAQmx_AI_Resolution =  int32(5989); % 0x1765
       DAQmx_AI_RawSampSize =  int32(8922); % 0x22DA
       DAQmx_AI_RawSampJustification =  int32(80); % 0x0050
       DAQmx_AI_ADCTimingMode =  int32(10745); % 0x29F9
       DAQmx_AI_ADCCustomTimingMode =  int32(12139); % 0x2F6B
       DAQmx_AI_Dither_Enable =  int32(104); % 0x0068
       DAQmx_AI_ChanCal_HasValidCalInfo =  int32(8855); % 0x2297
       DAQmx_AI_ChanCal_EnableCal =  int32(8856); % 0x2298
       DAQmx_AI_ChanCal_ApplyCalIfExp =  int32(8857); % 0x2299
       DAQmx_AI_ChanCal_ScaleType =  int32(8860); % 0x229C
       DAQmx_AI_ChanCal_Table_PreScaledVals =  int32(8861); % 0x229D
       DAQmx_AI_ChanCal_Table_ScaledVals =  int32(8862); % 0x229E
       DAQmx_AI_ChanCal_Poly_ForwardCoeff =  int32(8863); % 0x229F
       DAQmx_AI_ChanCal_Poly_ReverseCoeff =  int32(8864); % 0x22A0
       DAQmx_AI_ChanCal_OperatorName =  int32(8867); % 0x22A3
       DAQmx_AI_ChanCal_Desc =  int32(8868); % 0x22A4
       DAQmx_AI_ChanCal_Verif_RefVals =  int32(8865); % 0x22A1
       DAQmx_AI_ChanCal_Verif_AcqVals =  int32(8866); % 0x22A2
       DAQmx_AI_Rng_High =  int32(6165); % 0x1815
       DAQmx_AI_Rng_Low =  int32(6166); % 0x1816
       DAQmx_AI_DCOffset =  int32(10889); % 0x2A89
       DAQmx_AI_Gain =  int32(6168); % 0x1818
       DAQmx_AI_SampAndHold_Enable =  int32(6170); % 0x181A
       DAQmx_AI_AutoZeroMode =  int32(5984); % 0x1760
       DAQmx_AI_DataXferMech =  int32(6177); % 0x1821
       DAQmx_AI_DataXferReqCond =  int32(6283); % 0x188B
       DAQmx_AI_DataXferCustomThreshold =  int32(8972); % 0x230C
       DAQmx_AI_UsbXferReqSize =  int32(10894); % 0x2A8E
       DAQmx_AI_MemMapEnable =  int32(6284); % 0x188C
       DAQmx_AI_RawDataCompressionType =  int32(8920); % 0x22D8
       DAQmx_AI_LossyLSBRemoval_CompressedSampSize =  int32(8921); % 0x22D9
       DAQmx_AI_DevScalingCoeff =  int32(6448); % 0x1930
       DAQmx_AI_EnhancedAliasRejectionEnable =  int32(8852); % 0x2294
       DAQmx_AO_Max =  int32(4486); % 0x1186
       DAQmx_AO_Min =  int32(4487); % 0x1187
       DAQmx_AO_CustomScaleName =  int32(4488); % 0x1188
       DAQmx_AO_OutputType =  int32(4360); % 0x1108
       DAQmx_AO_Voltage_Units =  int32(4484); % 0x1184
       DAQmx_AO_Voltage_CurrentLimit =  int32(10781); % 0x2A1D
       DAQmx_AO_Current_Units =  int32(4361); % 0x1109
       DAQmx_AO_FuncGen_Type =  int32(10776); % 0x2A18
       DAQmx_AO_FuncGen_Freq =  int32(10777); % 0x2A19
       DAQmx_AO_FuncGen_Amplitude =  int32(10778); % 0x2A1A
       DAQmx_AO_FuncGen_Offset =  int32(10779); % 0x2A1B
       DAQmx_AO_FuncGen_Square_DutyCycle =  int32(10780); % 0x2A1C
       DAQmx_AO_FuncGen_ModulationType =  int32(10786); % 0x2A22
       DAQmx_AO_FuncGen_FMDeviation =  int32(10787); % 0x2A23
       DAQmx_AO_OutputImpedance =  int32(5264); % 0x1490
       DAQmx_AO_LoadImpedance =  int32(289); % 0x0121
       DAQmx_AO_IdleOutputBehavior =  int32(8768); % 0x2240
       DAQmx_AO_TermCfg =  int32(6286); % 0x188E
       DAQmx_AO_ResolutionUnits =  int32(6187); % 0x182B
       DAQmx_AO_Resolution =  int32(6188); % 0x182C
       DAQmx_AO_DAC_Rng_High =  int32(6190); % 0x182E
       DAQmx_AO_DAC_Rng_Low =  int32(6189); % 0x182D
       DAQmx_AO_DAC_Ref_ConnToGnd =  int32(304); % 0x0130
       DAQmx_AO_DAC_Ref_AllowConnToGnd =  int32(6192); % 0x1830
       DAQmx_AO_DAC_Ref_Src =  int32(306); % 0x0132
       DAQmx_AO_DAC_Ref_ExtSrc =  int32(8786); % 0x2252
       DAQmx_AO_DAC_Ref_Val =  int32(6194); % 0x1832
       DAQmx_AO_DAC_Offset_Src =  int32(8787); % 0x2253
       DAQmx_AO_DAC_Offset_ExtSrc =  int32(8788); % 0x2254
       DAQmx_AO_DAC_Offset_Val =  int32(8789); % 0x2255
       DAQmx_AO_ReglitchEnable =  int32(307); % 0x0133
       DAQmx_AO_Gain =  int32(280); % 0x0118
       DAQmx_AO_UseOnlyOnBrdMem =  int32(6202); % 0x183A
       DAQmx_AO_DataXferMech =  int32(308); % 0x0134
       DAQmx_AO_DataXferReqCond =  int32(6204); % 0x183C
       DAQmx_AO_UsbXferReqSize =  int32(10895); % 0x2A8F
       DAQmx_AO_MemMapEnable =  int32(6287); % 0x188F
       DAQmx_AO_DevScalingCoeff =  int32(6449); % 0x1931
       DAQmx_AO_EnhancedImageRejectionEnable =  int32(8769); % 0x2241
       DAQmx_DI_InvertLines =  int32(1939); % 0x0793
       DAQmx_DI_NumLines =  int32(8568); % 0x2178
       DAQmx_DI_DigFltr_Enable =  int32(8662); % 0x21D6
       DAQmx_DI_DigFltr_MinPulseWidth =  int32(8663); % 0x21D7
       DAQmx_DI_DigFltr_EnableBusMode =  int32(12030); % 0x2EFE
       DAQmx_DI_DigFltr_TimebaseSrc =  int32(11988); % 0x2ED4
       DAQmx_DI_DigFltr_TimebaseRate =  int32(11989); % 0x2ED5
       DAQmx_DI_DigSync_Enable =  int32(11990); % 0x2ED6
       DAQmx_DI_Tristate =  int32(6288); % 0x1890
       DAQmx_DI_LogicFamily =  int32(10605); % 0x296D
       DAQmx_DI_DataXferMech =  int32(8803); % 0x2263
       DAQmx_DI_DataXferReqCond =  int32(8804); % 0x2264
       DAQmx_DI_UsbXferReqSize =  int32(10896); % 0x2A90
       DAQmx_DI_MemMapEnable =  int32(10602); % 0x296A
       DAQmx_DI_AcquireOn =  int32(10598); % 0x2966
       DAQmx_DO_OutputDriveType =  int32(4407); % 0x1137
       DAQmx_DO_InvertLines =  int32(4403); % 0x1133
       DAQmx_DO_NumLines =  int32(8569); % 0x2179
       DAQmx_DO_Tristate =  int32(6387); % 0x18F3
       DAQmx_DO_LineStates_StartState =  int32(10610); % 0x2972
       DAQmx_DO_LineStates_PausedState =  int32(10599); % 0x2967
       DAQmx_DO_LineStates_DoneState =  int32(10600); % 0x2968
       DAQmx_DO_LogicFamily =  int32(10606); % 0x296E
       DAQmx_DO_Overcurrent_Limit =  int32(10885); % 0x2A85
       DAQmx_DO_Overcurrent_AutoReenable =  int32(10886); % 0x2A86
       DAQmx_DO_Overcurrent_ReenablePeriod =  int32(10887); % 0x2A87
       DAQmx_DO_UseOnlyOnBrdMem =  int32(8805); % 0x2265
       DAQmx_DO_DataXferMech =  int32(8806); % 0x2266
       DAQmx_DO_DataXferReqCond =  int32(8807); % 0x2267
       DAQmx_DO_UsbXferReqSize =  int32(10897); % 0x2A91
       DAQmx_DO_MemMapEnable =  int32(10603); % 0x296B
       DAQmx_DO_GenerateOn =  int32(10601); % 0x2969
       DAQmx_CI_Max =  int32(6300); % 0x189C
       DAQmx_CI_Min =  int32(6301); % 0x189D
       DAQmx_CI_CustomScaleName =  int32(6302); % 0x189E
       DAQmx_CI_MeasType =  int32(6304); % 0x18A0
       DAQmx_CI_Freq_Units =  int32(6305); % 0x18A1
       DAQmx_CI_Freq_Term =  int32(6306); % 0x18A2
       DAQmx_CI_Freq_StartingEdge =  int32(1945); % 0x0799
       DAQmx_CI_Freq_MeasMeth =  int32(324); % 0x0144
       DAQmx_CI_Freq_EnableAveraging =  int32(11984); % 0x2ED0
       DAQmx_CI_Freq_MeasTime =  int32(325); % 0x0145
       DAQmx_CI_Freq_Div =  int32(327); % 0x0147
       DAQmx_CI_Freq_DigFltr_Enable =  int32(8679); % 0x21E7
       DAQmx_CI_Freq_DigFltr_MinPulseWidth =  int32(8680); % 0x21E8
       DAQmx_CI_Freq_DigFltr_TimebaseSrc =  int32(8681); % 0x21E9
       DAQmx_CI_Freq_DigFltr_TimebaseRate =  int32(8682); % 0x21EA
       DAQmx_CI_Freq_DigSync_Enable =  int32(8683); % 0x21EB
       DAQmx_CI_Period_Units =  int32(6307); % 0x18A3
       DAQmx_CI_Period_Term =  int32(6308); % 0x18A4
       DAQmx_CI_Period_StartingEdge =  int32(2130); % 0x0852
       DAQmx_CI_Period_MeasMeth =  int32(6444); % 0x192C
       DAQmx_CI_Period_EnableAveraging =  int32(11985); % 0x2ED1
       DAQmx_CI_Period_MeasTime =  int32(6445); % 0x192D
       DAQmx_CI_Period_Div =  int32(6446); % 0x192E
       DAQmx_CI_Period_DigFltr_Enable =  int32(8684); % 0x21EC
       DAQmx_CI_Period_DigFltr_MinPulseWidth =  int32(8685); % 0x21ED
       DAQmx_CI_Period_DigFltr_TimebaseSrc =  int32(8686); % 0x21EE
       DAQmx_CI_Period_DigFltr_TimebaseRate =  int32(8687); % 0x21EF
       DAQmx_CI_Period_DigSync_Enable =  int32(8688); % 0x21F0
       DAQmx_CI_CountEdges_Term =  int32(6343); % 0x18C7
       DAQmx_CI_CountEdges_Dir =  int32(1686); % 0x0696
       DAQmx_CI_CountEdges_DirTerm =  int32(8673); % 0x21E1
       DAQmx_CI_CountEdges_CountDir_DigFltr_Enable =  int32(8689); % 0x21F1
       DAQmx_CI_CountEdges_CountDir_DigFltr_MinPulseWidth =  int32(8690); % 0x21F2
       DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseSrc =  int32(8691); % 0x21F3
       DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseRate =  int32(8692); % 0x21F4
       DAQmx_CI_CountEdges_CountDir_DigSync_Enable =  int32(8693); % 0x21F5
       DAQmx_CI_CountEdges_InitialCnt =  int32(1688); % 0x0698
       DAQmx_CI_CountEdges_ActiveEdge =  int32(1687); % 0x0697
       DAQmx_CI_CountEdges_DigFltr_Enable =  int32(8694); % 0x21F6
       DAQmx_CI_CountEdges_DigFltr_MinPulseWidth =  int32(8695); % 0x21F7
       DAQmx_CI_CountEdges_DigFltr_TimebaseSrc =  int32(8696); % 0x21F8
       DAQmx_CI_CountEdges_DigFltr_TimebaseRate =  int32(8697); % 0x21F9
       DAQmx_CI_CountEdges_DigSync_Enable =  int32(8698); % 0x21FA
       DAQmx_CI_AngEncoder_Units =  int32(6310); % 0x18A6
       DAQmx_CI_AngEncoder_PulsesPerRev =  int32(2165); % 0x0875
       DAQmx_CI_AngEncoder_InitialAngle =  int32(2177); % 0x0881
       DAQmx_CI_LinEncoder_Units =  int32(6313); % 0x18A9
       DAQmx_CI_LinEncoder_DistPerPulse =  int32(2321); % 0x0911
       DAQmx_CI_LinEncoder_InitialPos =  int32(2325); % 0x0915
       DAQmx_CI_Encoder_DecodingType =  int32(8678); % 0x21E6
       DAQmx_CI_Encoder_AInputTerm =  int32(8605); % 0x219D
       DAQmx_CI_Encoder_AInput_DigFltr_Enable =  int32(8699); % 0x21FB
       DAQmx_CI_Encoder_AInput_DigFltr_MinPulseWidth =  int32(8700); % 0x21FC
       DAQmx_CI_Encoder_AInput_DigFltr_TimebaseSrc =  int32(8701); % 0x21FD
       DAQmx_CI_Encoder_AInput_DigFltr_TimebaseRate =  int32(8702); % 0x21FE
       DAQmx_CI_Encoder_AInput_DigSync_Enable =  int32(8703); % 0x21FF
       DAQmx_CI_Encoder_BInputTerm =  int32(8606); % 0x219E
       DAQmx_CI_Encoder_BInput_DigFltr_Enable =  int32(8704); % 0x2200
       DAQmx_CI_Encoder_BInput_DigFltr_MinPulseWidth =  int32(8705); % 0x2201
       DAQmx_CI_Encoder_BInput_DigFltr_TimebaseSrc =  int32(8706); % 0x2202
       DAQmx_CI_Encoder_BInput_DigFltr_TimebaseRate =  int32(8707); % 0x2203
       DAQmx_CI_Encoder_BInput_DigSync_Enable =  int32(8708); % 0x2204
       DAQmx_CI_Encoder_ZInputTerm =  int32(8607); % 0x219F
       DAQmx_CI_Encoder_ZInput_DigFltr_Enable =  int32(8709); % 0x2205
       DAQmx_CI_Encoder_ZInput_DigFltr_MinPulseWidth =  int32(8710); % 0x2206
       DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseSrc =  int32(8711); % 0x2207
       DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseRate =  int32(8712); % 0x2208
       DAQmx_CI_Encoder_ZInput_DigSync_Enable =  int32(8713); % 0x2209
       DAQmx_CI_Encoder_ZIndexEnable =  int32(2192); % 0x0890
       DAQmx_CI_Encoder_ZIndexVal =  int32(2184); % 0x0888
       DAQmx_CI_Encoder_ZIndexPhase =  int32(2185); % 0x0889
       DAQmx_CI_PulseWidth_Units =  int32(2083); % 0x0823
       DAQmx_CI_PulseWidth_Term =  int32(6314); % 0x18AA
       DAQmx_CI_PulseWidth_StartingEdge =  int32(2085); % 0x0825
       DAQmx_CI_PulseWidth_DigFltr_Enable =  int32(8714); % 0x220A
       DAQmx_CI_PulseWidth_DigFltr_MinPulseWidth =  int32(8715); % 0x220B
       DAQmx_CI_PulseWidth_DigFltr_TimebaseSrc =  int32(8716); % 0x220C
       DAQmx_CI_PulseWidth_DigFltr_TimebaseRate =  int32(8717); % 0x220D
       DAQmx_CI_PulseWidth_DigSync_Enable =  int32(8718); % 0x220E
       DAQmx_CI_TwoEdgeSep_Units =  int32(6316); % 0x18AC
       DAQmx_CI_TwoEdgeSep_FirstTerm =  int32(6317); % 0x18AD
       DAQmx_CI_TwoEdgeSep_FirstEdge =  int32(2099); % 0x0833
       DAQmx_CI_TwoEdgeSep_First_DigFltr_Enable =  int32(8719); % 0x220F
       DAQmx_CI_TwoEdgeSep_First_DigFltr_MinPulseWidth =  int32(8720); % 0x2210
       DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseSrc =  int32(8721); % 0x2211
       DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseRate =  int32(8722); % 0x2212
       DAQmx_CI_TwoEdgeSep_First_DigSync_Enable =  int32(8723); % 0x2213
       DAQmx_CI_TwoEdgeSep_SecondTerm =  int32(6318); % 0x18AE
       DAQmx_CI_TwoEdgeSep_SecondEdge =  int32(2100); % 0x0834
       DAQmx_CI_TwoEdgeSep_Second_DigFltr_Enable =  int32(8724); % 0x2214
       DAQmx_CI_TwoEdgeSep_Second_DigFltr_MinPulseWidth =  int32(8725); % 0x2215
       DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseSrc =  int32(8726); % 0x2216
       DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseRate =  int32(8727); % 0x2217
       DAQmx_CI_TwoEdgeSep_Second_DigSync_Enable =  int32(8728); % 0x2218
       DAQmx_CI_SemiPeriod_Units =  int32(6319); % 0x18AF
       DAQmx_CI_SemiPeriod_Term =  int32(6320); % 0x18B0
       DAQmx_CI_SemiPeriod_StartingEdge =  int32(8958); % 0x22FE
       DAQmx_CI_SemiPeriod_DigFltr_Enable =  int32(8729); % 0x2219
       DAQmx_CI_SemiPeriod_DigFltr_MinPulseWidth =  int32(8730); % 0x221A
       DAQmx_CI_SemiPeriod_DigFltr_TimebaseSrc =  int32(8731); % 0x221B
       DAQmx_CI_SemiPeriod_DigFltr_TimebaseRate =  int32(8732); % 0x221C
       DAQmx_CI_SemiPeriod_DigSync_Enable =  int32(8733); % 0x221D
       DAQmx_CI_Pulse_Freq_Units =  int32(12043); % 0x2F0B
       DAQmx_CI_Pulse_Freq_Term =  int32(12036); % 0x2F04
       DAQmx_CI_Pulse_Freq_Start_Edge =  int32(12037); % 0x2F05
       DAQmx_CI_Pulse_Freq_DigFltr_Enable =  int32(12038); % 0x2F06
       DAQmx_CI_Pulse_Freq_DigFltr_MinPulseWidth =  int32(12039); % 0x2F07
       DAQmx_CI_Pulse_Freq_DigFltr_TimebaseSrc =  int32(12040); % 0x2F08
       DAQmx_CI_Pulse_Freq_DigFltr_TimebaseRate =  int32(12041); % 0x2F09
       DAQmx_CI_Pulse_Freq_DigSync_Enable =  int32(12042); % 0x2F0A
       DAQmx_CI_Pulse_Time_Units =  int32(12051); % 0x2F13
       DAQmx_CI_Pulse_Time_Term =  int32(12044); % 0x2F0C
       DAQmx_CI_Pulse_Time_StartEdge =  int32(12045); % 0x2F0D
       DAQmx_CI_Pulse_Time_DigFltr_Enable =  int32(12046); % 0x2F0E
       DAQmx_CI_Pulse_Time_DigFltr_MinPulseWidth =  int32(12047); % 0x2F0F
       DAQmx_CI_Pulse_Time_DigFltr_TimebaseSrc =  int32(12048); % 0x2F10
       DAQmx_CI_Pulse_Time_DigFltr_TimebaseRate =  int32(12049); % 0x2F11
       DAQmx_CI_Pulse_Time_DigSync_Enable =  int32(12050); % 0x2F12
       DAQmx_CI_Pulse_Ticks_Term =  int32(12052); % 0x2F14
       DAQmx_CI_Pulse_Ticks_StartEdge =  int32(12053); % 0x2F15
       DAQmx_CI_Pulse_Ticks_DigFltr_Enable =  int32(12054); % 0x2F16
       DAQmx_CI_Pulse_Ticks_DigFltr_MinPulseWidth =  int32(12055); % 0x2F17
       DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseSrc =  int32(12056); % 0x2F18
       DAQmx_CI_Pulse_Ticks_DigFltr_TimebaseRate =  int32(12057); % 0x2F19
       DAQmx_CI_Pulse_Ticks_DigSync_Enable =  int32(12058); % 0x2F1A
       DAQmx_CI_Timestamp_Units =  int32(8883); % 0x22B3
       DAQmx_CI_Timestamp_InitialSeconds =  int32(8884); % 0x22B4
       DAQmx_CI_GPS_SyncMethod =  int32(4242); % 0x1092
       DAQmx_CI_GPS_SyncSrc =  int32(4243); % 0x1093
       DAQmx_CI_CtrTimebaseSrc =  int32(323); % 0x0143
       DAQmx_CI_CtrTimebaseRate =  int32(6322); % 0x18B2
       DAQmx_CI_CtrTimebaseActiveEdge =  int32(322); % 0x0142
       DAQmx_CI_CtrTimebase_DigFltr_Enable =  int32(8817); % 0x2271
       DAQmx_CI_CtrTimebase_DigFltr_MinPulseWidth =  int32(8818); % 0x2272
       DAQmx_CI_CtrTimebase_DigFltr_TimebaseSrc =  int32(8819); % 0x2273
       DAQmx_CI_CtrTimebase_DigFltr_TimebaseRate =  int32(8820); % 0x2274
       DAQmx_CI_CtrTimebase_DigSync_Enable =  int32(8821); % 0x2275
       DAQmx_CI_Count =  int32(328); % 0x0148
       DAQmx_CI_OutputState =  int32(329); % 0x0149
       DAQmx_CI_TCReached =  int32(336); % 0x0150
       DAQmx_CI_CtrTimebaseMasterTimebaseDiv =  int32(6323); % 0x18B3
       DAQmx_CI_DataXferMech =  int32(512); % 0x0200
       DAQmx_CI_DataXferReqCond =  int32(12027); % 0x2EFB
       DAQmx_CI_UsbXferReqSize =  int32(10898); % 0x2A92
       DAQmx_CI_MemMapEnable =  int32(11986); % 0x2ED2
       DAQmx_CI_NumPossiblyInvalidSamps =  int32(6460); % 0x193C
       DAQmx_CI_DupCountPrevent =  int32(8620); % 0x21AC
       DAQmx_CI_Prescaler =  int32(8761); % 0x2239
       DAQmx_CO_OutputType =  int32(6325); % 0x18B5
       DAQmx_CO_Pulse_IdleState =  int32(4464); % 0x1170
       DAQmx_CO_Pulse_Term =  int32(6369); % 0x18E1
       DAQmx_CO_Pulse_Time_Units =  int32(6358); % 0x18D6
       DAQmx_CO_Pulse_HighTime =  int32(6330); % 0x18BA
       DAQmx_CO_Pulse_LowTime =  int32(6331); % 0x18BB
       DAQmx_CO_Pulse_Time_InitialDelay =  int32(6332); % 0x18BC
       DAQmx_CO_Pulse_DutyCyc =  int32(4470); % 0x1176
       DAQmx_CO_Pulse_Freq_Units =  int32(6357); % 0x18D5
       DAQmx_CO_Pulse_Freq =  int32(4472); % 0x1178
       DAQmx_CO_Pulse_Freq_InitialDelay =  int32(665); % 0x0299
       DAQmx_CO_Pulse_HighTicks =  int32(4457); % 0x1169
       DAQmx_CO_Pulse_LowTicks =  int32(4465); % 0x1171
       DAQmx_CO_Pulse_Ticks_InitialDelay =  int32(664); % 0x0298
       DAQmx_CO_CtrTimebaseSrc =  int32(825); % 0x0339
       DAQmx_CO_CtrTimebaseRate =  int32(6338); % 0x18C2
       DAQmx_CO_CtrTimebaseActiveEdge =  int32(833); % 0x0341
       DAQmx_CO_CtrTimebase_DigFltr_Enable =  int32(8822); % 0x2276
       DAQmx_CO_CtrTimebase_DigFltr_MinPulseWidth =  int32(8823); % 0x2277
       DAQmx_CO_CtrTimebase_DigFltr_TimebaseSrc =  int32(8824); % 0x2278
       DAQmx_CO_CtrTimebase_DigFltr_TimebaseRate =  int32(8825); % 0x2279
       DAQmx_CO_CtrTimebase_DigSync_Enable =  int32(8826); % 0x227A
       DAQmx_CO_Count =  int32(659); % 0x0293
       DAQmx_CO_OutputState =  int32(660); % 0x0294
       DAQmx_CO_AutoIncrCnt =  int32(661); % 0x0295
       DAQmx_CO_CtrTimebaseMasterTimebaseDiv =  int32(6339); % 0x18C3
       DAQmx_CO_PulseDone =  int32(6414); % 0x190E
       DAQmx_CO_EnableInitialDelayOnRetrigger =  int32(11977); % 0x2EC9
       DAQmx_CO_ConstrainedGenMode =  int32(10738); % 0x29F2
       DAQmx_CO_UseOnlyOnBrdMem =  int32(11979); % 0x2ECB
       DAQmx_CO_DataXferMech =  int32(11980); % 0x2ECC
       DAQmx_CO_DataXferReqCond =  int32(11981); % 0x2ECD
       DAQmx_CO_UsbXferReqSize =  int32(10899); % 0x2A93
       DAQmx_CO_MemMapEnable =  int32(11987); % 0x2ED3
       DAQmx_CO_Prescaler =  int32(8813); % 0x226D
       DAQmx_CO_RdyForNewVal =  int32(8959); % 0x22FF
       DAQmx_ChanType =  int32(6271); % 0x187F
       DAQmx_PhysicalChanName =  int32(6389); % 0x18F5
       DAQmx_ChanDescr =  int32(6438); % 0x1926
       DAQmx_ChanIsGlobal =  int32(8964); % 0x2304
       DAQmx_Exported_AIConvClk_OutputTerm =  int32(5767); % 0x1687
       DAQmx_Exported_AIConvClk_Pulse_Polarity =  int32(5768); % 0x1688
       DAQmx_Exported_10MHzRefClk_OutputTerm =  int32(8814); % 0x226E
       DAQmx_Exported_20MHzTimebase_OutputTerm =  int32(5719); % 0x1657
       DAQmx_Exported_SampClk_OutputBehavior =  int32(6251); % 0x186B
       DAQmx_Exported_SampClk_OutputTerm =  int32(5731); % 0x1663
       DAQmx_Exported_SampClk_DelayOffset =  int32(8644); % 0x21C4
       DAQmx_Exported_SampClk_Pulse_Polarity =  int32(5732); % 0x1664
       DAQmx_Exported_SampClkTimebase_OutputTerm =  int32(6393); % 0x18F9
       DAQmx_Exported_DividedSampClkTimebase_OutputTerm =  int32(8609); % 0x21A1
       DAQmx_Exported_AdvTrig_OutputTerm =  int32(5701); % 0x1645
       DAQmx_Exported_AdvTrig_Pulse_Polarity =  int32(5702); % 0x1646
       DAQmx_Exported_AdvTrig_Pulse_WidthUnits =  int32(5703); % 0x1647
       DAQmx_Exported_AdvTrig_Pulse_Width =  int32(5704); % 0x1648
       DAQmx_Exported_PauseTrig_OutputTerm =  int32(5653); % 0x1615
       DAQmx_Exported_PauseTrig_Lvl_ActiveLvl =  int32(5654); % 0x1616
       DAQmx_Exported_RefTrig_OutputTerm =  int32(1424); % 0x0590
       DAQmx_Exported_RefTrig_Pulse_Polarity =  int32(1425); % 0x0591
       DAQmx_Exported_StartTrig_OutputTerm =  int32(1412); % 0x0584
       DAQmx_Exported_StartTrig_Pulse_Polarity =  int32(1413); % 0x0585
       DAQmx_Exported_AdvCmpltEvent_OutputTerm =  int32(5713); % 0x1651
       DAQmx_Exported_AdvCmpltEvent_Delay =  int32(5975); % 0x1757
       DAQmx_Exported_AdvCmpltEvent_Pulse_Polarity =  int32(5714); % 0x1652
       DAQmx_Exported_AdvCmpltEvent_Pulse_Width =  int32(5716); % 0x1654
       DAQmx_Exported_AIHoldCmpltEvent_OutputTerm =  int32(6381); % 0x18ED
       DAQmx_Exported_AIHoldCmpltEvent_PulsePolarity =  int32(6382); % 0x18EE
       DAQmx_Exported_ChangeDetectEvent_OutputTerm =  int32(8599); % 0x2197
       DAQmx_Exported_ChangeDetectEvent_Pulse_Polarity =  int32(8963); % 0x2303
       DAQmx_Exported_CtrOutEvent_OutputTerm =  int32(5911); % 0x1717
       DAQmx_Exported_CtrOutEvent_OutputBehavior =  int32(5967); % 0x174F
       DAQmx_Exported_CtrOutEvent_Pulse_Polarity =  int32(5912); % 0x1718
       DAQmx_Exported_CtrOutEvent_Toggle_IdleState =  int32(6250); % 0x186A
       DAQmx_Exported_HshkEvent_OutputTerm =  int32(8890); % 0x22BA
       DAQmx_Exported_HshkEvent_OutputBehavior =  int32(8891); % 0x22BB
       DAQmx_Exported_HshkEvent_Delay =  int32(8892); % 0x22BC
       DAQmx_Exported_HshkEvent_Interlocked_AssertedLvl =  int32(8893); % 0x22BD
       DAQmx_Exported_HshkEvent_Interlocked_AssertOnStart =  int32(8894); % 0x22BE
       DAQmx_Exported_HshkEvent_Interlocked_DeassertDelay =  int32(8895); % 0x22BF
       DAQmx_Exported_HshkEvent_Pulse_Polarity =  int32(8896); % 0x22C0
       DAQmx_Exported_HshkEvent_Pulse_Width =  int32(8897); % 0x22C1
       DAQmx_Exported_RdyForXferEvent_OutputTerm =  int32(8885); % 0x22B5
       DAQmx_Exported_RdyForXferEvent_Lvl_ActiveLvl =  int32(8886); % 0x22B6
       DAQmx_Exported_RdyForXferEvent_DeassertCond =  int32(10595); % 0x2963
       DAQmx_Exported_RdyForXferEvent_DeassertCondCustomThreshold =  int32(10596); % 0x2964
       DAQmx_Exported_DataActiveEvent_OutputTerm =  int32(5683); % 0x1633
       DAQmx_Exported_DataActiveEvent_Lvl_ActiveLvl =  int32(5684); % 0x1634
       DAQmx_Exported_RdyForStartEvent_OutputTerm =  int32(5641); % 0x1609
       DAQmx_Exported_RdyForStartEvent_Lvl_ActiveLvl =  int32(5969); % 0x1751
       DAQmx_Exported_SyncPulseEvent_OutputTerm =  int32(8764); % 0x223C
       DAQmx_Exported_WatchdogExpiredEvent_OutputTerm =  int32(8618); % 0x21AA
       DAQmx_Dev_IsSimulated =  int32(8906); % 0x22CA
       DAQmx_Dev_ProductCategory =  int32(10665); % 0x29A9
       DAQmx_Dev_ProductType =  int32(1585); % 0x0631
       DAQmx_Dev_ProductNum =  int32(8989); % 0x231D
       DAQmx_Dev_SerialNum =  int32(1586); % 0x0632
       DAQmx_Dev_Accessory_ProductTypes =  int32(12141); % 0x2F6D
       DAQmx_Dev_Accessory_ProductNums =  int32(12142); % 0x2F6E
       DAQmx_Dev_Accessory_SerialNums =  int32(12143); % 0x2F6F
       DAQmx_Carrier_SerialNum =  int32(10890); % 0x2A8A
       DAQmx_Dev_Chassis_ModuleDevNames =  int32(10678); % 0x29B6
       DAQmx_Dev_AnlgTrigSupported =  int32(10628); % 0x2984
       DAQmx_Dev_DigTrigSupported =  int32(10629); % 0x2985
       DAQmx_Dev_AI_PhysicalChans =  int32(8990); % 0x231E
       DAQmx_Dev_AI_MaxSingleChanRate =  int32(10636); % 0x298C
       DAQmx_Dev_AI_MaxMultiChanRate =  int32(10637); % 0x298D
       DAQmx_Dev_AI_MinRate =  int32(10638); % 0x298E
       DAQmx_Dev_AI_SimultaneousSamplingSupported =  int32(10639); % 0x298F
       DAQmx_Dev_AI_TrigUsage =  int32(10630); % 0x2986
       DAQmx_Dev_AI_VoltageRngs =  int32(10640); % 0x2990
       DAQmx_Dev_AI_VoltageIntExcitDiscreteVals =  int32(10697); % 0x29C9
       DAQmx_Dev_AI_VoltageIntExcitRangeVals =  int32(10698); % 0x29CA
       DAQmx_Dev_AI_CurrentRngs =  int32(10641); % 0x2991
       DAQmx_Dev_AI_CurrentIntExcitDiscreteVals =  int32(10699); % 0x29CB
       DAQmx_Dev_AI_FreqRngs =  int32(10642); % 0x2992
       DAQmx_Dev_AI_Gains =  int32(10643); % 0x2993
       DAQmx_Dev_AI_Couplings =  int32(10644); % 0x2994
       DAQmx_Dev_AI_LowpassCutoffFreqDiscreteVals =  int32(10645); % 0x2995
       DAQmx_Dev_AI_LowpassCutoffFreqRangeVals =  int32(10703); % 0x29CF
       DAQmx_Dev_AO_PhysicalChans =  int32(8991); % 0x231F
       DAQmx_Dev_AO_SampClkSupported =  int32(10646); % 0x2996
       DAQmx_Dev_AO_MaxRate =  int32(10647); % 0x2997
       DAQmx_Dev_AO_MinRate =  int32(10648); % 0x2998
       DAQmx_Dev_AO_TrigUsage =  int32(10631); % 0x2987
       DAQmx_Dev_AO_VoltageRngs =  int32(10651); % 0x299B
       DAQmx_Dev_AO_CurrentRngs =  int32(10652); % 0x299C
       DAQmx_Dev_AO_Gains =  int32(10653); % 0x299D
       DAQmx_Dev_DI_Lines =  int32(8992); % 0x2320
       DAQmx_Dev_DI_Ports =  int32(8993); % 0x2321
       DAQmx_Dev_DI_MaxRate =  int32(10649); % 0x2999
       DAQmx_Dev_DI_TrigUsage =  int32(10632); % 0x2988
       DAQmx_Dev_DO_Lines =  int32(8994); % 0x2322
       DAQmx_Dev_DO_Ports =  int32(8995); % 0x2323
       DAQmx_Dev_DO_MaxRate =  int32(10650); % 0x299A
       DAQmx_Dev_DO_TrigUsage =  int32(10633); % 0x2989
       DAQmx_Dev_CI_PhysicalChans =  int32(8996); % 0x2324
       DAQmx_Dev_CI_TrigUsage =  int32(10634); % 0x298A
       DAQmx_Dev_CI_SampClkSupported =  int32(10654); % 0x299E
       DAQmx_Dev_CI_MaxSize =  int32(10655); % 0x299F
       DAQmx_Dev_CI_MaxTimebase =  int32(10656); % 0x29A0
       DAQmx_Dev_CO_PhysicalChans =  int32(8997); % 0x2325
       DAQmx_Dev_CO_SampClkSupported =  int32(12123); % 0x2F5B
       DAQmx_Dev_CO_TrigUsage =  int32(10635); % 0x298B
       DAQmx_Dev_CO_MaxSize =  int32(10657); % 0x29A1
       DAQmx_Dev_CO_MaxTimebase =  int32(10658); % 0x29A2
       DAQmx_Dev_NumDMAChans =  int32(9020); % 0x233C
       DAQmx_Dev_BusType =  int32(8998); % 0x2326
       DAQmx_Dev_PCI_BusNum =  int32(8999); % 0x2327
       DAQmx_Dev_PCI_DevNum =  int32(9000); % 0x2328
       DAQmx_Dev_PXI_ChassisNum =  int32(9001); % 0x2329
       DAQmx_Dev_PXI_SlotNum =  int32(9002); % 0x232A
       DAQmx_Dev_CompactDAQ_ChassisDevName =  int32(10679); % 0x29B7
       DAQmx_Dev_CompactDAQ_SlotNum =  int32(10680); % 0x29B8
       DAQmx_Dev_TCPIP_Hostname =  int32(10891); % 0x2A8B
       DAQmx_Dev_TCPIP_EthernetIP =  int32(10892); % 0x2A8C
       DAQmx_Dev_TCPIP_WirelessIP =  int32(10893); % 0x2A8D
       DAQmx_Dev_Terminals =  int32(10816); % 0x2A40
       DAQmx_Read_RelativeTo =  int32(6410); % 0x190A
       DAQmx_Read_Offset =  int32(6411); % 0x190B
       DAQmx_Read_ChannelsToRead =  int32(6179); % 0x1823
       DAQmx_Read_ReadAllAvailSamp =  int32(4629); % 0x1215
       DAQmx_Read_AutoStart =  int32(6182); % 0x1826
       DAQmx_Read_OverWrite =  int32(4625); % 0x1211
       DAQmx_Read_CurrReadPos =  int32(4641); % 0x1221
       DAQmx_Read_AvailSampPerChan =  int32(4643); % 0x1223
       DAQmx_Logging_FilePath =  int32(11972); % 0x2EC4
       DAQmx_Logging_Mode =  int32(11973); % 0x2EC5
       DAQmx_Logging_TDMS_GroupName =  int32(11974); % 0x2EC6
       DAQmx_Logging_TDMS_Operation =  int32(11975); % 0x2EC7
       DAQmx_Read_TotalSampPerChanAcquired =  int32(6442); % 0x192A
       DAQmx_Read_CommonModeRangeErrorChansExist =  int32(10904); % 0x2A98
       DAQmx_Read_CommonModeRangeErrorChans =  int32(10905); % 0x2A99
       DAQmx_Read_OvercurrentChansExist =  int32(10726); % 0x29E6
       DAQmx_Read_OvercurrentChans =  int32(10727); % 0x29E7
       DAQmx_Read_OpenCurrentLoopChansExist =  int32(10761); % 0x2A09
       DAQmx_Read_OpenCurrentLoopChans =  int32(10762); % 0x2A0A
       DAQmx_Read_OpenThrmcplChansExist =  int32(10902); % 0x2A96
       DAQmx_Read_OpenThrmcplChans =  int32(10903); % 0x2A97
       DAQmx_Read_OverloadedChansExist =  int32(8564); % 0x2174
       DAQmx_Read_OverloadedChans =  int32(8565); % 0x2175
       DAQmx_Read_AccessoryInsertionOrRemovalDetected =  int32(12144); % 0x2F70
       DAQmx_Read_DevsWithInsertedOrRemovedAccessories =  int32(12145); % 0x2F71
       DAQmx_Read_ChangeDetect_HasOverflowed =  int32(8596); % 0x2194
       DAQmx_Read_RawDataWidth =  int32(8570); % 0x217A
       DAQmx_Read_NumChans =  int32(8571); % 0x217B
       DAQmx_Read_DigitalLines_BytesPerChan =  int32(8572); % 0x217C
       DAQmx_Read_WaitMode =  int32(8754); % 0x2232
       DAQmx_Read_SleepTime =  int32(8880); % 0x22B0
       DAQmx_RealTime_ConvLateErrorsToWarnings =  int32(8942); % 0x22EE
       DAQmx_RealTime_NumOfWarmupIters =  int32(8941); % 0x22ED
       DAQmx_RealTime_WaitForNextSampClkWaitMode =  int32(8943); % 0x22EF
       DAQmx_RealTime_ReportMissedSamp =  int32(8985); % 0x2319
       DAQmx_RealTime_WriteRecoveryMode =  int32(8986); % 0x231A
       DAQmx_SwitchChan_Usage =  int32(6372); % 0x18E4
       DAQmx_SwitchChan_AnlgBusSharingEnable =  int32(12190); % 0x2F9E
       DAQmx_SwitchChan_MaxACCarryCurrent =  int32(1608); % 0x0648
       DAQmx_SwitchChan_MaxACSwitchCurrent =  int32(1606); % 0x0646
       DAQmx_SwitchChan_MaxACCarryPwr =  int32(1602); % 0x0642
       DAQmx_SwitchChan_MaxACSwitchPwr =  int32(1604); % 0x0644
       DAQmx_SwitchChan_MaxDCCarryCurrent =  int32(1607); % 0x0647
       DAQmx_SwitchChan_MaxDCSwitchCurrent =  int32(1605); % 0x0645
       DAQmx_SwitchChan_MaxDCCarryPwr =  int32(1603); % 0x0643
       DAQmx_SwitchChan_MaxDCSwitchPwr =  int32(1609); % 0x0649
       DAQmx_SwitchChan_MaxACVoltage =  int32(1617); % 0x0651
       DAQmx_SwitchChan_MaxDCVoltage =  int32(1616); % 0x0650
       DAQmx_SwitchChan_WireMode =  int32(6373); % 0x18E5
       DAQmx_SwitchChan_Bandwidth =  int32(1600); % 0x0640
       DAQmx_SwitchChan_Impedance =  int32(1601); % 0x0641
       DAQmx_SwitchDev_SettlingTime =  int32(4676); % 0x1244
       DAQmx_SwitchDev_AutoConnAnlgBus =  int32(6106); % 0x17DA
       DAQmx_SwitchDev_PwrDownLatchRelaysAfterSettling =  int32(8923); % 0x22DB
       DAQmx_SwitchDev_Settled =  int32(4675); % 0x1243
       DAQmx_SwitchDev_RelayList =  int32(6108); % 0x17DC
       DAQmx_SwitchDev_NumRelays =  int32(6374); % 0x18E6
       DAQmx_SwitchDev_SwitchChanList =  int32(6375); % 0x18E7
       DAQmx_SwitchDev_NumSwitchChans =  int32(6376); % 0x18E8
       DAQmx_SwitchDev_NumRows =  int32(6377); % 0x18E9
       DAQmx_SwitchDev_NumColumns =  int32(6378); % 0x18EA
       DAQmx_SwitchDev_Topology =  int32(6461); % 0x193D
       DAQmx_SwitchScan_BreakMode =  int32(4679); % 0x1247
       DAQmx_SwitchScan_RepeatMode =  int32(4680); % 0x1248
       DAQmx_SwitchScan_WaitingForAdv =  int32(6105); % 0x17D9
       DAQmx_Scale_Descr =  int32(4646); % 0x1226
       DAQmx_Scale_ScaledUnits =  int32(6427); % 0x191B
       DAQmx_Scale_PreScaledUnits =  int32(6391); % 0x18F7
       DAQmx_Scale_Type =  int32(6441); % 0x1929
       DAQmx_Scale_Lin_Slope =  int32(4647); % 0x1227
       DAQmx_Scale_Lin_YIntercept =  int32(4648); % 0x1228
       DAQmx_Scale_Map_ScaledMax =  int32(4649); % 0x1229
       DAQmx_Scale_Map_PreScaledMax =  int32(4657); % 0x1231
       DAQmx_Scale_Map_ScaledMin =  int32(4656); % 0x1230
       DAQmx_Scale_Map_PreScaledMin =  int32(4658); % 0x1232
       DAQmx_Scale_Poly_ForwardCoeff =  int32(4660); % 0x1234
       DAQmx_Scale_Poly_ReverseCoeff =  int32(4661); % 0x1235
       DAQmx_Scale_Table_ScaledVals =  int32(4662); % 0x1236
       DAQmx_Scale_Table_PreScaledVals =  int32(4663); % 0x1237
       DAQmx_Sys_GlobalChans =  int32(4709); % 0x1265
       DAQmx_Sys_Scales =  int32(4710); % 0x1266
       DAQmx_Sys_Tasks =  int32(4711); % 0x1267
       DAQmx_Sys_DevNames =  int32(6459); % 0x193B
       DAQmx_Sys_NIDAQMajorVersion =  int32(4722); % 0x1272
       DAQmx_Sys_NIDAQMinorVersion =  int32(6435); % 0x1923
       DAQmx_Sys_NIDAQUpdateVersion =  int32(12066); % 0x2F22
       DAQmx_Task_Name =  int32(4726); % 0x1276
       DAQmx_Task_Channels =  int32(4723); % 0x1273
       DAQmx_Task_NumChans =  int32(8577); % 0x2181
       DAQmx_Task_Devices =  int32(8974); % 0x230E
       DAQmx_Task_NumDevices =  int32(10682); % 0x29BA
       DAQmx_Task_Complete =  int32(4724); % 0x1274
       DAQmx_SampQuant_SampMode =  int32(4864); % 0x1300
       DAQmx_SampQuant_SampPerChan =  int32(4880); % 0x1310
       DAQmx_SampTimingType =  int32(4935); % 0x1347
       DAQmx_SampClk_Rate =  int32(4932); % 0x1344
       DAQmx_SampClk_MaxRate =  int32(8904); % 0x22C8
       DAQmx_SampClk_Src =  int32(6226); % 0x1852
       DAQmx_SampClk_ActiveEdge =  int32(4865); % 0x1301
       DAQmx_SampClk_OverrunBehavior =  int32(12028); % 0x2EFC
       DAQmx_SampClk_UnderflowBehavior =  int32(10593); % 0x2961
       DAQmx_SampClk_TimebaseDiv =  int32(6379); % 0x18EB
       DAQmx_SampClk_Term =  int32(12059); % 0x2F1B
       DAQmx_SampClk_Timebase_Rate =  int32(4867); % 0x1303
       DAQmx_SampClk_Timebase_Src =  int32(4872); % 0x1308
       DAQmx_SampClk_Timebase_ActiveEdge =  int32(6380); % 0x18EC
       DAQmx_SampClk_Timebase_MasterTimebaseDiv =  int32(4869); % 0x1305
       DAQmx_SampClkTimebase_Term =  int32(12060); % 0x2F1C
       DAQmx_SampClk_DigFltr_Enable =  int32(8734); % 0x221E
       DAQmx_SampClk_DigFltr_MinPulseWidth =  int32(8735); % 0x221F
       DAQmx_SampClk_DigFltr_TimebaseSrc =  int32(8736); % 0x2220
       DAQmx_SampClk_DigFltr_TimebaseRate =  int32(8737); % 0x2221
       DAQmx_SampClk_DigSync_Enable =  int32(8738); % 0x2222
       DAQmx_Hshk_DelayAfterXfer =  int32(8898); % 0x22C2
       DAQmx_Hshk_StartCond =  int32(8899); % 0x22C3
       DAQmx_Hshk_SampleInputDataWhen =  int32(8900); % 0x22C4
       DAQmx_ChangeDetect_DI_RisingEdgePhysicalChans =  int32(8597); % 0x2195
       DAQmx_ChangeDetect_DI_FallingEdgePhysicalChans =  int32(8598); % 0x2196
       DAQmx_ChangeDetect_DI_Tristate =  int32(12026); % 0x2EFA
       DAQmx_OnDemand_SimultaneousAOEnable =  int32(8608); % 0x21A0
       DAQmx_Implicit_UnderflowBehavior =  int32(12029); % 0x2EFD
       DAQmx_AIConv_Rate =  int32(6216); % 0x1848
       DAQmx_AIConv_MaxRate =  int32(8905); % 0x22C9
       DAQmx_AIConv_Src =  int32(5378); % 0x1502
       DAQmx_AIConv_ActiveEdge =  int32(6227); % 0x1853
       DAQmx_AIConv_TimebaseDiv =  int32(4917); % 0x1335
       DAQmx_AIConv_Timebase_Src =  int32(4921); % 0x1339
       DAQmx_DelayFromSampClk_DelayUnits =  int32(4868); % 0x1304
       DAQmx_DelayFromSampClk_Delay =  int32(4887); % 0x1317
       DAQmx_AIConv_DigFltr_Enable =  int32(11996); % 0x2EDC
       DAQmx_AIConv_DigFltr_MinPulseWidth =  int32(11997); % 0x2EDD
       DAQmx_AIConv_DigFltr_TimebaseSrc =  int32(11998); % 0x2EDE
       DAQmx_AIConv_DigFltr_TimebaseRate =  int32(11999); % 0x2EDF
       DAQmx_AIConv_DigSync_Enable =  int32(12000); % 0x2EE0
       DAQmx_MasterTimebase_Rate =  int32(5269); % 0x1495
       DAQmx_MasterTimebase_Src =  int32(4931); % 0x1343
       DAQmx_RefClk_Rate =  int32(4885); % 0x1315
       DAQmx_RefClk_Src =  int32(4886); % 0x1316
       DAQmx_SyncPulse_Src =  int32(8765); % 0x223D
       DAQmx_SyncPulse_SyncTime =  int32(8766); % 0x223E
       DAQmx_SyncPulse_MinDelayToStart =  int32(8767); % 0x223F
       DAQmx_SyncPulse_ResetTime =  int32(12156); % 0x2F7C
       DAQmx_SyncPulse_ResetDelay =  int32(12157); % 0x2F7D
       DAQmx_SyncPulse_Term =  int32(12165); % 0x2F85
       DAQmx_SyncClk_Interval =  int32(12158); % 0x2F7E
       DAQmx_SampTimingEngine =  int32(10790); % 0x2A26
       DAQmx_StartTrig_Type =  int32(5011); % 0x1393
       DAQmx_StartTrig_Term =  int32(12062); % 0x2F1E
       DAQmx_DigEdge_StartTrig_Src =  int32(5127); % 0x1407
       DAQmx_DigEdge_StartTrig_Edge =  int32(5124); % 0x1404
       DAQmx_DigEdge_StartTrig_DigFltr_Enable =  int32(8739); % 0x2223
       DAQmx_DigEdge_StartTrig_DigFltr_MinPulseWidth =  int32(8740); % 0x2224
       DAQmx_DigEdge_StartTrig_DigFltr_TimebaseSrc =  int32(8741); % 0x2225
       DAQmx_DigEdge_StartTrig_DigFltr_TimebaseRate =  int32(8742); % 0x2226
       DAQmx_DigEdge_StartTrig_DigSync_Enable =  int32(8743); % 0x2227
       DAQmx_DigPattern_StartTrig_Src =  int32(5136); % 0x1410
       DAQmx_DigPattern_StartTrig_Pattern =  int32(8582); % 0x2186
       DAQmx_DigPattern_StartTrig_When =  int32(5137); % 0x1411
       DAQmx_AnlgEdge_StartTrig_Src =  int32(5016); % 0x1398
       DAQmx_AnlgEdge_StartTrig_Slope =  int32(5015); % 0x1397
       DAQmx_AnlgEdge_StartTrig_Lvl =  int32(5014); % 0x1396
       DAQmx_AnlgEdge_StartTrig_Hyst =  int32(5013); % 0x1395
       DAQmx_AnlgEdge_StartTrig_Coupling =  int32(8755); % 0x2233
       DAQmx_AnlgEdge_StartTrig_DigFltr_Enable =  int32(12001); % 0x2EE1
       DAQmx_AnlgEdge_StartTrig_DigFltr_MinPulseWidth =  int32(12002); % 0x2EE2
       DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseSrc =  int32(12003); % 0x2EE3
       DAQmx_AnlgEdge_StartTrig_DigFltr_TimebaseRate =  int32(12004); % 0x2EE4
       DAQmx_AnlgEdge_StartTrig_DigSync_Enable =  int32(12005); % 0x2EE5
       DAQmx_AnlgWin_StartTrig_Src =  int32(5120); % 0x1400
       DAQmx_AnlgWin_StartTrig_When =  int32(5121); % 0x1401
       DAQmx_AnlgWin_StartTrig_Top =  int32(5123); % 0x1403
       DAQmx_AnlgWin_StartTrig_Btm =  int32(5122); % 0x1402
       DAQmx_AnlgWin_StartTrig_Coupling =  int32(8756); % 0x2234
       DAQmx_AnlgWin_StartTrig_DigFltr_Enable =  int32(12031); % 0x2EFF
       DAQmx_AnlgWin_StartTrig_DigFltr_MinPulseWidth =  int32(12032); % 0x2F00
       DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseSrc =  int32(12033); % 0x2F01
       DAQmx_AnlgWin_StartTrig_DigFltr_TimebaseRate =  int32(12034); % 0x2F02
       DAQmx_AnlgWin_StartTrig_DigSync_Enable =  int32(12035); % 0x2F03
       DAQmx_StartTrig_Delay =  int32(6230); % 0x1856
       DAQmx_StartTrig_DelayUnits =  int32(6344); % 0x18C8
       DAQmx_StartTrig_Retriggerable =  int32(6415); % 0x190F
       DAQmx_RefTrig_Type =  int32(5145); % 0x1419
       DAQmx_RefTrig_PretrigSamples =  int32(5189); % 0x1445
       DAQmx_RefTrig_Term =  int32(12063); % 0x2F1F
       DAQmx_DigEdge_RefTrig_Src =  int32(5172); % 0x1434
       DAQmx_DigEdge_RefTrig_Edge =  int32(5168); % 0x1430
       DAQmx_DigEdge_RefTrig_DigFltr_Enable =  int32(11991); % 0x2ED7
       DAQmx_DigEdge_RefTrig_DigFltr_MinPulseWidth =  int32(11992); % 0x2ED8
       DAQmx_DigEdge_RefTrig_DigFltr_TimebaseSrc =  int32(11993); % 0x2ED9
       DAQmx_DigEdge_RefTrig_DigFltr_TimebaseRate =  int32(11994); % 0x2EDA
       DAQmx_DigEdge_RefTrig_DigSync_Enable =  int32(11995); % 0x2EDB
       DAQmx_DigPattern_RefTrig_Src =  int32(5175); % 0x1437
       DAQmx_DigPattern_RefTrig_Pattern =  int32(8583); % 0x2187
       DAQmx_DigPattern_RefTrig_When =  int32(5176); % 0x1438
       DAQmx_AnlgEdge_RefTrig_Src =  int32(5156); % 0x1424
       DAQmx_AnlgEdge_RefTrig_Slope =  int32(5155); % 0x1423
       DAQmx_AnlgEdge_RefTrig_Lvl =  int32(5154); % 0x1422
       DAQmx_AnlgEdge_RefTrig_Hyst =  int32(5153); % 0x1421
       DAQmx_AnlgEdge_RefTrig_Coupling =  int32(8757); % 0x2235
       DAQmx_AnlgEdge_RefTrig_DigFltr_Enable =  int32(12006); % 0x2EE6
       DAQmx_AnlgEdge_RefTrig_DigFltr_MinPulseWidth =  int32(12007); % 0x2EE7
       DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseSrc =  int32(12008); % 0x2EE8
       DAQmx_AnlgEdge_RefTrig_DigFltr_TimebaseRate =  int32(12009); % 0x2EE9
       DAQmx_AnlgEdge_RefTrig_DigSync_Enable =  int32(12010); % 0x2EEA
       DAQmx_AnlgWin_RefTrig_Src =  int32(5158); % 0x1426
       DAQmx_AnlgWin_RefTrig_When =  int32(5159); % 0x1427
       DAQmx_AnlgWin_RefTrig_Top =  int32(5161); % 0x1429
       DAQmx_AnlgWin_RefTrig_Btm =  int32(5160); % 0x1428
       DAQmx_AnlgWin_RefTrig_Coupling =  int32(6231); % 0x1857
       DAQmx_AnlgWin_RefTrig_DigFltr_Enable =  int32(12011); % 0x2EEB
       DAQmx_AnlgWin_RefTrig_DigFltr_MinPulseWidth =  int32(12012); % 0x2EEC
       DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseSrc =  int32(12013); % 0x2EED
       DAQmx_AnlgWin_RefTrig_DigFltr_TimebaseRate =  int32(12014); % 0x2EEE
       DAQmx_AnlgWin_RefTrig_DigSync_Enable =  int32(12015); % 0x2EEF
       DAQmx_RefTrig_AutoTrigEnable =  int32(11969); % 0x2EC1
       DAQmx_RefTrig_AutoTriggered =  int32(11970); % 0x2EC2
       DAQmx_RefTrig_Delay =  int32(5251); % 0x1483
       DAQmx_AdvTrig_Type =  int32(4965); % 0x1365
       DAQmx_DigEdge_AdvTrig_Src =  int32(4962); % 0x1362
       DAQmx_DigEdge_AdvTrig_Edge =  int32(4960); % 0x1360
       DAQmx_DigEdge_AdvTrig_DigFltr_Enable =  int32(8760); % 0x2238
       DAQmx_HshkTrig_Type =  int32(8887); % 0x22B7
       DAQmx_Interlocked_HshkTrig_Src =  int32(8888); % 0x22B8
       DAQmx_Interlocked_HshkTrig_AssertedLvl =  int32(8889); % 0x22B9
       DAQmx_PauseTrig_Type =  int32(4966); % 0x1366
       DAQmx_PauseTrig_Term =  int32(12064); % 0x2F20
       DAQmx_AnlgLvl_PauseTrig_Src =  int32(4976); % 0x1370
       DAQmx_AnlgLvl_PauseTrig_When =  int32(4977); % 0x1371
       DAQmx_AnlgLvl_PauseTrig_Lvl =  int32(4969); % 0x1369
       DAQmx_AnlgLvl_PauseTrig_Hyst =  int32(4968); % 0x1368
       DAQmx_AnlgLvl_PauseTrig_Coupling =  int32(8758); % 0x2236
       DAQmx_AnlgLvl_PauseTrig_DigFltr_Enable =  int32(12016); % 0x2EF0
       DAQmx_AnlgLvl_PauseTrig_DigFltr_MinPulseWidth =  int32(12017); % 0x2EF1
       DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseSrc =  int32(12018); % 0x2EF2
       DAQmx_AnlgLvl_PauseTrig_DigFltr_TimebaseRate =  int32(12019); % 0x2EF3
       DAQmx_AnlgLvl_PauseTrig_DigSync_Enable =  int32(12020); % 0x2EF4
       DAQmx_AnlgWin_PauseTrig_Src =  int32(4979); % 0x1373
       DAQmx_AnlgWin_PauseTrig_When =  int32(4980); % 0x1374
       DAQmx_AnlgWin_PauseTrig_Top =  int32(4982); % 0x1376
       DAQmx_AnlgWin_PauseTrig_Btm =  int32(4981); % 0x1375
       DAQmx_AnlgWin_PauseTrig_Coupling =  int32(8759); % 0x2237
       DAQmx_AnlgWin_PauseTrig_DigFltr_Enable =  int32(12021); % 0x2EF5
       DAQmx_AnlgWin_PauseTrig_DigFltr_MinPulseWidth =  int32(12022); % 0x2EF6
       DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseSrc =  int32(12023); % 0x2EF7
       DAQmx_AnlgWin_PauseTrig_DigFltr_TimebaseRate =  int32(12024); % 0x2EF8
       DAQmx_AnlgWin_PauseTrig_DigSync_Enable =  int32(12025); % 0x2EF9
       DAQmx_DigLvl_PauseTrig_Src =  int32(4985); % 0x1379
       DAQmx_DigLvl_PauseTrig_When =  int32(4992); % 0x1380
       DAQmx_DigLvl_PauseTrig_DigFltr_Enable =  int32(8744); % 0x2228
       DAQmx_DigLvl_PauseTrig_DigFltr_MinPulseWidth =  int32(8745); % 0x2229
       DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseSrc =  int32(8746); % 0x222A
       DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseRate =  int32(8747); % 0x222B
       DAQmx_DigLvl_PauseTrig_DigSync_Enable =  int32(8748); % 0x222C
       DAQmx_DigPattern_PauseTrig_Src =  int32(8559); % 0x216F
       DAQmx_DigPattern_PauseTrig_Pattern =  int32(8584); % 0x2188
       DAQmx_DigPattern_PauseTrig_When =  int32(8560); % 0x2170
       DAQmx_ArmStartTrig_Type =  int32(5140); % 0x1414
       DAQmx_ArmStart_Term =  int32(12159); % 0x2F7F
       DAQmx_DigEdge_ArmStartTrig_Src =  int32(5143); % 0x1417
       DAQmx_DigEdge_ArmStartTrig_Edge =  int32(5141); % 0x1415
       DAQmx_DigEdge_ArmStartTrig_DigFltr_Enable =  int32(8749); % 0x222D
       DAQmx_DigEdge_ArmStartTrig_DigFltr_MinPulseWidth =  int32(8750); % 0x222E
       DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseSrc =  int32(8751); % 0x222F
       DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseRate =  int32(8752); % 0x2230
       DAQmx_DigEdge_ArmStartTrig_DigSync_Enable =  int32(8753); % 0x2231
       DAQmx_Trigger_SyncType =  int32(12160); % 0x2F80
       DAQmx_Watchdog_Timeout =  int32(8617); % 0x21A9
       DAQmx_WatchdogExpirTrig_Type =  int32(8611); % 0x21A3
       DAQmx_DigEdge_WatchdogExpirTrig_Src =  int32(8612); % 0x21A4
       DAQmx_DigEdge_WatchdogExpirTrig_Edge =  int32(8613); % 0x21A5
       DAQmx_Watchdog_DO_ExpirState =  int32(8615); % 0x21A7
       DAQmx_Watchdog_HasExpired =  int32(8616); % 0x21A8
       DAQmx_Write_RelativeTo =  int32(6412); % 0x190C
       DAQmx_Write_Offset =  int32(6413); % 0x190D
       DAQmx_Write_RegenMode =  int32(5203); % 0x1453
       DAQmx_Write_CurrWritePos =  int32(5208); % 0x1458
       DAQmx_Write_OvercurrentChansExist =  int32(10728); % 0x29E8
       DAQmx_Write_OvercurrentChans =  int32(10729); % 0x29E9
       DAQmx_Write_OvertemperatureChansExist =  int32(10884); % 0x2A84
       DAQmx_Write_OpenCurrentLoopChansExist =  int32(10730); % 0x29EA
       DAQmx_Write_OpenCurrentLoopChans =  int32(10731); % 0x29EB
       DAQmx_Write_PowerSupplyFaultChansExist =  int32(10732); % 0x29EC
       DAQmx_Write_PowerSupplyFaultChans =  int32(10733); % 0x29ED
       DAQmx_Write_SpaceAvail =  int32(5216); % 0x1460
       DAQmx_Write_TotalSampPerChanGenerated =  int32(6443); % 0x192B
       DAQmx_Write_RawDataWidth =  int32(8573); % 0x217D
       DAQmx_Write_NumChans =  int32(8574); % 0x217E
       DAQmx_Write_WaitMode =  int32(8881); % 0x22B1
       DAQmx_Write_SleepTime =  int32(8882); % 0x22B2
       DAQmx_Write_NextWriteIsLast =  int32(10604); % 0x296C
       DAQmx_Write_DigitalLines_BytesPerChan =  int32(8575); % 0x217F
       DAQmx_PhysicalChan_AI_TermCfgs =  int32(9026); % 0x2342
       DAQmx_PhysicalChan_AO_TermCfgs =  int32(10659); % 0x29A3
       DAQmx_PhysicalChan_AO_ManualControlEnable =  int32(10782); % 0x2A1E
       DAQmx_PhysicalChan_AO_ManualControl_ShortDetected =  int32(11971); % 0x2EC3
       DAQmx_PhysicalChan_AO_ManualControlAmplitude =  int32(10783); % 0x2A1F
       DAQmx_PhysicalChan_AO_ManualControlFreq =  int32(10784); % 0x2A20
       DAQmx_PhysicalChan_DI_PortWidth =  int32(10660); % 0x29A4
       DAQmx_PhysicalChan_DI_SampClkSupported =  int32(10661); % 0x29A5
       DAQmx_PhysicalChan_DI_ChangeDetectSupported =  int32(10662); % 0x29A6
       DAQmx_PhysicalChan_DO_PortWidth =  int32(10663); % 0x29A7
       DAQmx_PhysicalChan_DO_SampClkSupported =  int32(10664); % 0x29A8
       DAQmx_PhysicalChan_TEDS_MfgID =  int32(8666); % 0x21DA
       DAQmx_PhysicalChan_TEDS_ModelNum =  int32(8667); % 0x21DB
       DAQmx_PhysicalChan_TEDS_SerialNum =  int32(8668); % 0x21DC
       DAQmx_PhysicalChan_TEDS_VersionNum =  int32(8669); % 0x21DD
       DAQmx_PhysicalChan_TEDS_VersionLetter =  int32(8670); % 0x21DE
       DAQmx_PhysicalChan_TEDS_BitStream =  int32(8671); % 0x21DF
       DAQmx_PhysicalChan_TEDS_TemplateIDs =  int32(8847); % 0x228F
       DAQmx_PersistedTask_Author =  int32(8908); % 0x22CC
       DAQmx_PersistedTask_AllowInteractiveEditing =  int32(8909); % 0x22CD
       DAQmx_PersistedTask_AllowInteractiveDeletion =  int32(8910); % 0x22CE
       DAQmx_PersistedChan_Author =  int32(8912); % 0x22D0
       DAQmx_PersistedChan_AllowInteractiveEditing =  int32(8913); % 0x22D1
       DAQmx_PersistedChan_AllowInteractiveDeletion =  int32(8914); % 0x22D2
       DAQmx_PersistedScale_Author =  int32(8916); % 0x22D4
       DAQmx_PersistedScale_AllowInteractiveEditing =  int32(8917); % 0x22D5
       DAQmx_PersistedScale_AllowInteractiveDeletion =  int32(8918); % 0x22D6
       DAQmx_ReadWaitMode =  int32(8754); % 0x2232
       DAQmx_Val_Task_Start =  int32(0);
       DAQmx_Val_Task_Stop =  int32(1);
       DAQmx_Val_Task_Verify =  int32(2);
       DAQmx_Val_Task_Commit =  int32(3);
       DAQmx_Val_Task_Reserve =  int32(4);
       DAQmx_Val_Task_Unreserve =  int32(5);
       DAQmx_Val_Task_Abort =  int32(6);
       DAQmx_Val_SynchronousEventCallbacks =  int32(1); % (1 << 0)
       DAQmx_Val_Acquired_Into_Buffer =  int32(1);
       DAQmx_Val_Transferred_From_Buffer =  int32(2);
       DAQmx_Val_ResetTimer =  int32(0);
       DAQmx_Val_ClearExpiration =  int32(1);
       DAQmx_Val_ChanPerLine =  int32(0);
       DAQmx_Val_ChanForAllLines =  int32(1);
       DAQmx_Val_GroupByChannel =  int32(0);
       DAQmx_Val_GroupByScanNumber =  int32(1);
       DAQmx_Val_DoNotInvertPolarity =  int32(0);
       DAQmx_Val_InvertPolarity =  int32(1);
       DAQmx_Val_Action_Commit =  int32(0);
       DAQmx_Val_Action_Cancel =  int32(1);
       DAQmx_Val_AdvanceTrigger =  int32(12488);
       DAQmx_Val_Rising =  int32(10280);
       DAQmx_Val_Falling =  int32(10171);
       DAQmx_Val_PathStatus_Available =  int32(10431);
       DAQmx_Val_PathStatus_AlreadyExists =  int32(10432);
       DAQmx_Val_PathStatus_Unsupported =  int32(10433);
       DAQmx_Val_PathStatus_ChannelInUse =  int32(10434);
       DAQmx_Val_PathStatus_SourceChannelConflict =  int32(10435);
       DAQmx_Val_PathStatus_ChannelReservedForRouting =  int32(10436);
       DAQmx_Val_DegC =  int32(10143);
       DAQmx_Val_DegF =  int32(10144);
       DAQmx_Val_Kelvins =  int32(10325);
       DAQmx_Val_DegR =  int32(10145);
       DAQmx_Val_High =  int32(10192);
       DAQmx_Val_Low =  int32(10214);
       DAQmx_Val_Tristate =  int32(10310);
       DAQmx_Val_ChannelVoltage =  int32(0);
       DAQmx_Val_ChannelCurrent =  int32(1);
       DAQmx_Val_Open =  int32(10437);
       DAQmx_Val_Closed =  int32(10438);
       DAQmx_Val_Loopback0 =  int32(0);
       DAQmx_Val_Loopback180 =  int32(1);
       DAQmx_Val_Ground =  int32(2);
       DAQmx_Val_Cfg_Default =  int32(-1);
       DAQmx_Val_Default =  int32(-1);
       DAQmx_Val_WaitInfinitely =  int32(-1.0);
       DAQmx_Val_Auto =  int32(-1);
       DAQmx_Val_Save_Overwrite =  int32(1); % (1 << 0)
       DAQmx_Val_Save_AllowInteractiveEditing =  int32(2); % (1 << 1)
       DAQmx_Val_Save_AllowInteractiveDeletion =  int32(4); % (1 << 2)
       DAQmx_Val_Bit_TriggerUsageTypes_Advance =  int32(1); % (1 << 0)
       DAQmx_Val_Bit_TriggerUsageTypes_Pause =  int32(2); % (1 << 1)
       DAQmx_Val_Bit_TriggerUsageTypes_Reference =  int32(4); % (1 << 2)
       DAQmx_Val_Bit_TriggerUsageTypes_Start =  int32(8); % (1 << 3)
       DAQmx_Val_Bit_TriggerUsageTypes_Handshake =  int32(16); % (1 << 4)
       DAQmx_Val_Bit_TriggerUsageTypes_ArmStart =  int32(32); % (1 << 5)
       DAQmx_Val_Bit_CouplingTypes_AC =  int32(1); % (1 << 0)
       DAQmx_Val_Bit_CouplingTypes_DC =  int32(2); % (1 << 1)
       DAQmx_Val_Bit_CouplingTypes_Ground =  int32(4); % (1 << 2)
       DAQmx_Val_Bit_CouplingTypes_HFReject =  int32(8); % (1 << 3)
       DAQmx_Val_Bit_CouplingTypes_LFReject =  int32(16); % (1 << 4)
       DAQmx_Val_Bit_CouplingTypes_NoiseReject =  int32(32); % (1 << 5)
       DAQmx_Val_Bit_TermCfg_RSE =  int32(1); % (1 << 0)
       DAQmx_Val_Bit_TermCfg_NRSE =  int32(2); % (1 << 1)
       DAQmx_Val_Bit_TermCfg_Diff =  int32(4); % (1 << 2)
       DAQmx_Val_Bit_TermCfg_PseudoDIFF =  int32(8); % (1 << 3)
       DAQmx_Val_4Wire =  int32(4);
       DAQmx_Val_5Wire =  int32(5);
       DAQmx_Val_HighResolution =  int32(10195);
       DAQmx_Val_HighSpeed =  int32(14712);
       DAQmx_Val_Best50HzRejection =  int32(14713);
       DAQmx_Val_Best60HzRejection =  int32(14714);
       DAQmx_Val_Custom =  int32(10137);
       DAQmx_Val_Voltage =  int32(10322);
       DAQmx_Val_VoltageRMS =  int32(10350);
       DAQmx_Val_Current =  int32(10134);
       DAQmx_Val_CurrentRMS =  int32(10351);
       DAQmx_Val_Voltage_CustomWithExcitation =  int32(10323);
       DAQmx_Val_Bridge =  int32(15908);
       DAQmx_Val_Freq_Voltage =  int32(10181);
       DAQmx_Val_Resistance =  int32(10278);
       DAQmx_Val_Temp_TC =  int32(10303);
       DAQmx_Val_Temp_Thrmstr =  int32(10302);
       DAQmx_Val_Temp_RTD =  int32(10301);
       DAQmx_Val_Temp_BuiltInSensor =  int32(10311);
       DAQmx_Val_Strain_Gage =  int32(10300);
       DAQmx_Val_Position_LVDT =  int32(10352);
       DAQmx_Val_Position_RVDT =  int32(10353);
       DAQmx_Val_Position_EddyCurrentProximityProbe =  int32(14835);
       DAQmx_Val_Accelerometer =  int32(10356);
       DAQmx_Val_Force_Bridge =  int32(15899);
       DAQmx_Val_Force_IEPESensor =  int32(15895);
       DAQmx_Val_Pressure_Bridge =  int32(15902);
       DAQmx_Val_SoundPressure_Microphone =  int32(10354);
       DAQmx_Val_Torque_Bridge =  int32(15905);
       DAQmx_Val_TEDS_Sensor =  int32(12531);
       DAQmx_Val_ZeroVolts =  int32(12526);
       DAQmx_Val_HighImpedance =  int32(12527);
       DAQmx_Val_MaintainExistingValue =  int32(12528);
       DAQmx_Val_FuncGen =  int32(14750);
       DAQmx_Val_mVoltsPerG =  int32(12509);
       DAQmx_Val_VoltsPerG =  int32(12510);
       DAQmx_Val_AccelUnit_g =  int32(10186);
       DAQmx_Val_MetersPerSecondSquared =  int32(12470);
       DAQmx_Val_FromCustomScale =  int32(10065);
       DAQmx_Val_FiniteSamps =  int32(10178);
       DAQmx_Val_ContSamps =  int32(10123);
       DAQmx_Val_HWTimedSinglePoint =  int32(12522);
       DAQmx_Val_AboveLvl =  int32(10093);
       DAQmx_Val_BelowLvl =  int32(10107);
       DAQmx_Val_Degrees =  int32(10146);
       DAQmx_Val_Radians =  int32(10273);
       DAQmx_Val_Ticks =  int32(10304);
       DAQmx_Val_None =  int32(10230);
       DAQmx_Val_Once =  int32(10244);
       DAQmx_Val_EverySample =  int32(10164);
       DAQmx_Val_NoAction =  int32(10227);
       DAQmx_Val_BreakBeforeMake =  int32(10110);
       DAQmx_Val_FullBridge =  int32(10182);
       DAQmx_Val_HalfBridge =  int32(10187);
       DAQmx_Val_QuarterBridge =  int32(10270);
       DAQmx_Val_NoBridge =  int32(10228);
       DAQmx_Val_VoltsPerVolt =  int32(15896);
       DAQmx_Val_mVoltsPerVolt =  int32(15897);
       DAQmx_Val_Newtons =  int32(15875);
       DAQmx_Val_Pounds =  int32(15876);
       DAQmx_Val_KilogramForce =  int32(15877);
       DAQmx_Val_Pascals =  int32(10081);
       DAQmx_Val_PoundsPerSquareInch =  int32(15879);
       DAQmx_Val_Bar =  int32(15880);
       DAQmx_Val_NewtonMeters =  int32(15881);
       DAQmx_Val_InchOunces =  int32(15882);
       DAQmx_Val_InchPounds =  int32(15883);
       DAQmx_Val_FootPounds =  int32(15884);
       DAQmx_Val_FromTEDS =  int32(12516);
       DAQmx_Val_PCI =  int32(12582);
       DAQmx_Val_PCIe =  int32(13612);
       DAQmx_Val_PXI =  int32(12583);
       DAQmx_Val_PXIe =  int32(14706);
       DAQmx_Val_SCXI =  int32(12584);
       DAQmx_Val_SCC =  int32(14707);
       DAQmx_Val_PCCard =  int32(12585);
       DAQmx_Val_USB =  int32(12586);
       DAQmx_Val_CompactDAQ =  int32(14637);
       DAQmx_Val_TCPIP =  int32(14828);
       DAQmx_Val_Unknown =  int32(12588);
       DAQmx_Val_SwitchBlock =  int32(15870);
       DAQmx_Val_CountEdges =  int32(10125);
       DAQmx_Val_Freq =  int32(10179);
       DAQmx_Val_Period =  int32(10256);
       DAQmx_Val_PulseWidth =  int32(10359);
       DAQmx_Val_SemiPeriod =  int32(10289);
       DAQmx_Val_PulseFrequency =  int32(15864);
       DAQmx_Val_PulseTime =  int32(15865);
       DAQmx_Val_PulseTicks =  int32(15866);
       DAQmx_Val_Position_AngEncoder =  int32(10360);
       DAQmx_Val_Position_LinEncoder =  int32(10361);
       DAQmx_Val_TwoEdgeSep =  int32(10267);
       DAQmx_Val_GPS_Timestamp =  int32(10362);
       DAQmx_Val_BuiltIn =  int32(10200);
       DAQmx_Val_ConstVal =  int32(10116);
       DAQmx_Val_Chan =  int32(10113);
       DAQmx_Val_Pulse_Time =  int32(10269);
       DAQmx_Val_Pulse_Freq =  int32(10119);
       DAQmx_Val_Pulse_Ticks =  int32(10268);
       DAQmx_Val_AI =  int32(10100);
       DAQmx_Val_AO =  int32(10102);
       DAQmx_Val_DI =  int32(10151);
       DAQmx_Val_DO =  int32(10153);
       DAQmx_Val_CI =  int32(10131);
       DAQmx_Val_CO =  int32(10132);
       DAQmx_Val_Unconstrained =  int32(14708);
       DAQmx_Val_FixedHighFreq =  int32(14709);
       DAQmx_Val_FixedLowFreq =  int32(14710);
       DAQmx_Val_Fixed50PercentDutyCycle =  int32(14711);
       DAQmx_Val_CountUp =  int32(10128);
       DAQmx_Val_CountDown =  int32(10124);
       DAQmx_Val_ExtControlled =  int32(10326);
       DAQmx_Val_LowFreq1Ctr =  int32(10105);
       DAQmx_Val_HighFreq2Ctr =  int32(10157);
       DAQmx_Val_LargeRng2Ctr =  int32(10205);
       DAQmx_Val_AC =  int32(10045);
       DAQmx_Val_DC =  int32(10050);
       DAQmx_Val_GND =  int32(10066);
       DAQmx_Val_Internal =  int32(10200);
       DAQmx_Val_External =  int32(10167);
       DAQmx_Val_Amps =  int32(10342);
       DAQmx_Val_RightJustified =  int32(10279);
       DAQmx_Val_LeftJustified =  int32(10209);
       DAQmx_Val_DMA =  int32(10054);
       DAQmx_Val_Interrupts =  int32(10204);
       DAQmx_Val_ProgrammedIO =  int32(10264);
       DAQmx_Val_USBbulk =  int32(12590);
       DAQmx_Val_OnbrdMemMoreThanHalfFull =  int32(10237);
       DAQmx_Val_OnbrdMemFull =  int32(10236);
       DAQmx_Val_OnbrdMemCustomThreshold =  int32(12577);
       DAQmx_Val_ActiveDrive =  int32(12573);
       DAQmx_Val_OpenCollector =  int32(12574);
       DAQmx_Val_NoChange =  int32(10160);
       DAQmx_Val_PatternMatches =  int32(10254);
       DAQmx_Val_PatternDoesNotMatch =  int32(10253);
       DAQmx_Val_SampClkPeriods =  int32(10286);
       DAQmx_Val_Seconds =  int32(10364);
       DAQmx_Val_mVoltsPerMil =  int32(14836);
       DAQmx_Val_VoltsPerMil =  int32(14837);
       DAQmx_Val_mVoltsPerMillimeter =  int32(14838);
       DAQmx_Val_VoltsPerMillimeter =  int32(14839);
       DAQmx_Val_mVoltsPerMicron =  int32(14840);
       DAQmx_Val_X1 =  int32(10090);
       DAQmx_Val_X2 =  int32(10091);
       DAQmx_Val_X4 =  int32(10092);
       DAQmx_Val_TwoPulseCounting =  int32(10313);
       DAQmx_Val_AHighBHigh =  int32(10040);
       DAQmx_Val_AHighBLow =  int32(10041);
       DAQmx_Val_ALowBHigh =  int32(10042);
       DAQmx_Val_ALowBLow =  int32(10043);
       DAQmx_Val_Pulse =  int32(10265);
       DAQmx_Val_Toggle =  int32(10307);
       DAQmx_Val_Lvl =  int32(10210);
       DAQmx_Val_Interlocked =  int32(12549);
       DAQmx_Val_mVoltsPerNewton =  int32(15891);
       DAQmx_Val_mVoltsPerPound =  int32(15892);
       DAQmx_Val_Hz =  int32(10373);
       DAQmx_Val_Sine =  int32(14751);
       DAQmx_Val_Triangle =  int32(14752);
       DAQmx_Val_Square =  int32(14753);
       DAQmx_Val_Sawtooth =  int32(14754);
       DAQmx_Val_IRIGB =  int32(10070);
       DAQmx_Val_PPS =  int32(10080);
       DAQmx_Val_Immediate =  int32(10198);
       DAQmx_Val_WaitForHandshakeTriggerAssert =  int32(12550);
       DAQmx_Val_WaitForHandshakeTriggerDeassert =  int32(12551);
       DAQmx_Val_OnBrdMemMoreThanHalfFull =  int32(10237);
       DAQmx_Val_OnBrdMemNotEmpty =  int32(10241);
       DAQmx_Val_WhenAcqComplete =  int32(12546);
       DAQmx_Val_RSE =  int32(10083);
       DAQmx_Val_NRSE =  int32(10078);
       DAQmx_Val_Diff =  int32(10106);
       DAQmx_Val_PseudoDiff =  int32(12529);
       DAQmx_Val_mVoltsPerVoltPerMillimeter =  int32(12506);
       DAQmx_Val_mVoltsPerVoltPerMilliInch =  int32(12505);
       DAQmx_Val_Meters =  int32(10219);
       DAQmx_Val_Inches =  int32(10379);
       DAQmx_Val_Off =  int32(10231);
       DAQmx_Val_Log =  int32(15844);
       DAQmx_Val_LogAndRead =  int32(15842);
       DAQmx_Val_OpenOrCreate =  int32(15846);
       DAQmx_Val_CreateOrReplace =  int32(15847);
       DAQmx_Val_Create =  int32(15848);
       DAQmx_Val_2point5V =  int32(14620);
       DAQmx_Val_3point3V =  int32(14621);
       DAQmx_Val_5V =  int32(14619);
       DAQmx_Val_SameAsSampTimebase =  int32(10284);
       DAQmx_Val_100MHzTimebase =  int32(15857);
       DAQmx_Val_SameAsMasterTimebase =  int32(10282);
       DAQmx_Val_20MHzTimebase =  int32(12537);
       DAQmx_Val_80MHzTimebase =  int32(14636);
       DAQmx_Val_AM =  int32(14756);
       DAQmx_Val_FM =  int32(14757);
       DAQmx_Val_OnBrdMemEmpty =  int32(10235);
       DAQmx_Val_OnBrdMemHalfFullOrLess =  int32(10239);
       DAQmx_Val_OnBrdMemNotFull =  int32(10242);
       DAQmx_Val_StopTaskAndError =  int32(15862);
       DAQmx_Val_IgnoreOverruns =  int32(15863);
       DAQmx_Val_OverwriteUnreadSamps =  int32(10252);
       DAQmx_Val_DoNotOverwriteUnreadSamps =  int32(10159);
       DAQmx_Val_ActiveHigh =  int32(10095);
       DAQmx_Val_ActiveLow =  int32(10096);
       DAQmx_Val_MSeriesDAQ =  int32(14643);
       DAQmx_Val_XSeriesDAQ =  int32(15858);
       DAQmx_Val_ESeriesDAQ =  int32(14642);
       DAQmx_Val_SSeriesDAQ =  int32(14644);
       DAQmx_Val_BSeriesDAQ =  int32(14662);
       DAQmx_Val_SCSeriesDAQ =  int32(14645);
       DAQmx_Val_USBDAQ =  int32(14646);
       DAQmx_Val_AOSeries =  int32(14647);
       DAQmx_Val_DigitalIO =  int32(14648);
       DAQmx_Val_TIOSeries =  int32(14661);
       DAQmx_Val_DynamicSignalAcquisition =  int32(14649);
       DAQmx_Val_Switches =  int32(14650);
       DAQmx_Val_CompactDAQChassis =  int32(14658);
       DAQmx_Val_CSeriesModule =  int32(14659);
       DAQmx_Val_SCXIModule =  int32(14660);
       DAQmx_Val_SCCConnectorBlock =  int32(14704);
       DAQmx_Val_SCCModule =  int32(14705);
       DAQmx_Val_NIELVIS =  int32(14755);
       DAQmx_Val_NetworkDAQ =  int32(14829);
       DAQmx_Val_SCExpress =  int32(15886);
       DAQmx_Val_Pt3750 =  int32(12481);
       DAQmx_Val_Pt3851 =  int32(10071);
       DAQmx_Val_Pt3911 =  int32(12482);
       DAQmx_Val_Pt3916 =  int32(10069);
       DAQmx_Val_Pt3920 =  int32(10053);
       DAQmx_Val_Pt3928 =  int32(12483);
       DAQmx_Val_mVoltsPerVoltPerDegree =  int32(12507);
       DAQmx_Val_mVoltsPerVoltPerRadian =  int32(12508);
       DAQmx_Val_LosslessPacking =  int32(12555);
       DAQmx_Val_LossyLSBRemoval =  int32(12556);
       DAQmx_Val_FirstSample =  int32(10424);
       DAQmx_Val_CurrReadPos =  int32(10425);
       DAQmx_Val_RefTrig =  int32(10426);
       DAQmx_Val_FirstPretrigSamp =  int32(10427);
       DAQmx_Val_MostRecentSamp =  int32(10428);
       DAQmx_Val_AllowRegen =  int32(10097);
       DAQmx_Val_DoNotAllowRegen =  int32(10158);
       DAQmx_Val_2Wire =  int32(2);
       DAQmx_Val_3Wire =  int32(3);
       DAQmx_Val_Ohms =  int32(10384);
       DAQmx_Val_Bits =  int32(10109);
       DAQmx_Val_SCXI1124Range0to1V =  int32(14629);
       DAQmx_Val_SCXI1124Range0to5V =  int32(14630);
       DAQmx_Val_SCXI1124Range0to10V =  int32(14631);
       DAQmx_Val_SCXI1124RangeNeg1to1V =  int32(14632);
       DAQmx_Val_SCXI1124RangeNeg5to5V =  int32(14633);
       DAQmx_Val_SCXI1124RangeNeg10to10V =  int32(14634);
       DAQmx_Val_SCXI1124Range0to20mA =  int32(14635);
       DAQmx_Val_SampClkActiveEdge =  int32(14617);
       DAQmx_Val_SampClkInactiveEdge =  int32(14618);
       DAQmx_Val_HandshakeTriggerAsserts =  int32(12552);
       DAQmx_Val_HandshakeTriggerDeasserts =  int32(12553);
       DAQmx_Val_SampClk =  int32(10388);
       DAQmx_Val_BurstHandshake =  int32(12548);
       DAQmx_Val_Handshake =  int32(10389);
       DAQmx_Val_Implicit =  int32(10451);
       DAQmx_Val_OnDemand =  int32(10390);
       DAQmx_Val_ChangeDetection =  int32(12504);
       DAQmx_Val_PipelinedSampClk =  int32(14668);
       DAQmx_Val_Linear =  int32(10447);
       DAQmx_Val_MapRanges =  int32(10448);
       DAQmx_Val_Polynomial =  int32(10449);
       DAQmx_Val_Table =  int32(10450);
       DAQmx_Val_TwoPointLinear =  int32(15898);
       DAQmx_Val_A =  int32(12513);
       DAQmx_Val_B =  int32(12514);
       DAQmx_Val_AandB =  int32(12515);
       DAQmx_Val_R1 =  int32(12465);
       DAQmx_Val_R2 =  int32(12466);
       DAQmx_Val_R3 =  int32(12467);
       DAQmx_Val_R4 =  int32(14813);
       DAQmx_Val_AIConvertClock =  int32(12484);
       DAQmx_Val_10MHzRefClock =  int32(12536);
       DAQmx_Val_20MHzTimebaseClock =  int32(12486);
       DAQmx_Val_SampleClock =  int32(12487);
       DAQmx_Val_ReferenceTrigger =  int32(12490);
       DAQmx_Val_StartTrigger =  int32(12491);
       DAQmx_Val_AdvCmpltEvent =  int32(12492);
       DAQmx_Val_AIHoldCmpltEvent =  int32(12493);
       DAQmx_Val_CounterOutputEvent =  int32(12494);
       DAQmx_Val_ChangeDetectionEvent =  int32(12511);
       DAQmx_Val_WDTExpiredEvent =  int32(12512);
       DAQmx_Val_SampleCompleteEvent =  int32(12530);
       DAQmx_Val_RisingSlope =  int32(10280);
       DAQmx_Val_FallingSlope =  int32(10171);
       DAQmx_Val_FullBridgeI =  int32(10183);
       DAQmx_Val_FullBridgeII =  int32(10184);
       DAQmx_Val_FullBridgeIII =  int32(10185);
       DAQmx_Val_HalfBridgeI =  int32(10188);
       DAQmx_Val_HalfBridgeII =  int32(10189);
       DAQmx_Val_QuarterBridgeI =  int32(10271);
       DAQmx_Val_QuarterBridgeII =  int32(10272);
       DAQmx_Val_Strain =  int32(10299);
       DAQmx_Val_Finite =  int32(10172);
       DAQmx_Val_Cont =  int32(10117);
       DAQmx_Val_Source =  int32(10439);
       DAQmx_Val_Load =  int32(10440);
       DAQmx_Val_ReservedForRouting =  int32(10441);
       DAQmx_Val_Master =  int32(15888);
       DAQmx_Val_Slave =  int32(15889);
       DAQmx_Val_J_Type_TC =  int32(10072);
       DAQmx_Val_K_Type_TC =  int32(10073);
       DAQmx_Val_N_Type_TC =  int32(10077);
       DAQmx_Val_R_Type_TC =  int32(10082);
       DAQmx_Val_S_Type_TC =  int32(10085);
       DAQmx_Val_T_Type_TC =  int32(10086);
       DAQmx_Val_B_Type_TC =  int32(10047);
       DAQmx_Val_E_Type_TC =  int32(10055);
       DAQmx_Val_SingleCycle =  int32(14613);
       DAQmx_Val_Multicycle =  int32(14614);
       DAQmx_Val_DigEdge =  int32(10150);
       DAQmx_Val_Software =  int32(10292);
       DAQmx_Val_AnlgLvl =  int32(10101);
       DAQmx_Val_AnlgWin =  int32(10103);
       DAQmx_Val_DigLvl =  int32(10152);
       DAQmx_Val_DigPattern =  int32(10398);
       DAQmx_Val_AnlgEdge =  int32(10099);
       DAQmx_Val_HaltOutputAndError =  int32(14615);
       DAQmx_Val_PauseUntilDataAvailable =  int32(14616);
       DAQmx_Val_Volts =  int32(10348);
       DAQmx_Val_g =  int32(10186);
       DAQmx_Val_WaitForInterrupt =  int32(12523);
       DAQmx_Val_Poll =  int32(12524);
       DAQmx_Val_Yield =  int32(12525);
       DAQmx_Val_Sleep =  int32(12547);
       DAQmx_Val_EnteringWin =  int32(10163);
       DAQmx_Val_LeavingWin =  int32(10208);
       DAQmx_Val_InsideWin =  int32(10199);
       DAQmx_Val_OutsideWin =  int32(10251);
       DAQmx_Val_WriteToEEPROM =  int32(12538);
       DAQmx_Val_WriteToPROM =  int32(12539);
       DAQmx_Val_DoNotWrite =  int32(12540);
       DAQmx_Val_CurrWritePos =  int32(10430);
       DAQmx_Val_Switch_Topology_1127_1_Wire_64x1_Mux =  '1127/1-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_1127_2_Wire_32x1_Mux =  '1127/2-Wire 32x1 Mux';
       DAQmx_Val_Switch_Topology_1127_2_Wire_4x8_Matrix =  '1127/2-Wire 4x8 Matrix';
       DAQmx_Val_Switch_Topology_1127_4_Wire_16x1_Mux =  '1127/4-Wire 16x1 Mux';
       DAQmx_Val_Switch_Topology_1127_Independent =  '1127/Independent';
       DAQmx_Val_Switch_Topology_1128_1_Wire_64x1_Mux =  '1128/1-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_1128_2_Wire_32x1_Mux =  '1128/2-Wire 32x1 Mux';
       DAQmx_Val_Switch_Topology_1128_2_Wire_4x8_Matrix =  '1128/2-Wire 4x8 Matrix';
       DAQmx_Val_Switch_Topology_1128_4_Wire_16x1_Mux =  '1128/4-Wire 16x1 Mux';
       DAQmx_Val_Switch_Topology_1128_Independent =  '1128/Independent';
       DAQmx_Val_Switch_Topology_1129_2_Wire_16x16_Matrix =  '1129/2-Wire 16x16 Matrix';
       DAQmx_Val_Switch_Topology_1129_2_Wire_8x32_Matrix =  '1129/2-Wire 8x32 Matrix';
       DAQmx_Val_Switch_Topology_1129_2_Wire_4x64_Matrix =  '1129/2-Wire 4x64 Matrix';
       DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_8x16_Matrix =  '1129/2-Wire Dual 8x16 Matrix';
       DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_4x32_Matrix =  '1129/2-Wire Dual 4x32 Matrix';
       DAQmx_Val_Switch_Topology_1129_2_Wire_Quad_4x16_Matrix =  '1129/2-Wire Quad 4x16 Matrix';
       DAQmx_Val_Switch_Topology_1130_1_Wire_256x1_Mux =  '1130/1-Wire 256x1 Mux';
       DAQmx_Val_Switch_Topology_1130_1_Wire_Dual_128x1_Mux =  '1130/1-Wire Dual 128x1 Mux';
       DAQmx_Val_Switch_Topology_1130_2_Wire_128x1_Mux =  '1130/2-Wire 128x1 Mux';
       DAQmx_Val_Switch_Topology_1130_4_Wire_64x1_Mux =  '1130/4-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_1130_1_Wire_4x64_Matrix =  '1130/1-Wire 4x64 Matrix';
       DAQmx_Val_Switch_Topology_1130_1_Wire_8x32_Matrix =  '1130/1-Wire 8x32 Matrix';
       DAQmx_Val_Switch_Topology_1130_1_Wire_Octal_32x1_Mux =  '1130/1-Wire Octal 32x1 Mux';
       DAQmx_Val_Switch_Topology_1130_1_Wire_Quad_64x1_Mux =  '1130/1-Wire Quad 64x1 Mux';
       DAQmx_Val_Switch_Topology_1130_1_Wire_Sixteen_16x1_Mux =  '1130/1-Wire Sixteen 16x1 Mux';
       DAQmx_Val_Switch_Topology_1130_2_Wire_4x32_Matrix =  '1130/2-Wire 4x32 Matrix';
       DAQmx_Val_Switch_Topology_1130_2_Wire_Octal_16x1_Mux =  '1130/2-Wire Octal 16x1 Mux';
       DAQmx_Val_Switch_Topology_1130_2_Wire_Quad_32x1_Mux =  '1130/2-Wire Quad 32x1 Mux';
       DAQmx_Val_Switch_Topology_1130_4_Wire_Quad_16x1_Mux =  '1130/4-Wire Quad 16x1 Mux';
       DAQmx_Val_Switch_Topology_1130_Independent =  '1130/Independent';
       DAQmx_Val_Switch_Topology_1160_16_SPDT =  '1160/16-SPDT';
       DAQmx_Val_Switch_Topology_1161_8_SPDT =  '1161/8-SPDT';
       DAQmx_Val_Switch_Topology_1163R_Octal_4x1_Mux =  '1163R/Octal 4x1 Mux';
       DAQmx_Val_Switch_Topology_1166_32_SPDT =  '1166/32-SPDT';
       DAQmx_Val_Switch_Topology_1166_16_DPDT =  '1166/16-DPDT';
       DAQmx_Val_Switch_Topology_1167_Independent =  '1167/Independent';
       DAQmx_Val_Switch_Topology_1169_100_SPST =  '1169/100-SPST';
       DAQmx_Val_Switch_Topology_1169_50_DPST =  '1169/50-DPST';
       DAQmx_Val_Switch_Topology_1175_1_Wire_196x1_Mux =  '1175/1-Wire 196x1 Mux';
       DAQmx_Val_Switch_Topology_1175_2_Wire_98x1_Mux =  '1175/2-Wire 98x1 Mux';
       DAQmx_Val_Switch_Topology_1175_2_Wire_95x1_Mux =  '1175/2-Wire 95x1 Mux';
       DAQmx_Val_Switch_Topology_1190_Quad_4x1_Mux =  '1190/Quad 4x1 Mux';
       DAQmx_Val_Switch_Topology_1191_Quad_4x1_Mux =  '1191/Quad 4x1 Mux';
       DAQmx_Val_Switch_Topology_1192_8_SPDT =  '1192/8-SPDT';
       DAQmx_Val_Switch_Topology_1193_32x1_Mux =  '1193/32x1 Mux';
       DAQmx_Val_Switch_Topology_1193_Dual_16x1_Mux =  '1193/Dual 16x1 Mux';
       DAQmx_Val_Switch_Topology_1193_Quad_8x1_Mux =  '1193/Quad 8x1 Mux';
       DAQmx_Val_Switch_Topology_1193_16x1_Terminated_Mux =  '1193/16x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_1193_Dual_8x1_Terminated_Mux =  '1193/Dual 8x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_1193_Quad_4x1_Terminated_Mux =  '1193/Quad 4x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_1193_Independent =  '1193/Independent';
       DAQmx_Val_Switch_Topology_1194_Quad_4x1_Mux =  '1194/Quad 4x1 Mux';
       DAQmx_Val_Switch_Topology_1195_Quad_4x1_Mux =  '1195/Quad 4x1 Mux';
       DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Mux =  '2501/1-Wire 48x1 Mux';
       DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Amplified_Mux =  '2501/1-Wire 48x1 Amplified Mux';
       DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Mux =  '2501/2-Wire 24x1 Mux';
       DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Amplified_Mux =  '2501/2-Wire 24x1 Amplified Mux';
       DAQmx_Val_Switch_Topology_2501_2_Wire_Dual_12x1_Mux =  '2501/2-Wire Dual 12x1 Mux';
       DAQmx_Val_Switch_Topology_2501_2_Wire_Quad_6x1_Mux =  '2501/2-Wire Quad 6x1 Mux';
       DAQmx_Val_Switch_Topology_2501_2_Wire_4x6_Matrix =  '2501/2-Wire 4x6 Matrix';
       DAQmx_Val_Switch_Topology_2501_4_Wire_12x1_Mux =  '2501/4-Wire 12x1 Mux';
       DAQmx_Val_Switch_Topology_2503_1_Wire_48x1_Mux =  '2503/1-Wire 48x1 Mux';
       DAQmx_Val_Switch_Topology_2503_2_Wire_24x1_Mux =  '2503/2-Wire 24x1 Mux';
       DAQmx_Val_Switch_Topology_2503_2_Wire_Dual_12x1_Mux =  '2503/2-Wire Dual 12x1 Mux';
       DAQmx_Val_Switch_Topology_2503_2_Wire_Quad_6x1_Mux =  '2503/2-Wire Quad 6x1 Mux';
       DAQmx_Val_Switch_Topology_2503_2_Wire_4x6_Matrix =  '2503/2-Wire 4x6 Matrix';
       DAQmx_Val_Switch_Topology_2503_4_Wire_12x1_Mux =  '2503/4-Wire 12x1 Mux';
       DAQmx_Val_Switch_Topology_2510_Independent =  '2510/Independent';
       DAQmx_Val_Switch_Topology_2512_Independent =  '2512/Independent';
       DAQmx_Val_Switch_Topology_2514_Independent =  '2514/Independent';
       DAQmx_Val_Switch_Topology_2515_Independent =  '2515/Independent';
       DAQmx_Val_Switch_Topology_2527_1_Wire_64x1_Mux =  '2527/1-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_2527_1_Wire_Dual_32x1_Mux =  '2527/1-Wire Dual 32x1 Mux';
       DAQmx_Val_Switch_Topology_2527_2_Wire_32x1_Mux =  '2527/2-Wire 32x1 Mux';
       DAQmx_Val_Switch_Topology_2527_2_Wire_Dual_16x1_Mux =  '2527/2-Wire Dual 16x1 Mux';
       DAQmx_Val_Switch_Topology_2527_4_Wire_16x1_Mux =  '2527/4-Wire 16x1 Mux';
       DAQmx_Val_Switch_Topology_2527_Independent =  '2527/Independent';
       DAQmx_Val_Switch_Topology_2529_2_Wire_8x16_Matrix =  '2529/2-Wire 8x16 Matrix';
       DAQmx_Val_Switch_Topology_2529_2_Wire_4x32_Matrix =  '2529/2-Wire 4x32 Matrix';
       DAQmx_Val_Switch_Topology_2529_2_Wire_Dual_4x16_Matrix =  '2529/2-Wire Dual 4x16 Matrix';
       DAQmx_Val_Switch_Topology_2530_1_Wire_128x1_Mux =  '2530/1-Wire 128x1 Mux';
       DAQmx_Val_Switch_Topology_2530_1_Wire_Dual_64x1_Mux =  '2530/1-Wire Dual 64x1 Mux';
       DAQmx_Val_Switch_Topology_2530_2_Wire_64x1_Mux =  '2530/2-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_2530_4_Wire_32x1_Mux =  '2530/4-Wire 32x1 Mux';
       DAQmx_Val_Switch_Topology_2530_1_Wire_4x32_Matrix =  '2530/1-Wire 4x32 Matrix';
       DAQmx_Val_Switch_Topology_2530_1_Wire_8x16_Matrix =  '2530/1-Wire 8x16 Matrix';
       DAQmx_Val_Switch_Topology_2530_1_Wire_Octal_16x1_Mux =  '2530/1-Wire Octal 16x1 Mux';
       DAQmx_Val_Switch_Topology_2530_1_Wire_Quad_32x1_Mux =  '2530/1-Wire Quad 32x1 Mux';
       DAQmx_Val_Switch_Topology_2530_2_Wire_4x16_Matrix =  '2530/2-Wire 4x16 Matrix';
       DAQmx_Val_Switch_Topology_2530_2_Wire_Dual_32x1_Mux =  '2530/2-Wire Dual 32x1 Mux';
       DAQmx_Val_Switch_Topology_2530_2_Wire_Quad_16x1_Mux =  '2530/2-Wire Quad 16x1 Mux';
       DAQmx_Val_Switch_Topology_2530_4_Wire_Dual_16x1_Mux =  '2530/4-Wire Dual 16x1 Mux';
       DAQmx_Val_Switch_Topology_2530_Independent =  '2530/Independent';
       DAQmx_Val_Switch_Topology_2531_1_Wire_4x128_Matrix =  '2531/1-Wire 4x128 Matrix';
       DAQmx_Val_Switch_Topology_2531_1_Wire_8x64_Matrix =  '2531/1-Wire 8x64 Matrix';
       DAQmx_Val_Switch_Topology_2531_1_Wire_Dual_4x64_Matrix =  '2531/1-Wire Dual 4x64 Matrix';
       DAQmx_Val_Switch_Topology_2531_1_Wire_Dual_8x32_Matrix =  '2531/1-Wire Dual 8x32 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_16x32_Matrix =  '2532/1-Wire 16x32 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_4x128_Matrix =  '2532/1-Wire 4x128 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_8x64_Matrix =  '2532/1-Wire 8x64 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_16x16_Matrix =  '2532/1-Wire Dual 16x16 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_4x64_Matrix =  '2532/1-Wire Dual 4x64 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_8x32_Matrix =  '2532/1-Wire Dual 8x32 Matrix';
       DAQmx_Val_Switch_Topology_2532_1_Wire_Sixteen_2x16_Matrix =  '2532/1-Wire Sixteen 2x16 Matrix';
       DAQmx_Val_Switch_Topology_2532_2_Wire_16x16_Matrix =  '2532/2-Wire 16x16 Matrix';
       DAQmx_Val_Switch_Topology_2532_2_Wire_4x64_Matrix =  '2532/2-Wire 4x64 Matrix';
       DAQmx_Val_Switch_Topology_2532_2_Wire_8x32_Matrix =  '2532/2-Wire 8x32 Matrix';
       DAQmx_Val_Switch_Topology_2533_1_Wire_4x64_Matrix =  '2533/1-Wire 4x64 Matrix';
       DAQmx_Val_Switch_Topology_2534_1_Wire_8x32_Matrix =  '2534/1-Wire 8x32 Matrix';
       DAQmx_Val_Switch_Topology_2535_1_Wire_4x136_Matrix =  '2535/1-Wire 4x136 Matrix';
       DAQmx_Val_Switch_Topology_2536_1_Wire_8x68_Matrix =  '2536/1-Wire 8x68 Matrix';
       DAQmx_Val_Switch_Topology_2545_4x1_Terminated_Mux =  '2545/4x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_2546_Dual_4x1_Mux =  '2546/Dual 4x1 Mux';
       DAQmx_Val_Switch_Topology_2547_8x1_Mux =  '2547/8x1 Mux';
       DAQmx_Val_Switch_Topology_2548_4_SPDT =  '2548/4-SPDT';
       DAQmx_Val_Switch_Topology_2549_Terminated_2_SPDT =  '2549/Terminated 2-SPDT';
       DAQmx_Val_Switch_Topology_2554_4x1_Mux =  '2554/4x1 Mux';
       DAQmx_Val_Switch_Topology_2555_4x1_Terminated_Mux =  '2555/4x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_2556_Dual_4x1_Mux =  '2556/Dual 4x1 Mux';
       DAQmx_Val_Switch_Topology_2557_8x1_Mux =  '2557/8x1 Mux';
       DAQmx_Val_Switch_Topology_2558_4_SPDT =  '2558/4-SPDT';
       DAQmx_Val_Switch_Topology_2559_Terminated_2_SPDT =  '2559/Terminated 2-SPDT';
       DAQmx_Val_Switch_Topology_2564_16_SPST =  '2564/16-SPST';
       DAQmx_Val_Switch_Topology_2564_8_DPST =  '2564/8-DPST';
       DAQmx_Val_Switch_Topology_2565_16_SPST =  '2565/16-SPST';
       DAQmx_Val_Switch_Topology_2566_16_SPDT =  '2566/16-SPDT';
       DAQmx_Val_Switch_Topology_2566_8_DPDT =  '2566/8-DPDT';
       DAQmx_Val_Switch_Topology_2567_Independent =  '2567/Independent';
       DAQmx_Val_Switch_Topology_2568_31_SPST =  '2568/31-SPST';
       DAQmx_Val_Switch_Topology_2568_15_DPST =  '2568/15-DPST';
       DAQmx_Val_Switch_Topology_2569_100_SPST =  '2569/100-SPST';
       DAQmx_Val_Switch_Topology_2569_50_DPST =  '2569/50-DPST';
       DAQmx_Val_Switch_Topology_2570_40_SPDT =  '2570/40-SPDT';
       DAQmx_Val_Switch_Topology_2570_20_DPDT =  '2570/20-DPDT';
       DAQmx_Val_Switch_Topology_2575_1_Wire_196x1_Mux =  '2575/1-Wire 196x1 Mux';
       DAQmx_Val_Switch_Topology_2575_2_Wire_98x1_Mux =  '2575/2-Wire 98x1 Mux';
       DAQmx_Val_Switch_Topology_2575_2_Wire_95x1_Mux =  '2575/2-Wire 95x1 Mux';
       DAQmx_Val_Switch_Topology_2576_2_Wire_64x1_Mux =  '2576/2-Wire 64x1 Mux';
       DAQmx_Val_Switch_Topology_2576_2_Wire_Dual_32x1_Mux =  '2576/2-Wire Dual 32x1 Mux';
       DAQmx_Val_Switch_Topology_2576_2_Wire_Octal_8x1_Mux =  '2576/2-Wire Octal 8x1 Mux';
       DAQmx_Val_Switch_Topology_2576_2_Wire_Quad_16x1_Mux =  '2576/2-Wire Quad 16x1 Mux';
       DAQmx_Val_Switch_Topology_2576_2_Wire_Sixteen_4x1_Mux =  '2576/2-Wire Sixteen 4x1 Mux';
       DAQmx_Val_Switch_Topology_2576_Independent =  '2576/Independent';
       DAQmx_Val_Switch_Topology_2584_1_Wire_12x1_Mux =  '2584/1-Wire 12x1 Mux';
       DAQmx_Val_Switch_Topology_2584_1_Wire_Dual_6x1_Mux =  '2584/1-Wire Dual 6x1 Mux';
       DAQmx_Val_Switch_Topology_2584_2_Wire_6x1_Mux =  '2584/2-Wire 6x1 Mux';
       DAQmx_Val_Switch_Topology_2584_Independent =  '2584/Independent';
       DAQmx_Val_Switch_Topology_2585_1_Wire_10x1_Mux =  '2585/1-Wire 10x1 Mux';
       DAQmx_Val_Switch_Topology_2586_10_SPST =  '2586/10-SPST';
       DAQmx_Val_Switch_Topology_2586_5_DPST =  '2586/5-DPST';
       DAQmx_Val_Switch_Topology_2590_4x1_Mux =  '2590/4x1 Mux';
       DAQmx_Val_Switch_Topology_2591_4x1_Mux =  '2591/4x1 Mux';
       DAQmx_Val_Switch_Topology_2593_16x1_Mux =  '2593/16x1 Mux';
       DAQmx_Val_Switch_Topology_2593_Dual_8x1_Mux =  '2593/Dual 8x1 Mux';
       DAQmx_Val_Switch_Topology_2593_8x1_Terminated_Mux =  '2593/8x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_2593_Dual_4x1_Terminated_Mux =  '2593/Dual 4x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_2593_Independent =  '2593/Independent';
       DAQmx_Val_Switch_Topology_2594_4x1_Mux =  '2594/4x1 Mux';
       DAQmx_Val_Switch_Topology_2595_4x1_Mux =  '2595/4x1 Mux';
       DAQmx_Val_Switch_Topology_2596_Dual_6x1_Mux =  '2596/Dual 6x1 Mux';
       DAQmx_Val_Switch_Topology_2597_6x1_Terminated_Mux =  '2597/6x1 Terminated Mux';
       DAQmx_Val_Switch_Topology_2598_Dual_Transfer =  '2598/Dual Transfer';
       DAQmx_Val_Switch_Topology_2599_2_SPDT =  '2599/2-SPDT';
       DAQmxSuccess =  int32(0);
       DAQmxErrorCOCannotKeepUpInHWTimedSinglePoint =  int32(-209805);
       DAQmxErrorWaitForNextSampClkDetected3OrMoreSampClks =  int32(-209803);
       DAQmxErrorWaitForNextSampClkDetectedMissedSampClk =  int32(-209802);
       DAQmxErrorWriteNotCompleteBeforeSampClk =  int32(-209801);
       DAQmxErrorReadNotCompleteBeforeSampClk =  int32(-209800);
       DAQmxErrorBadDDSSource =  int32(-201366);
       DAQmxErrorOnboardRegenWithMoreThan16Channels =  int32(-201365);
       DAQmxErrorTriggerTooFast =  int32(-201364);
       DAQmxErrorMinMaxOutsideTableRange =  int32(-201363);
       DAQmxErrorChannelExpansionWithInvalidAnalogTriggerDevice =  int32(-201362);
       DAQmxErrorSyncPulseSrcInvalidForTask =  int32(-201361);
       DAQmxErrorInvalidCarrierSlotNumberSpecd =  int32(-201360);
       DAQmxErrorCardsMustBeInSameCarrier =  int32(-201359);
       DAQmxErrorCardDevCarrierSimMustMatch =  int32(-201358);
       DAQmxErrorDevMustHaveAtLeastOneCard =  int32(-201357);
       DAQmxErrorCardTopologyError =  int32(-201356);
       DAQmxErrorExceededCarrierPowerBudget =  int32(-201355);
       DAQmxErrorCardsIncompatible =  int32(-201354);
       DAQmxErrorAnalogBusNotValid =  int32(-201353);
       DAQmxErrorReservationConflict =  int32(-201352);
       DAQmxErrorMemMappedOnDemandNotSupported =  int32(-201351);
       DAQmxErrorChannelExpansionWithDifferentTriggerDevices =  int32(-201349);
       DAQmxErrorCounterSyncAndRetriggered =  int32(-201348);
       DAQmxErrorNoExternalSyncPulseDetected =  int32(-201347);
       DAQmxErrorSlaveAndNoExternalSyncPulse =  int32(-201346);
       DAQmxErrorCustomTimingRequiredForAttribute =  int32(-201345);
       DAQmxErrorCustomTimingModeNotSet =  int32(-201344);
       DAQmxErrorAccessoryPowerTripped =  int32(-201343);
       DAQmxErrorUnsupportedAccessory =  int32(-201342);
       DAQmxErrorInvalidAccessoryChange =  int32(-201341);
       DAQmxErrorFirmwareRequiresUpgrade =  int32(-201340);
       DAQmxErrorFastExternalTimebaseNotSupportedForDevice =  int32(-201339);
       DAQmxErrorInvalidShuntLocationForCalibration =  int32(-201338);
       DAQmxErrorDeviceNameTooLong =  int32(-201337);
       DAQmxErrorBridgeScalesUnsupported =  int32(-201336);
       DAQmxErrorMismatchedElecPhysValues =  int32(-201335);
       DAQmxErrorLinearRequiresUniquePoints =  int32(-201334);
       DAQmxErrorMissingRequiredScalingParameter =  int32(-201333);
       DAQmxErrorLoggingNotSupportOnOutputTasks =  int32(-201332);
       DAQmxErrorMemoryMappedHardwareTimedNonBufferedUnsupported =  int32(-201331);
       DAQmxErrorCannotUpdatePulseTrainWithAutoIncrementEnabled =  int32(-201330);
       DAQmxErrorHWTimedSinglePointAndDataXferNotDMA =  int32(-201329);
       DAQmxErrorSCCSecondStageEmpty =  int32(-201328);
       DAQmxErrorSCCInvalidDualStageCombo =  int32(-201327);
       DAQmxErrorSCCInvalidSecondStage =  int32(-201326);
       DAQmxErrorSCCInvalidFirstStage =  int32(-201325);
       DAQmxErrorCounterMultipleSampleClockedChannels =  int32(-201324);
       DAQmxError2CounterMeasurementModeAndSampleClocked =  int32(-201323);
       DAQmxErrorCantHaveBothMemMappedAndNonMemMappedTasks =  int32(-201322);
       DAQmxErrorMemMappedDataReadByAnotherProcess =  int32(-201321);
       DAQmxErrorRetriggeringInvalidForGivenSettings =  int32(-201320);
       DAQmxErrorAIOverrun =  int32(-201319);
       DAQmxErrorCOOverrun =  int32(-201318);
       DAQmxErrorCounterMultipleBufferedChannels =  int32(-201317);
       DAQmxErrorInvalidTimebaseForCOHWTSP =  int32(-201316);
       DAQmxErrorWriteBeforeEvent =  int32(-201315);
       DAQmxErrorCIOverrun =  int32(-201314);
       DAQmxErrorCounterNonResponsiveAndReset =  int32(-201313);
       DAQmxErrorMeasTypeOrChannelNotSupportedForLogging =  int32(-201312);
       DAQmxErrorFileAlreadyOpenedForWrite =  int32(-201311);
       DAQmxErrorTdmsNotFound =  int32(-201310);
       DAQmxErrorGenericFileIO =  int32(-201309);
       DAQmxErrorFiniteSTCCounterNotSupportedForLogging =  int32(-201308);
       DAQmxErrorMeasurementTypeNotSupportedForLogging =  int32(-201307);
       DAQmxErrorFileAlreadyOpened =  int32(-201306);
       DAQmxErrorDiskFull =  int32(-201305);
       DAQmxErrorFilePathInvalid =  int32(-201304);
       DAQmxErrorFileVersionMismatch =  int32(-201303);
       DAQmxErrorFileWriteProtected =  int32(-201302);
       DAQmxErrorReadNotSupportedForLoggingMode =  int32(-201301);
       DAQmxErrorAttributeNotSupportedWhenLogging =  int32(-201300);
       DAQmxErrorLoggingModeNotSupportedNonBuffered =  int32(-201299);
       DAQmxErrorPropertyNotSupportedWithConflictingProperty =  int32(-201298);
       DAQmxErrorParallelSSHOnConnector1 =  int32(-201297);
       DAQmxErrorCOOnlyImplicitSampleTimingTypeSupported =  int32(-201296);
       DAQmxErrorCalibrationFailedAOOutOfRange =  int32(-201295);
       DAQmxErrorCalibrationFailedAIOutOfRange =  int32(-201294);
       DAQmxErrorCalPWMLinearityFailed =  int32(-201293);
       DAQmxErrorOverrunUnderflowConfigurationCombo =  int32(-201292);
       DAQmxErrorCannotWriteToFiniteCOTask =  int32(-201291);
       DAQmxErrorNetworkDAQInvalidWEPKeyLength =  int32(-201290);
       DAQmxErrorCalInputsShortedNotSupported =  int32(-201289);
       DAQmxErrorCannotSetPropertyWhenTaskIsReserved =  int32(-201288);
       DAQmxErrorMinus12VFuseBlown =  int32(-201287);
       DAQmxErrorPlus12VFuseBlown =  int32(-201286);
       DAQmxErrorPlus5VFuseBlown =  int32(-201285);
       DAQmxErrorPlus3VFuseBlown =  int32(-201284);
       DAQmxErrorDeviceSerialPortError =  int32(-201283);
       DAQmxErrorPowerUpStateMachineNotDone =  int32(-201282);
       DAQmxErrorTooManyTriggersSpecifiedInTask =  int32(-201281);
       DAQmxErrorVerticalOffsetNotSupportedOnDevice =  int32(-201280);
       DAQmxErrorInvalidCouplingForMeasurementType =  int32(-201279);
       DAQmxErrorDigitalLineUpdateTooFastForDevice =  int32(-201278);
       DAQmxErrorCertificateIsTooBigToTransfer =  int32(-201277);
       DAQmxErrorOnlyPEMOrDERCertiticatesAccepted =  int32(-201276);
       DAQmxErrorCalCouplingNotSupported =  int32(-201275);
       DAQmxErrorDeviceNotSupportedIn64Bit =  int32(-201274);
       DAQmxErrorNetworkDeviceInUse =  int32(-201273);
       DAQmxErrorInvalidIPv4AddressFormat =  int32(-201272);
       DAQmxErrorNetworkProductTypeMismatch =  int32(-201271);
       DAQmxErrorOnlyPEMCertificatesAccepted =  int32(-201270);
       DAQmxErrorCalibrationRequiresPrototypingBoardEnabled =  int32(-201269);
       DAQmxErrorAllCurrentLimitingResourcesAlreadyTaken =  int32(-201268);
       DAQmxErrorUserDefInfoStringBadLength =  int32(-201267);
       DAQmxErrorPropertyNotFound =  int32(-201266);
       DAQmxErrorOverVoltageProtectionActivated =  int32(-201265);
       DAQmxErrorScaledIQWaveformTooLarge =  int32(-201264);
       DAQmxErrorFirmwareFailedToDownload =  int32(-201263);
       DAQmxErrorPropertyNotSupportedForBusType =  int32(-201262);
       DAQmxErrorChangeRateWhileRunningCouldNotBeCompleted =  int32(-201261);
       DAQmxErrorCannotQueryManualControlAttribute =  int32(-201260);
       DAQmxErrorInvalidNetworkConfiguration =  int32(-201259);
       DAQmxErrorInvalidWirelessConfiguration =  int32(-201258);
       DAQmxErrorInvalidWirelessCountryCode =  int32(-201257);
       DAQmxErrorInvalidWirelessChannel =  int32(-201256);
       DAQmxErrorNetworkEEPROMHasChanged =  int32(-201255);
       DAQmxErrorNetworkSerialNumberMismatch =  int32(-201254);
       DAQmxErrorNetworkStatusDown =  int32(-201253);
       DAQmxErrorNetworkTargetUnreachable =  int32(-201252);
       DAQmxErrorNetworkTargetNotFound =  int32(-201251);
       DAQmxErrorNetworkStatusTimedOut =  int32(-201250);
       DAQmxErrorInvalidWirelessSecuritySelection =  int32(-201249);
       DAQmxErrorNetworkDeviceConfigurationLocked =  int32(-201248);
       DAQmxErrorNetworkDAQDeviceNotSupported =  int32(-201247);
       DAQmxErrorNetworkDAQCannotCreateEmptySleeve =  int32(-201246);
       DAQmxErrorModuleTypeDoesNotMatchModuleTypeInDestination =  int32(-201244);
       DAQmxErrorInvalidTEDSInterfaceAddress =  int32(-201243);
       DAQmxErrorDevDoesNotSupportSCXIComm =  int32(-201242);
       DAQmxErrorSCXICommDevConnector0MustBeCabledToModule =  int32(-201241);
       DAQmxErrorSCXIModuleDoesNotSupportDigitizationMode =  int32(-201240);
       DAQmxErrorDevDoesNotSupportMultiplexedSCXIDigitizationMode =  int32(-201239);
       DAQmxErrorDevOrDevPhysChanDoesNotSupportSCXIDigitization =  int32(-201238);
       DAQmxErrorInvalidPhysChanName =  int32(-201237);
       DAQmxErrorSCXIChassisCommModeInvalid =  int32(-201236);
       DAQmxErrorRequiredDependencyNotFound =  int32(-201235);
       DAQmxErrorInvalidStorage =  int32(-201234);
       DAQmxErrorInvalidObject =  int32(-201233);
       DAQmxErrorStorageAlteredPriorToSave =  int32(-201232);
       DAQmxErrorTaskDoesNotReferenceLocalChannel =  int32(-201231);
       DAQmxErrorReferencedDevSimMustMatchTarget =  int32(-201230);
       DAQmxErrorProgrammedIOFailsBecauseOfWatchdogTimer =  int32(-201229);
       DAQmxErrorWatchdogTimerFailsBecauseOfProgrammedIO =  int32(-201228);
       DAQmxErrorCantUseThisTimingEngineWithAPort =  int32(-201227);
       DAQmxErrorProgrammedIOConflict =  int32(-201226);
       DAQmxErrorChangeDetectionIncompatibleWithProgrammedIO =  int32(-201225);
       DAQmxErrorTristateNotEnoughLines =  int32(-201224);
       DAQmxErrorTristateConflict =  int32(-201223);
       DAQmxErrorGenerateOrFiniteWaitExpectedBeforeBreakBlock =  int32(-201222);
       DAQmxErrorBreakBlockNotAllowedInLoop =  int32(-201221);
       DAQmxErrorClearTriggerNotAllowedInBreakBlock =  int32(-201220);
       DAQmxErrorNestingNotAllowedInBreakBlock =  int32(-201219);
       DAQmxErrorIfElseBlockNotAllowedInBreakBlock =  int32(-201218);
       DAQmxErrorRepeatUntilTriggerLoopNotAllowedInBreakBlock =  int32(-201217);
       DAQmxErrorWaitUntilTriggerNotAllowedInBreakBlock =  int32(-201216);
       DAQmxErrorMarkerPosInvalidInBreakBlock =  int32(-201215);
       DAQmxErrorInvalidWaitDurationInBreakBlock =  int32(-201214);
       DAQmxErrorInvalidSubsetLengthInBreakBlock =  int32(-201213);
       DAQmxErrorInvalidWaveformLengthInBreakBlock =  int32(-201212);
       DAQmxErrorInvalidWaitDurationBeforeBreakBlock =  int32(-201211);
       DAQmxErrorInvalidSubsetLengthBeforeBreakBlock =  int32(-201210);
       DAQmxErrorInvalidWaveformLengthBeforeBreakBlock =  int32(-201209);
       DAQmxErrorSampleRateTooHighForADCTimingMode =  int32(-201208);
       DAQmxErrorActiveDevNotSupportedWithMultiDevTask =  int32(-201207);
       DAQmxErrorRealDevAndSimDevNotSupportedInSameTask =  int32(-201206);
       DAQmxErrorRTSISimMustMatchDevSim =  int32(-201205);
       DAQmxErrorBridgeShuntCaNotSupported =  int32(-201204);
       DAQmxErrorStrainShuntCaNotSupported =  int32(-201203);
       DAQmxErrorGainTooLargeForGainCalConst =  int32(-201202);
       DAQmxErrorOffsetTooLargeForOffsetCalConst =  int32(-201201);
       DAQmxErrorElvisPrototypingBoardRemoved =  int32(-201200);
       DAQmxErrorElvis2PowerRailFault =  int32(-201199);
       DAQmxErrorElvis2PhysicalChansFault =  int32(-201198);
       DAQmxErrorElvis2PhysicalChansThermalEvent =  int32(-201197);
       DAQmxErrorRXBitErrorRateLimitExceeded =  int32(-201196);
       DAQmxErrorPHYBitErrorRateLimitExceeded =  int32(-201195);
       DAQmxErrorTwoPartAttributeCalledOutOfOrder =  int32(-201194);
       DAQmxErrorInvalidSCXIChassisAddress =  int32(-201193);
       DAQmxErrorCouldNotConnectToRemoteMXS =  int32(-201192);
       DAQmxErrorExcitationStateRequiredForAttributes =  int32(-201191);
       DAQmxErrorDeviceNotUsableUntilUSBReplug =  int32(-201190);
       DAQmxErrorInputFIFOOverflowDuringCalibrationOnFullSpeedUSB =  int32(-201189);
       DAQmxErrorInputFIFOOverflowDuringCalibration =  int32(-201188);
       DAQmxErrorCJCChanConflictsWithNonThermocoupleChan =  int32(-201187);
       DAQmxErrorCommDeviceForPXIBackplaneNotInRightmostSlot =  int32(-201186);
       DAQmxErrorCommDeviceForPXIBackplaneNotInSameChassis =  int32(-201185);
       DAQmxErrorCommDeviceForPXIBackplaneNotPXI =  int32(-201184);
       DAQmxErrorInvalidCalExcitFrequency =  int32(-201183);
       DAQmxErrorInvalidCalExcitVoltage =  int32(-201182);
       DAQmxErrorInvalidAIInputSrc =  int32(-201181);
       DAQmxErrorInvalidCalInputRef =  int32(-201180);
       DAQmxErrordBReferenceValueNotGreaterThanZero =  int32(-201179);
       DAQmxErrorSampleClockRateIsTooFastForSampleClockTiming =  int32(-201178);
       DAQmxErrorDeviceNotUsableUntilColdStart =  int32(-201177);
       DAQmxErrorSampleClockRateIsTooFastForBurstTiming =  int32(-201176);
       DAQmxErrorDevImportFailedAssociatedResourceIDsNotSupported =  int32(-201175);
       DAQmxErrorSCXI1600ImportNotSupported =  int32(-201174);
       DAQmxErrorPowerSupplyConfigurationFailed =  int32(-201173);
       DAQmxErrorIEPEWithDCNotAllowed =  int32(-201172);
       DAQmxErrorMinTempForThermocoupleTypeOutsideAccuracyForPolyScali =  int32(-201171);
       DAQmxErrorDevImportFailedNoDeviceToOverwriteAndSimulationNotSup =  int32(-201170);
       DAQmxErrorDevImportFailedDeviceNotSupportedOnDestination =  int32(-201169);
       DAQmxErrorFirmwareIsTooOld =  int32(-201168);
       DAQmxErrorFirmwareCouldntUpdate =  int32(-201167);
       DAQmxErrorFirmwareIsCorrupt =  int32(-201166);
       DAQmxErrorFirmwareTooNew =  int32(-201165);
       DAQmxErrorSampClockCannotBeExportedFromExternalSampClockSrc =  int32(-201164);
       DAQmxErrorPhysChanReservedForInputWhenDesiredForOutput =  int32(-201163);
       DAQmxErrorPhysChanReservedForOutputWhenDesiredForInput =  int32(-201162);
       DAQmxErrorSpecifiedCDAQSlotNotEmpty =  int32(-201161);
       DAQmxErrorDeviceDoesNotSupportSimulation =  int32(-201160);
       DAQmxErrorInvalidCDAQSlotNumberSpecd =  int32(-201159);
       DAQmxErrorCSeriesModSimMustMatchCDAQChassisSim =  int32(-201158);
       DAQmxErrorSCCCabledDevMustNotBeSimWhenSCCCarrierIsNotSim =  int32(-201157);
       DAQmxErrorSCCModSimMustMatchSCCCarrierSim =  int32(-201156);
       DAQmxErrorSCXIModuleDoesNotSupportSimulation =  int32(-201155);
       DAQmxErrorSCXICableDevMustNotBeSimWhenModIsNotSim =  int32(-201154);
       DAQmxErrorSCXIDigitizerSimMustNotBeSimWhenModIsNotSim =  int32(-201153);
       DAQmxErrorSCXIModSimMustMatchSCXIChassisSim =  int32(-201152);
       DAQmxErrorSimPXIDevReqSlotAndChassisSpecd =  int32(-201151);
       DAQmxErrorSimDevConflictWithRealDev =  int32(-201150);
       DAQmxErrorInsufficientDataForCalibration =  int32(-201149);
       DAQmxErrorTriggerChannelMustBeEnabled =  int32(-201148);
       DAQmxErrorCalibrationDataConflictCouldNotBeResolved =  int32(-201147);
       DAQmxErrorSoftwareTooNewForSelfCalibrationData =  int32(-201146);
       DAQmxErrorSoftwareTooNewForExtCalibrationData =  int32(-201145);
       DAQmxErrorSelfCalibrationDataTooNewForSoftware =  int32(-201144);
       DAQmxErrorExtCalibrationDataTooNewForSoftware =  int32(-201143);
       DAQmxErrorSoftwareTooNewForEEPROM =  int32(-201142);
       DAQmxErrorEEPROMTooNewForSoftware =  int32(-201141);
       DAQmxErrorSoftwareTooNewForHardware =  int32(-201140);
       DAQmxErrorHardwareTooNewForSoftware =  int32(-201139);
       DAQmxErrorTaskCannotRestartFirstSampNotAvailToGenerate =  int32(-201138);
       DAQmxErrorOnlyUseStartTrigSrcPrptyWithDevDataLines =  int32(-201137);
       DAQmxErrorOnlyUsePauseTrigSrcPrptyWithDevDataLines =  int32(-201136);
       DAQmxErrorOnlyUseRefTrigSrcPrptyWithDevDataLines =  int32(-201135);
       DAQmxErrorPauseTrigDigPatternSizeDoesNotMatchSrcSize =  int32(-201134);
       DAQmxErrorLineConflictCDAQ =  int32(-201133);
       DAQmxErrorCannotWriteBeyondFinalFiniteSample =  int32(-201132);
       DAQmxErrorRefAndStartTriggerSrcCantBeSame =  int32(-201131);
       DAQmxErrorMemMappingIncompatibleWithPhysChansInTask =  int32(-201130);
       DAQmxErrorOutputDriveTypeMemMappingConflict =  int32(-201129);
       DAQmxErrorCAPIDeviceIndexInvalid =  int32(-201128);
       DAQmxErrorRatiometricDevicesMustUseExcitationForScaling =  int32(-201127);
       DAQmxErrorPropertyRequiresPerDeviceCfg =  int32(-201126);
       DAQmxErrorAICouplingAndAIInputSourceConflict =  int32(-201125);
       DAQmxErrorOnlyOneTaskCanPerformDOMemoryMappingAtATime =  int32(-201124);
       DAQmxErrorTooManyChansForAnalogRefTrigCDAQ =  int32(-201123);
       DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingType =  int32(-201122);
       DAQmxErrorCPUNotSupportedRequireSSE =  int32(-201121);
       DAQmxErrorSpecdPropertyValueIsIncompatibleWithSampleTimingRespo =  int32(-201120);
       DAQmxErrorConflictingNextWriteIsLastAndRegenModeProperties =  int32(-201119);
       DAQmxErrorMStudioOperationDoesNotSupportDeviceContext =  int32(-201118);
       DAQmxErrorPropertyValueInChannelExpansionContextInvalid =  int32(-201117);
       DAQmxErrorHWTimedNonBufferedAONotSupported =  int32(-201116);
       DAQmxErrorWaveformLengthNotMultOfQuantum =  int32(-201115);
       DAQmxErrorDSAExpansionMixedBoardsWrongOrderInPXIChassis =  int32(-201114);
       DAQmxErrorPowerLevelTooLowForOOK =  int32(-201113);
       DAQmxErrorDeviceComponentTestFailure =  int32(-201112);
       DAQmxErrorUserDefinedWfmWithOOKUnsupported =  int32(-201111);
       DAQmxErrorInvalidDigitalModulationUserDefinedWaveform =  int32(-201110);
       DAQmxErrorBothRefInAndRefOutEnabled =  int32(-201109);
       DAQmxErrorBothAnalogAndDigitalModulationEnabled =  int32(-201108);
       DAQmxErrorBufferedOpsNotSupportedInSpecdSlotForCDAQ =  int32(-201107);
       DAQmxErrorPhysChanNotSupportedInSpecdSlotForCDAQ =  int32(-201106);
       DAQmxErrorResourceReservedWithConflictingSettings =  int32(-201105);
       DAQmxErrorInconsistentAnalogTrigSettingsCDAQ =  int32(-201104);
       DAQmxErrorTooManyChansForAnalogPauseTrigCDAQ =  int32(-201103);
       DAQmxErrorAnalogTrigNotFirstInScanListCDAQ =  int32(-201102);
       DAQmxErrorTooManyChansGivenTimingType =  int32(-201101);
       DAQmxErrorSampClkTimebaseDivWithExtSampClk =  int32(-201100);
       DAQmxErrorCantSaveTaskWithPerDeviceTimingProperties =  int32(-201099);
       DAQmxErrorConflictingAutoZeroMode =  int32(-201098);
       DAQmxErrorSampClkRateNotSupportedWithEAREnabled =  int32(-201097);
       DAQmxErrorSampClkTimebaseRateNotSpecd =  int32(-201096);
       DAQmxErrorSessionCorruptedByDLLReload =  int32(-201095);
       DAQmxErrorActiveDevNotSupportedWithChanExpansion =  int32(-201094);
       DAQmxErrorSampClkRateInvalid =  int32(-201093);
       DAQmxErrorExtSyncPulseSrcCannotBeExported =  int32(-201092);
       DAQmxErrorSyncPulseMinDelayToStartNeededForExtSyncPulseSrc =  int32(-201091);
       DAQmxErrorSyncPulseSrcInvalid =  int32(-201090);
       DAQmxErrorSampClkTimebaseRateInvalid =  int32(-201089);
       DAQmxErrorSampClkTimebaseSrcInvalid =  int32(-201088);
       DAQmxErrorSampClkRateMustBeSpecd =  int32(-201087);
       DAQmxErrorInvalidAttributeName =  int32(-201086);
       DAQmxErrorCJCChanNameMustBeSetWhenCJCSrcIsScannableChan =  int32(-201085);
       DAQmxErrorHiddenChanMissingInChansPropertyInCfgFile =  int32(-201084);
       DAQmxErrorChanNamesNotSpecdInCfgFile =  int32(-201083);
       DAQmxErrorDuplicateHiddenChanNamesInCfgFile =  int32(-201082);
       DAQmxErrorDuplicateChanNameInCfgFile =  int32(-201081);
       DAQmxErrorInvalidSCCModuleForSlotSpecd =  int32(-201080);
       DAQmxErrorInvalidSCCSlotNumberSpecd =  int32(-201079);
       DAQmxErrorInvalidSectionIdentifier =  int32(-201078);
       DAQmxErrorInvalidSectionName =  int32(-201077);
       DAQmxErrorDAQmxVersionNotSupported =  int32(-201076);
       DAQmxErrorSWObjectsFoundInFile =  int32(-201075);
       DAQmxErrorHWObjectsFoundInFile =  int32(-201074);
       DAQmxErrorLocalChannelSpecdWithNoParentTask =  int32(-201073);
       DAQmxErrorTaskReferencesMissingLocalChannel =  int32(-201072);
       DAQmxErrorTaskReferencesLocalChannelFromOtherTask =  int32(-201071);
       DAQmxErrorTaskMissingChannelProperty =  int32(-201070);
       DAQmxErrorInvalidLocalChanName =  int32(-201069);
       DAQmxErrorInvalidEscapeCharacterInString =  int32(-201068);
       DAQmxErrorInvalidTableIdentifier =  int32(-201067);
       DAQmxErrorValueFoundInInvalidColumn =  int32(-201066);
       DAQmxErrorMissingStartOfTable =  int32(-201065);
       DAQmxErrorFileMissingRequiredDAQmxHeader =  int32(-201064);
       DAQmxErrorDeviceIDDoesNotMatch =  int32(-201063);
       DAQmxErrorBufferedOperationsNotSupportedOnSelectedLines =  int32(-201062);
       DAQmxErrorPropertyConflictsWithScale =  int32(-201061);
       DAQmxErrorInvalidINIFileSyntax =  int32(-201060);
       DAQmxErrorDeviceInfoFailedPXIChassisNotIdentified =  int32(-201059);
       DAQmxErrorInvalidHWProductNumber =  int32(-201058);
       DAQmxErrorInvalidHWProductType =  int32(-201057);
       DAQmxErrorInvalidNumericFormatSpecd =  int32(-201056);
       DAQmxErrorDuplicatePropertyInObject =  int32(-201055);
       DAQmxErrorInvalidEnumValueSpecd =  int32(-201054);
       DAQmxErrorTEDSSensorPhysicalChannelConflict =  int32(-201053);
       DAQmxErrorTooManyPhysicalChansForTEDSInterfaceSpecd =  int32(-201052);
       DAQmxErrorIncapableTEDSInterfaceControllingDeviceSpecd =  int32(-201051);
       DAQmxErrorSCCCarrierSpecdIsMissing =  int32(-201050);
       DAQmxErrorIncapableSCCDigitizingDeviceSpecd =  int32(-201049);
       DAQmxErrorAccessorySettingNotApplicable =  int32(-201048);
       DAQmxErrorDeviceAndConnectorSpecdAlreadyOccupied =  int32(-201047);
       DAQmxErrorIllegalAccessoryTypeForDeviceSpecd =  int32(-201046);
       DAQmxErrorInvalidDeviceConnectorNumberSpecd =  int32(-201045);
       DAQmxErrorInvalidAccessoryName =  int32(-201044);
       DAQmxErrorMoreThanOneMatchForSpecdDevice =  int32(-201043);
       DAQmxErrorNoMatchForSpecdDevice =  int32(-201042);
       DAQmxErrorProductTypeAndProductNumberConflict =  int32(-201041);
       DAQmxErrorExtraPropertyDetectedInSpecdObject =  int32(-201040);
       DAQmxErrorRequiredPropertyMissing =  int32(-201039);
       DAQmxErrorCantSetAuthorForLocalChan =  int32(-201038);
       DAQmxErrorInvalidTimeValue =  int32(-201037);
       DAQmxErrorInvalidTimeFormat =  int32(-201036);
       DAQmxErrorDigDevChansSpecdInModeOtherThanParallel =  int32(-201035);
       DAQmxErrorCascadeDigitizationModeNotSupported =  int32(-201034);
       DAQmxErrorSpecdSlotAlreadyOccupied =  int32(-201033);
       DAQmxErrorInvalidSCXISlotNumberSpecd =  int32(-201032);
       DAQmxErrorAddressAlreadyInUse =  int32(-201031);
       DAQmxErrorSpecdDeviceDoesNotSupportRTSI =  int32(-201030);
       DAQmxErrorSpecdDeviceIsAlreadyOnRTSIBus =  int32(-201029);
       DAQmxErrorIdentifierInUse =  int32(-201028);
       DAQmxErrorWaitForNextSampleClockOrReadDetected3OrMoreMissedSamp =  int32(-201027);
       DAQmxErrorHWTimedAndDataXferPIO =  int32(-201026);
       DAQmxErrorNonBufferedAndHWTimed =  int32(-201025);
       DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriodPoll =  int32(-201024);
       DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod2 =  int32(-201023);
       DAQmxErrorCOCannotKeepUpInHWTimedSinglePointPolled =  int32(-201022);
       DAQmxErrorWriteRecoveryCannotKeepUpInHWTimedSinglePoint =  int32(-201021);
       DAQmxErrorNoChangeDetectionOnSelectedLineForDevice =  int32(-201020);
       DAQmxErrorSMIOPauseTriggersNotSupportedWithChannelExpansion =  int32(-201019);
       DAQmxErrorClockMasterForExternalClockNotLongestPipeline =  int32(-201018);
       DAQmxErrorUnsupportedUnicodeByteOrderMarker =  int32(-201017);
       DAQmxErrorTooManyInstructionsInLoopInScript =  int32(-201016);
       DAQmxErrorPLLNotLocked =  int32(-201015);
       DAQmxErrorIfElseBlockNotAllowedInFiniteRepeatLoopInScript =  int32(-201014);
       DAQmxErrorIfElseBlockNotAllowedInConditionalRepeatLoopInScript =  int32(-201013);
       DAQmxErrorClearIsLastInstructionInIfElseBlockInScript =  int32(-201012);
       DAQmxErrorInvalidWaitDurationBeforeIfElseBlockInScript =  int32(-201011);
       DAQmxErrorMarkerPosInvalidBeforeIfElseBlockInScript =  int32(-201010);
       DAQmxErrorInvalidSubsetLengthBeforeIfElseBlockInScript =  int32(-201009);
       DAQmxErrorInvalidWaveformLengthBeforeIfElseBlockInScript =  int32(-201008);
       DAQmxErrorGenerateOrFiniteWaitInstructionExpectedBeforeIfElseBl =  int32(-201007);
       DAQmxErrorCalPasswordNotSupported =  int32(-201006);
       DAQmxErrorSetupCalNeededBeforeAdjustCal =  int32(-201005);
       DAQmxErrorMultipleChansNotSupportedDuringCalSetup =  int32(-201004);
       DAQmxErrorDevCannotBeAccessed =  int32(-201003);
       DAQmxErrorSampClkRateDoesntMatchSampClkSrc =  int32(-201002);
       DAQmxErrorSampClkRateNotSupportedWithEARDisabled =  int32(-201001);
       DAQmxErrorLabVIEWVersionDoesntSupportDAQmxEvents =  int32(-201000);
       DAQmxErrorCOReadyForNewValNotSupportedWithOnDemand =  int32(-200999);
       DAQmxErrorCIHWTimedSinglePointNotSupportedForMeasType =  int32(-200998);
       DAQmxErrorOnDemandNotSupportedWithHWTimedSinglePoint =  int32(-200997);
       DAQmxErrorHWTimedSinglePointAndDataXferNotProgIO =  int32(-200996);
       DAQmxErrorMemMapAndHWTimedSinglePoint =  int32(-200995);
       DAQmxErrorCannotSetPropertyWhenHWTimedSinglePointTaskIsRunning =  int32(-200994);
       DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod =  int32(-200993);
       DAQmxErrorTooManyEventsGenerated =  int32(-200992);
       DAQmxErrorMStudioCppRemoveEventsBeforeStop =  int32(-200991);
       DAQmxErrorCAPICannotRegisterSyncEventsFromMultipleThreads =  int32(-200990);
       DAQmxErrorReadWaitNextSampClkWaitMismatchTwo =  int32(-200989);
       DAQmxErrorReadWaitNextSampClkWaitMismatchOne =  int32(-200988);
       DAQmxErrorDAQmxSignalEventTypeNotSupportedByChanTypesOrDevicesI =  int32(-200987);
       DAQmxErrorCannotUnregisterDAQmxSoftwareEventWhileTaskIsRunning =  int32(-200986);
       DAQmxErrorAutoStartWriteNotAllowedEventRegistered =  int32(-200985);
       DAQmxErrorAutoStartReadNotAllowedEventRegistered =  int32(-200984);
       DAQmxErrorCannotGetPropertyWhenTaskNotReservedCommittedOrRunnin =  int32(-200983);
       DAQmxErrorSignalEventsNotSupportedByDevice =  int32(-200982);
       DAQmxErrorEveryNSamplesAcqIntoBufferEventNotSupportedByDevice =  int32(-200981);
       DAQmxErrorEveryNSampsTransferredFromBufferEventNotSupportedByDe =  int32(-200980);
       DAQmxErrorCAPISyncEventsTaskStateChangeNotAllowedFromDifferentT =  int32(-200979);
       DAQmxErrorDAQmxSWEventsWithDifferentCallMechanisms =  int32(-200978);
       DAQmxErrorCantSaveChanWithPolyCalScaleAndAllowInteractiveEdit =  int32(-200977);
       DAQmxErrorChanDoesNotSupportCJC =  int32(-200976);
       DAQmxErrorCOReadyForNewValNotSupportedWithHWTimedSinglePoint =  int32(-200975);
       DAQmxErrorDACAllowConnToGndNotSupportedByDevWhenRefSrcExt =  int32(-200974);
       DAQmxErrorCantGetPropertyTaskNotRunning =  int32(-200973);
       DAQmxErrorCantSetPropertyTaskNotRunning =  int32(-200972);
       DAQmxErrorCantSetPropertyTaskNotRunningCommitted =  int32(-200971);
       DAQmxErrorAIEveryNSampsEventIntervalNotMultipleOf2 =  int32(-200970);
       DAQmxErrorInvalidTEDSPhysChanNotAI =  int32(-200969);
       DAQmxErrorCAPICannotPerformTaskOperationInAsyncCallback =  int32(-200968);
       DAQmxErrorEveryNSampsTransferredFromBufferEventAlreadyRegistere =  int32(-200967);
       DAQmxErrorEveryNSampsAcqIntoBufferEventAlreadyRegistered =  int32(-200966);
       DAQmxErrorEveryNSampsTransferredFromBufferNotForInput =  int32(-200965);
       DAQmxErrorEveryNSampsAcqIntoBufferNotForOutput =  int32(-200964);
       DAQmxErrorAOSampTimingTypeDifferentIn2Tasks =  int32(-200963);
       DAQmxErrorCouldNotDownloadFirmwareHWDamaged =  int32(-200962);
       DAQmxErrorCouldNotDownloadFirmwareFileMissingOrDamaged =  int32(-200961);
       DAQmxErrorCannotRegisterDAQmxSoftwareEventWhileTaskIsRunning =  int32(-200960);
       DAQmxErrorDifferentRawDataCompression =  int32(-200959);
       DAQmxErrorConfiguredTEDSInterfaceDevNotDetected =  int32(-200958);
       DAQmxErrorCompressedSampSizeExceedsResolution =  int32(-200957);
       DAQmxErrorChanDoesNotSupportCompression =  int32(-200956);
       DAQmxErrorDifferentRawDataFormats =  int32(-200955);
       DAQmxErrorSampClkOutputTermIncludesStartTrigSrc =  int32(-200954);
       DAQmxErrorStartTrigSrcEqualToSampClkSrc =  int32(-200953);
       DAQmxErrorEventOutputTermIncludesTrigSrc =  int32(-200952);
       DAQmxErrorCOMultipleWritesBetweenSampClks =  int32(-200951);
       DAQmxErrorDoneEventAlreadyRegistered =  int32(-200950);
       DAQmxErrorSignalEventAlreadyRegistered =  int32(-200949);
       DAQmxErrorCannotHaveTimedLoopAndDAQmxSignalEventsInSameTask =  int32(-200948);
       DAQmxErrorNeedLabVIEW711PatchToUseDAQmxEvents =  int32(-200947);
       DAQmxErrorStartFailedDueToWriteFailure =  int32(-200946);
       DAQmxErrorDataXferCustomThresholdNotDMAXferMethodSpecifiedForDe =  int32(-200945);
       DAQmxErrorDataXferRequestConditionNotSpecifiedForCustomThreshol =  int32(-200944);
       DAQmxErrorDataXferCustomThresholdNotSpecified =  int32(-200943);
       DAQmxErrorCAPISyncCallbackNotSupportedOnThisPlatform =  int32(-200942);
       DAQmxErrorCalChanReversePolyCoefNotSpecd =  int32(-200941);
       DAQmxErrorCalChanForwardPolyCoefNotSpecd =  int32(-200940);
       DAQmxErrorChanCalRepeatedNumberInPreScaledVals =  int32(-200939);
       DAQmxErrorChanCalTableNumScaledNotEqualNumPrescaledVals =  int32(-200938);
       DAQmxErrorChanCalTableScaledValsNotSpecd =  int32(-200937);
       DAQmxErrorChanCalTablePreScaledValsNotSpecd =  int32(-200936);
       DAQmxErrorChanCalScaleTypeNotSet =  int32(-200935);
       DAQmxErrorChanCalExpired =  int32(-200934);
       DAQmxErrorChanCalExpirationDateNotSet =  int32(-200933);
       DAQmxError3OutputPortCombinationGivenSampTimingType653x =  int32(-200932);
       DAQmxError3InputPortCombinationGivenSampTimingType653x =  int32(-200931);
       DAQmxError2OutputPortCombinationGivenSampTimingType653x =  int32(-200930);
       DAQmxError2InputPortCombinationGivenSampTimingType653x =  int32(-200929);
       DAQmxErrorPatternMatcherMayBeUsedByOneTrigOnly =  int32(-200928);
       DAQmxErrorNoChansSpecdForPatternSource =  int32(-200927);
       DAQmxErrorChangeDetectionChanNotInTask =  int32(-200926);
       DAQmxErrorChangeDetectionChanNotTristated =  int32(-200925);
       DAQmxErrorWaitModeValueNotSupportedNonBuffered =  int32(-200924);
       DAQmxErrorWaitModePropertyNotSupportedNonBuffered =  int32(-200923);
       DAQmxErrorCantSavePerLineConfigDigChanSoInteractiveEditsAllowed =  int32(-200922);
       DAQmxErrorCantSaveNonPortMultiLineDigChanSoInteractiveEditsAllo =  int32(-200921);
       DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalNoIrqO =  int32(-200920);
       DAQmxErrorGlobalTaskNameAlreadyChanName =  int32(-200919);
       DAQmxErrorGlobalChanNameAlreadyTaskName =  int32(-200918);
       DAQmxErrorAOEveryNSampsEventIntervalNotMultipleOf2 =  int32(-200917);
       DAQmxErrorSampleTimebaseDivisorNotSupportedGivenTimingType =  int32(-200916);
       DAQmxErrorHandshakeEventOutputTermNotSupportedGivenTimingType =  int32(-200915);
       DAQmxErrorChangeDetectionOutputTermNotSupportedGivenTimingType =  int32(-200914);
       DAQmxErrorReadyForTransferOutputTermNotSupportedGivenTimingType =  int32(-200913);
       DAQmxErrorRefTrigOutputTermNotSupportedGivenTimingType =  int32(-200912);
       DAQmxErrorStartTrigOutputTermNotSupportedGivenTimingType =  int32(-200911);
       DAQmxErrorSampClockOutputTermNotSupportedGivenTimingType =  int32(-200910);
       DAQmxError20MhzTimebaseNotSupportedGivenTimingType =  int32(-200909);
       DAQmxErrorSampClockSourceNotSupportedGivenTimingType =  int32(-200908);
       DAQmxErrorRefTrigTypeNotSupportedGivenTimingType =  int32(-200907);
       DAQmxErrorPauseTrigTypeNotSupportedGivenTimingType =  int32(-200906);
       DAQmxErrorHandshakeTrigTypeNotSupportedGivenTimingType =  int32(-200905);
       DAQmxErrorStartTrigTypeNotSupportedGivenTimingType =  int32(-200904);
       DAQmxErrorRefClkSrcNotSupported =  int32(-200903);
       DAQmxErrorDataVoltageLowAndHighIncompatible =  int32(-200902);
       DAQmxErrorInvalidCharInDigPatternString =  int32(-200901);
       DAQmxErrorCantUsePort3AloneGivenSampTimingTypeOn653x =  int32(-200900);
       DAQmxErrorCantUsePort1AloneGivenSampTimingTypeOn653x =  int32(-200899);
       DAQmxErrorPartialUseOfPhysicalLinesWithinPortNotSupported653x =  int32(-200898);
       DAQmxErrorPhysicalChanNotSupportedGivenSampTimingType653x =  int32(-200897);
       DAQmxErrorCanExportOnlyDigEdgeTrigs =  int32(-200896);
       DAQmxErrorRefTrigDigPatternSizeDoesNotMatchSourceSize =  int32(-200895);
       DAQmxErrorStartTrigDigPatternSizeDoesNotMatchSourceSize =  int32(-200894);
       DAQmxErrorChangeDetectionRisingAndFallingEdgeChanDontMatch =  int32(-200893);
       DAQmxErrorPhysicalChansForChangeDetectionAndPatternMatch653x =  int32(-200892);
       DAQmxErrorCanExportOnlyOnboardSampClk =  int32(-200891);
       DAQmxErrorInternalSampClkNotRisingEdge =  int32(-200890);
       DAQmxErrorRefTrigDigPatternChanNotInTask =  int32(-200889);
       DAQmxErrorRefTrigDigPatternChanNotTristated =  int32(-200888);
       DAQmxErrorStartTrigDigPatternChanNotInTask =  int32(-200887);
       DAQmxErrorStartTrigDigPatternChanNotTristated =  int32(-200886);
       DAQmxErrorPXIStarAndClock10Sync =  int32(-200885);
       DAQmxErrorGlobalChanCannotBeSavedSoInteractiveEditsAllowed =  int32(-200884);
       DAQmxErrorTaskCannotBeSavedSoInteractiveEditsAllowed =  int32(-200883);
       DAQmxErrorInvalidGlobalChan =  int32(-200882);
       DAQmxErrorEveryNSampsEventAlreadyRegistered =  int32(-200881);
       DAQmxErrorEveryNSampsEventIntervalZeroNotSupported =  int32(-200880);
       DAQmxErrorChanSizeTooBigForU16PortWrite =  int32(-200879);
       DAQmxErrorChanSizeTooBigForU16PortRead =  int32(-200878);
       DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalWhenDM =  int32(-200877);
       DAQmxErrorWriteWhenTaskNotRunningCOTicks =  int32(-200876);
       DAQmxErrorWriteWhenTaskNotRunningCOFreq =  int32(-200875);
       DAQmxErrorWriteWhenTaskNotRunningCOTime =  int32(-200874);
       DAQmxErrorAOMinMaxNotSupportedDACRangeTooSmall =  int32(-200873);
       DAQmxErrorAOMinMaxNotSupportedGivenDACRange =  int32(-200872);
       DAQmxErrorAOMinMaxNotSupportedGivenDACRangeAndOffsetVal =  int32(-200871);
       DAQmxErrorAOMinMaxNotSupportedDACOffsetValInappropriate =  int32(-200870);
       DAQmxErrorAOMinMaxNotSupportedGivenDACOffsetVal =  int32(-200869);
       DAQmxErrorAOMinMaxNotSupportedDACRefValTooSmall =  int32(-200868);
       DAQmxErrorAOMinMaxNotSupportedGivenDACRefVal =  int32(-200867);
       DAQmxErrorAOMinMaxNotSupportedGivenDACRefAndOffsetVal =  int32(-200866);
       DAQmxErrorWhenAcqCompAndNumSampsPerChanExceedsOnBrdBufSize =  int32(-200865);
       DAQmxErrorWhenAcqCompAndNoRefTrig =  int32(-200864);
       DAQmxErrorWaitForNextSampClkNotSupported =  int32(-200863);
       DAQmxErrorDevInUnidentifiedPXIChassis =  int32(-200862);
       DAQmxErrorMaxSoundPressureMicSensitivitRelatedAIPropertiesNotSu =  int32(-200861);
       DAQmxErrorMaxSoundPressureAndMicSensitivityNotSupportedByDev =  int32(-200860);
       DAQmxErrorAOBufferSizeZeroForSampClkTimingType =  int32(-200859);
       DAQmxErrorAOCallWriteBeforeStartForSampClkTimingType =  int32(-200858);
       DAQmxErrorInvalidCalLowPassCutoffFreq =  int32(-200857);
       DAQmxErrorSimulationCannotBeDisabledForDevCreatedAsSimulatedDev =  int32(-200856);
       DAQmxErrorCannotAddNewDevsAfterTaskConfiguration =  int32(-200855);
       DAQmxErrorDifftSyncPulseSrcAndSampClkTimebaseSrcDevMultiDevTask =  int32(-200854);
       DAQmxErrorTermWithoutDevInMultiDevTask =  int32(-200853);
       DAQmxErrorSyncNoDevSampClkTimebaseOrSyncPulseInPXISlot2 =  int32(-200852);
       DAQmxErrorPhysicalChanNotOnThisConnector =  int32(-200851);
       DAQmxErrorNumSampsToWaitNotGreaterThanZeroInScript =  int32(-200850);
       DAQmxErrorNumSampsToWaitNotMultipleOfAlignmentQuantumInScript =  int32(-200849);
       DAQmxErrorEveryNSamplesEventNotSupportedForNonBufferedTasks =  int32(-200848);
       DAQmxErrorBufferedAndDataXferPIO =  int32(-200847);
       DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunning =  int32(-200846);
       DAQmxErrorNonBufferedAndDataXferInterrupts =  int32(-200845);
       DAQmxErrorWriteFailedMultipleCtrsWithFREQOUT =  int32(-200844);
       DAQmxErrorReadNotCompleteBefore3SampClkEdges =  int32(-200843);
       DAQmxErrorCtrHWTimedSinglePointAndDataXferNotProgIO =  int32(-200842);
       DAQmxErrorPrescalerNot1ForInputTerminal =  int32(-200841);
       DAQmxErrorPrescalerNot1ForTimebaseSrc =  int32(-200840);
       DAQmxErrorSampClkTimingTypeWhenTristateIsFalse =  int32(-200839);
       DAQmxErrorOutputBufferSizeNotMultOfXferSize =  int32(-200838);
       DAQmxErrorSampPerChanNotMultOfXferSize =  int32(-200837);
       DAQmxErrorWriteToTEDSFailed =  int32(-200836);
       DAQmxErrorSCXIDevNotUsablePowerTurnedOff =  int32(-200835);
       DAQmxErrorCannotReadWhenAutoStartFalseBufSizeZeroAndTaskNotRunn =  int32(-200834);
       DAQmxErrorCannotReadWhenAutoStartFalseHWTimedSinglePtAndTaskNot =  int32(-200833);
       DAQmxErrorCannotReadWhenAutoStartFalseOnDemandAndTaskNotRunning =  int32(-200832);
       DAQmxErrorSimultaneousAOWhenNotOnDemandTiming =  int32(-200831);
       DAQmxErrorMemMapAndSimultaneousAO =  int32(-200830);
       DAQmxErrorWriteFailedMultipleCOOutputTypes =  int32(-200829);
       DAQmxErrorWriteToTEDSNotSupportedOnRT =  int32(-200828);
       DAQmxErrorVirtualTEDSDataFileError =  int32(-200827);
       DAQmxErrorTEDSSensorDataError =  int32(-200826);
       DAQmxErrorDataSizeMoreThanSizeOfEEPROMOnTEDS =  int32(-200825);
       DAQmxErrorPROMOnTEDSContainsBasicTEDSData =  int32(-200824);
       DAQmxErrorPROMOnTEDSAlreadyWritten =  int32(-200823);
       DAQmxErrorTEDSDoesNotContainPROM =  int32(-200822);
       DAQmxErrorHWTimedSinglePointNotSupportedAI =  int32(-200821);
       DAQmxErrorHWTimedSinglePointOddNumChansInAITask =  int32(-200820);
       DAQmxErrorCantUseOnlyOnBoardMemWithProgrammedIO =  int32(-200819);
       DAQmxErrorSwitchDevShutDownDueToHighTemp =  int32(-200818);
       DAQmxErrorExcitationNotSupportedWhenTermCfgDiff =  int32(-200817);
       DAQmxErrorTEDSMinElecValGEMaxElecVal =  int32(-200816);
       DAQmxErrorTEDSMinPhysValGEMaxPhysVal =  int32(-200815);
       DAQmxErrorCIOnboardClockNotSupportedAsInputTerm =  int32(-200814);
       DAQmxErrorInvalidSampModeForPositionMeas =  int32(-200813);
       DAQmxErrorTrigWhenAOHWTimedSinglePtSampMode =  int32(-200812);
       DAQmxErrorDAQmxCantUseStringDueToUnknownChar =  int32(-200811);
       DAQmxErrorDAQmxCantRetrieveStringDueToUnknownChar =  int32(-200810);
       DAQmxErrorClearTEDSNotSupportedOnRT =  int32(-200809);
       DAQmxErrorCfgTEDSNotSupportedOnRT =  int32(-200808);
       DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthBySameTask1P =  int32(-200807);
       DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthByAnotherTas =  int32(-200806);
       DAQmxErrorNoLastExtCalDateTimeLastExtCalNotDAQmx =  int32(-200804);
       DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandHWTimed =  int32(-200803);
       DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandBufSize =  int32(-200802);
       DAQmxErrorCOInvalidTimingSrcDueToSignal =  int32(-200801);
       DAQmxErrorCIInvalidTimingSrcForSampClkDueToSampTimingType =  int32(-200800);
       DAQmxErrorCIInvalidTimingSrcForEventCntDueToSampMode =  int32(-200799);
       DAQmxErrorNoChangeDetectOnNonInputDigLineForDev =  int32(-200798);
       DAQmxErrorEmptyStringTermNameNotSupported =  int32(-200797);
       DAQmxErrorMemMapEnabledForHWTimedNonBufferedAO =  int32(-200796);
       DAQmxErrorDevOnboardMemOverflowDuringHWTimedNonBufferedGen =  int32(-200795);
       DAQmxErrorCODAQmxWriteMultipleChans =  int32(-200794);
       DAQmxErrorCantMaintainExistingValueAOSync =  int32(-200793);
       DAQmxErrorMStudioMultiplePhysChansNotSupported =  int32(-200792);
       DAQmxErrorCantConfigureTEDSForChan =  int32(-200791);
       DAQmxErrorWriteDataTypeTooSmall =  int32(-200790);
       DAQmxErrorReadDataTypeTooSmall =  int32(-200789);
       DAQmxErrorMeasuredBridgeOffsetTooHigh =  int32(-200788);
       DAQmxErrorStartTrigConflictWithCOHWTimedSinglePt =  int32(-200787);
       DAQmxErrorSampClkRateExtSampClkTimebaseRateMismatch =  int32(-200786);
       DAQmxErrorInvalidTimingSrcDueToSampTimingType =  int32(-200785);
       DAQmxErrorVirtualTEDSFileNotFound =  int32(-200784);
       DAQmxErrorMStudioNoForwardPolyScaleCoeffs =  int32(-200783);
       DAQmxErrorMStudioNoReversePolyScaleCoeffs =  int32(-200782);
       DAQmxErrorMStudioNoPolyScaleCoeffsUseCalc =  int32(-200781);
       DAQmxErrorMStudioNoForwardPolyScaleCoeffsUseCalc =  int32(-200780);
       DAQmxErrorMStudioNoReversePolyScaleCoeffsUseCalc =  int32(-200779);
       DAQmxErrorCOSampModeSampTimingTypeSampClkConflict =  int32(-200778);
       DAQmxErrorDevCannotProduceMinPulseWidth =  int32(-200777);
       DAQmxErrorCannotProduceMinPulseWidthGivenPropertyValues =  int32(-200776);
       DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherTask =  int32(-200775);
       DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherProperty =  int32(-200774);
       DAQmxErrorDigSyncNotAvailableOnTerm =  int32(-200773);
       DAQmxErrorDigFilterNotAvailableOnTerm =  int32(-200772);
       DAQmxErrorDigFilterEnabledMinPulseWidthNotCfg =  int32(-200771);
       DAQmxErrorDigFilterAndSyncBothEnabled =  int32(-200770);
       DAQmxErrorHWTimedSinglePointAOAndDataXferNotProgIO =  int32(-200769);
       DAQmxErrorNonBufferedAOAndDataXferNotProgIO =  int32(-200768);
       DAQmxErrorProgIODataXferForBufferedAO =  int32(-200767);
       DAQmxErrorTEDSLegacyTemplateIDInvalidOrUnsupported =  int32(-200766);
       DAQmxErrorTEDSMappingMethodInvalidOrUnsupported =  int32(-200765);
       DAQmxErrorTEDSLinearMappingSlopeZero =  int32(-200764);
       DAQmxErrorAIInputBufferSizeNotMultOfXferSize =  int32(-200763);
       DAQmxErrorNoSyncPulseExtSampClkTimebase =  int32(-200762);
       DAQmxErrorNoSyncPulseAnotherTaskRunning =  int32(-200761);
       DAQmxErrorAOMinMaxNotInGainRange =  int32(-200760);
       DAQmxErrorAOMinMaxNotInDACRange =  int32(-200759);
       DAQmxErrorDevOnlySupportsSampClkTimingAO =  int32(-200758);
       DAQmxErrorDevOnlySupportsSampClkTimingAI =  int32(-200757);
       DAQmxErrorTEDSIncompatibleSensorAndMeasType =  int32(-200756);
       DAQmxErrorTEDSMultipleCalTemplatesNotSupported =  int32(-200755);
       DAQmxErrorTEDSTemplateParametersNotSupported =  int32(-200754);
       DAQmxErrorParsingTEDSData =  int32(-200753);
       DAQmxErrorMultipleActivePhysChansNotSupported =  int32(-200752);
       DAQmxErrorNoChansSpecdForChangeDetect =  int32(-200751);
       DAQmxErrorInvalidCalVoltageForGivenGain =  int32(-200750);
       DAQmxErrorInvalidCalGain =  int32(-200749);
       DAQmxErrorMultipleWritesBetweenSampClks =  int32(-200748);
       DAQmxErrorInvalidAcqTypeForFREQOUT =  int32(-200747);
       DAQmxErrorSuitableTimebaseNotFoundTimeCombo2 =  int32(-200746);
       DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo2 =  int32(-200745);
       DAQmxErrorRefClkRateRefClkSrcMismatch =  int32(-200744);
       DAQmxErrorNoTEDSTerminalBlock =  int32(-200743);
       DAQmxErrorCorruptedTEDSMemory =  int32(-200742);
       DAQmxErrorTEDSNotSupported =  int32(-200741);
       DAQmxErrorTimingSrcTaskStartedBeforeTimedLoop =  int32(-200740);
       DAQmxErrorPropertyNotSupportedForTimingSrc =  int32(-200739);
       DAQmxErrorTimingSrcDoesNotExist =  int32(-200738);
       DAQmxErrorInputBufferSizeNotEqualSampsPerChanForFiniteSampMode =  int32(-200737);
       DAQmxErrorFREQOUTCannotProduceDesiredFrequency2 =  int32(-200736);
       DAQmxErrorExtRefClkRateNotSpecified =  int32(-200735);
       DAQmxErrorDeviceDoesNotSupportDMADataXferForNonBufferedAcq =  int32(-200734);
       DAQmxErrorDigFilterMinPulseWidthSetWhenTristateIsFalse =  int32(-200733);
       DAQmxErrorDigFilterEnableSetWhenTristateIsFalse =  int32(-200732);
       DAQmxErrorNoHWTimingWithOnDemand =  int32(-200731);
       DAQmxErrorCannotDetectChangesWhenTristateIsFalse =  int32(-200730);
       DAQmxErrorCannotHandshakeWhenTristateIsFalse =  int32(-200729);
       DAQmxErrorLinesUsedForStaticInputNotForHandshakingControl =  int32(-200728);
       DAQmxErrorLinesUsedForHandshakingControlNotForStaticInput =  int32(-200727);
       DAQmxErrorLinesUsedForStaticInputNotForHandshakingInput =  int32(-200726);
       DAQmxErrorLinesUsedForHandshakingInputNotForStaticInput =  int32(-200725);
       DAQmxErrorDifferentDITristateValsForChansInTask =  int32(-200724);
       DAQmxErrorTimebaseCalFreqVarianceTooLarge =  int32(-200723);
       DAQmxErrorTimebaseCalFailedToConverge =  int32(-200722);
       DAQmxErrorInadequateResolutionForTimebaseCal =  int32(-200721);
       DAQmxErrorInvalidAOGainCalConst =  int32(-200720);
       DAQmxErrorInvalidAOOffsetCalConst =  int32(-200719);
       DAQmxErrorInvalidAIGainCalConst =  int32(-200718);
       DAQmxErrorInvalidAIOffsetCalConst =  int32(-200717);
       DAQmxErrorDigOutputOverrun =  int32(-200716);
       DAQmxErrorDigInputOverrun =  int32(-200715);
       DAQmxErrorAcqStoppedDriverCantXferDataFastEnough =  int32(-200714);
       DAQmxErrorChansCantAppearInSameTask =  int32(-200713);
       DAQmxErrorInputCfgFailedBecauseWatchdogExpired =  int32(-200712);
       DAQmxErrorAnalogTrigChanNotExternal =  int32(-200711);
       DAQmxErrorTooManyChansForInternalAIInputSrc =  int32(-200710);
       DAQmxErrorTEDSSensorNotDetected =  int32(-200709);
       DAQmxErrorPrptyGetSpecdActiveItemFailedDueToDifftValues =  int32(-200708);
       DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2 =  int32(-200706);
       DAQmxErrorRoutingDestTermPXIStarXNotInSlot2 =  int32(-200705);
       DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2 =  int32(-200704);
       DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove =  int32(-200703);
       DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove =  int32(-200702);
       DAQmxErrorRoutingDestTermPXIStarInSlot2 =  int32(-200701);
       DAQmxErrorRoutingSrcTermPXIStarInSlot2 =  int32(-200700);
       DAQmxErrorRoutingDestTermPXIChassisNotIdentified =  int32(-200699);
       DAQmxErrorRoutingSrcTermPXIChassisNotIdentified =  int32(-200698);
       DAQmxErrorFailedToAcquireCalData =  int32(-200697);
       DAQmxErrorBridgeOffsetNullingCalNotSupported =  int32(-200696);
       DAQmxErrorAIMaxNotSpecified =  int32(-200695);
       DAQmxErrorAIMinNotSpecified =  int32(-200694);
       DAQmxErrorOddTotalBufferSizeToWrite =  int32(-200693);
       DAQmxErrorOddTotalNumSampsToWrite =  int32(-200692);
       DAQmxErrorBufferWithWaitMode =  int32(-200691);
       DAQmxErrorBufferWithHWTimedSinglePointSampMode =  int32(-200690);
       DAQmxErrorCOWritePulseLowTicksNotSupported =  int32(-200689);
       DAQmxErrorCOWritePulseHighTicksNotSupported =  int32(-200688);
       DAQmxErrorCOWritePulseLowTimeOutOfRange =  int32(-200687);
       DAQmxErrorCOWritePulseHighTimeOutOfRange =  int32(-200686);
       DAQmxErrorCOWriteFreqOutOfRange =  int32(-200685);
       DAQmxErrorCOWriteDutyCycleOutOfRange =  int32(-200684);
       DAQmxErrorInvalidInstallation =  int32(-200683);
       DAQmxErrorRefTrigMasterSessionUnavailable =  int32(-200682);
       DAQmxErrorRouteFailedBecauseWatchdogExpired =  int32(-200681);
       DAQmxErrorDeviceShutDownDueToHighTemp =  int32(-200680);
       DAQmxErrorNoMemMapWhenHWTimedSinglePoint =  int32(-200679);
       DAQmxErrorWriteFailedBecauseWatchdogExpired =  int32(-200678);
       DAQmxErrorDifftInternalAIInputSrcs =  int32(-200677);
       DAQmxErrorDifftAIInputSrcInOneChanGroup =  int32(-200676);
       DAQmxErrorInternalAIInputSrcInMultChanGroups =  int32(-200675);
       DAQmxErrorSwitchOpFailedDueToPrevError =  int32(-200674);
       DAQmxErrorWroteMultiSampsUsingSingleSampWrite =  int32(-200673);
       DAQmxErrorMismatchedInputArraySizes =  int32(-200672);
       DAQmxErrorCantExceedRelayDriveLimit =  int32(-200671);
       DAQmxErrorDACRngLowNotEqualToMinusRefVal =  int32(-200670);
       DAQmxErrorCantAllowConnectDACToGnd =  int32(-200669);
       DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal =  int32(-200668);
       DAQmxErrorNoWatchdogOutputOnPortReservedForInput =  int32(-200667);
       DAQmxErrorNoInputOnPortCfgdForWatchdogOutput =  int32(-200666);
       DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort =  int32(-200665);
       DAQmxErrorCannotPerformOpWhenTaskNotReserved =  int32(-200664);
       DAQmxErrorPowerupStateNotSupported =  int32(-200663);
       DAQmxErrorWatchdogTimerNotSupported =  int32(-200662);
       DAQmxErrorOpNotSupportedWhenRefClkSrcNone =  int32(-200661);
       DAQmxErrorSampClkRateUnavailable =  int32(-200660);
       DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals =  int32(-200659);
       DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals =  int32(-200658);
       DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals =  int32(-200657);
       DAQmxErrorNoRegenWhenUsingBrdMem =  int32(-200656);
       DAQmxErrorNonbufferedReadMoreThanSampsPerChan =  int32(-200655);
       DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort =  int32(-200654);
       DAQmxErrorPowerupTristateNotSpecdForEntirePort =  int32(-200653);
       DAQmxErrorPowerupStateNotSpecdForEntirePort =  int32(-200652);
       DAQmxErrorCantSetWatchdogExpirationOnDigInChan =  int32(-200651);
       DAQmxErrorCantSetPowerupStateOnDigInChan =  int32(-200650);
       DAQmxErrorPhysChanNotInTask =  int32(-200649);
       DAQmxErrorPhysChanDevNotInTask =  int32(-200648);
       DAQmxErrorDigInputNotSupported =  int32(-200647);
       DAQmxErrorDigFilterIntervalNotEqualForLines =  int32(-200646);
       DAQmxErrorDigFilterIntervalAlreadyCfgd =  int32(-200645);
       DAQmxErrorCantResetExpiredWatchdog =  int32(-200644);
       DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty =  int32(-200643);
       DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty =  int32(-200642);
       DAQmxErrorDigPrptyCannotBeSetPerLine =  int32(-200641);
       DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist =  int32(-200640);
       DAQmxErrorDisconnectionRequiredInScanlist =  int32(-200639);
       DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist =  int32(-200638);
       DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanl =  int32(-200637);
       DAQmxErrorConnectionInScanlistMustWaitForTrig =  int32(-200636);
       DAQmxErrorActionNotSupportedTaskNotWatchdog =  int32(-200635);
       DAQmxErrorWfmNameSameAsScriptName =  int32(-200634);
       DAQmxErrorScriptNameSameAsWfmName =  int32(-200633);
       DAQmxErrorDSFStopClock =  int32(-200632);
       DAQmxErrorDSFReadyForStartClock =  int32(-200631);
       DAQmxErrorWriteOffsetNotMultOfIncr =  int32(-200630);
       DAQmxErrorDifferentPrptyValsNotSupportedOnDev =  int32(-200629);
       DAQmxErrorRefAndPauseTrigConfigured =  int32(-200628);
       DAQmxErrorFailedToEnableHighSpeedInputClock =  int32(-200627);
       DAQmxErrorEmptyPhysChanInPowerUpStatesArray =  int32(-200626);
       DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty =  int32(-200625);
       DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty =  int32(-200624);
       DAQmxErrorPXIDevTempCausedShutDown =  int32(-200623);
       DAQmxErrorInvalidNumSampsToWrite =  int32(-200622);
       DAQmxErrorOutputFIFOUnderflow2 =  int32(-200621);
       DAQmxErrorRepeatedAIPhysicalChan =  int32(-200620);
       DAQmxErrorMultScanOpsInOneChassis =  int32(-200619);
       DAQmxErrorInvalidAIChanOrder =  int32(-200618);
       DAQmxErrorReversePowerProtectionActivated =  int32(-200617);
       DAQmxErrorInvalidAsynOpHandle =  int32(-200616);
       DAQmxErrorFailedToEnableHighSpeedOutput =  int32(-200615);
       DAQmxErrorCannotReadPastEndOfRecord =  int32(-200614);
       DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMec =  int32(-200613);
       DAQmxErrorZeroBasedChanIndexInvalid =  int32(-200612);
       DAQmxErrorNoChansOfGivenTypeInTask =  int32(-200611);
       DAQmxErrorSampClkSrcInvalidForOutputValidForInput =  int32(-200610);
       DAQmxErrorOutputBufSizeTooSmallToStartGen =  int32(-200609);
       DAQmxErrorInputBufSizeTooSmallToStartAcq =  int32(-200608);
       DAQmxErrorExportTwoSignalsOnSameTerminal =  int32(-200607);
       DAQmxErrorChanIndexInvalid =  int32(-200606);
       DAQmxErrorRangeSyntaxNumberTooBig =  int32(-200605);
       DAQmxErrorNULLPtr =  int32(-200604);
       DAQmxErrorScaledMinEqualMax =  int32(-200603);
       DAQmxErrorPreScaledMinEqualMax =  int32(-200602);
       DAQmxErrorPropertyNotSupportedForScaleType =  int32(-200601);
       DAQmxErrorChannelNameGenerationNumberTooBig =  int32(-200600);
       DAQmxErrorRepeatedNumberInScaledValues =  int32(-200599);
       DAQmxErrorRepeatedNumberInPreScaledValues =  int32(-200598);
       DAQmxErrorLinesAlreadyReservedForOutput =  int32(-200597);
       DAQmxErrorSwitchOperationChansSpanMultipleDevsInList =  int32(-200596);
       DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation =  int32(-200595);
       DAQmxErrorMStudioInvalidPolyDirection =  int32(-200594);
       DAQmxErrorMStudioPropertyGetWhileTaskNotVerified =  int32(-200593);
       DAQmxErrorRangeWithTooManyObjects =  int32(-200592);
       DAQmxErrorCppDotNetAPINegativeBufferSize =  int32(-200591);
       DAQmxErrorCppCantRemoveInvalidEventHandler =  int32(-200590);
       DAQmxErrorCppCantRemoveEventHandlerTwice =  int32(-200589);
       DAQmxErrorCppCantRemoveOtherObjectsEventHandler =  int32(-200588);
       DAQmxErrorDigLinesReservedOrUnavailable =  int32(-200587);
       DAQmxErrorDSFFailedToResetStream =  int32(-200586);
       DAQmxErrorDSFReadyForOutputNotAsserted =  int32(-200585);
       DAQmxErrorSampToWritePerChanNotMultipleOfIncr =  int32(-200584);
       DAQmxErrorAOPropertiesCauseVoltageBelowMin =  int32(-200583);
       DAQmxErrorAOPropertiesCauseVoltageOverMax =  int32(-200582);
       DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone =  int32(-200581);
       DAQmxErrorAIMaxTooSmall =  int32(-200580);
       DAQmxErrorAIMaxTooLarge =  int32(-200579);
       DAQmxErrorAIMinTooSmall =  int32(-200578);
       DAQmxErrorAIMinTooLarge =  int32(-200577);
       DAQmxErrorBuiltInCJCSrcNotSupported =  int32(-200576);
       DAQmxErrorTooManyPostTrigSampsPerChan =  int32(-200575);
       DAQmxErrorTrigLineNotFoundSingleDevRoute =  int32(-200574);
       DAQmxErrorDifferentInternalAIInputSources =  int32(-200573);
       DAQmxErrorDifferentAIInputSrcInOneChanGroup =  int32(-200572);
       DAQmxErrorInternalAIInputSrcInMultipleChanGroups =  int32(-200571);
       DAQmxErrorCAPIChanIndexInvalid =  int32(-200570);
       DAQmxErrorCollectionDoesNotMatchChanType =  int32(-200569);
       DAQmxErrorOutputCantStartChangedRegenerationMode =  int32(-200568);
       DAQmxErrorOutputCantStartChangedBufferSize =  int32(-200567);
       DAQmxErrorChanSizeTooBigForU32PortWrite =  int32(-200566);
       DAQmxErrorChanSizeTooBigForU8PortWrite =  int32(-200565);
       DAQmxErrorChanSizeTooBigForU32PortRead =  int32(-200564);
       DAQmxErrorChanSizeTooBigForU8PortRead =  int32(-200563);
       DAQmxErrorInvalidDigDataWrite =  int32(-200562);
       DAQmxErrorInvalidAODataWrite =  int32(-200561);
       DAQmxErrorWaitUntilDoneDoesNotIndicateDone =  int32(-200560);
       DAQmxErrorMultiChanTypesInTask =  int32(-200559);
       DAQmxErrorMultiDevsInTask =  int32(-200558);
       DAQmxErrorCannotSetPropertyWhenTaskRunning =  int32(-200557);
       DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning =  int32(-200556);
       DAQmxErrorLeadingUnderscoreInString =  int32(-200555);
       DAQmxErrorTrailingSpaceInString =  int32(-200554);
       DAQmxErrorLeadingSpaceInString =  int32(-200553);
       DAQmxErrorInvalidCharInString =  int32(-200552);
       DAQmxErrorDLLBecameUnlocked =  int32(-200551);
       DAQmxErrorDLLLock =  int32(-200550);
       DAQmxErrorSelfCalConstsInvalid =  int32(-200549);
       DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan =  int32(-200548);
       DAQmxErrorWriteFailsBufferSizeAutoConfigured =  int32(-200547);
       DAQmxErrorExtCalAdjustExtRefVoltageFailed =  int32(-200546);
       DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal =  int32(-200545);
       DAQmxErrorExtCalTemperatureNotDAQmx =  int32(-200544);
       DAQmxErrorExtCalDateTimeNotDAQmx =  int32(-200543);
       DAQmxErrorSelfCalTemperatureNotDAQmx =  int32(-200542);
       DAQmxErrorSelfCalDateTimeNotDAQmx =  int32(-200541);
       DAQmxErrorDACRefValNotSet =  int32(-200540);
       DAQmxErrorAnalogMultiSampWriteNotSupported =  int32(-200539);
       DAQmxErrorInvalidActionInControlTask =  int32(-200538);
       DAQmxErrorPolyCoeffsInconsistent =  int32(-200537);
       DAQmxErrorSensorValTooLow =  int32(-200536);
       DAQmxErrorSensorValTooHigh =  int32(-200535);
       DAQmxErrorWaveformNameTooLong =  int32(-200534);
       DAQmxErrorIdentifierTooLongInScript =  int32(-200533);
       DAQmxErrorUnexpectedIDFollowingSwitchChanName =  int32(-200532);
       DAQmxErrorRelayNameNotSpecifiedInList =  int32(-200531);
       DAQmxErrorUnexpectedIDFollowingRelayNameInList =  int32(-200530);
       DAQmxErrorUnexpectedIDFollowingSwitchOpInList =  int32(-200529);
       DAQmxErrorInvalidLineGrouping =  int32(-200528);
       DAQmxErrorCtrMinMax =  int32(-200527);
       DAQmxErrorWriteChanTypeMismatch =  int32(-200526);
       DAQmxErrorReadChanTypeMismatch =  int32(-200525);
       DAQmxErrorWriteNumChansMismatch =  int32(-200524);
       DAQmxErrorOneChanReadForMultiChanTask =  int32(-200523);
       DAQmxErrorCannotSelfCalDuringExtCal =  int32(-200522);
       DAQmxErrorMeasCalAdjustOscillatorPhaseDAC =  int32(-200521);
       DAQmxErrorInvalidCalConstCalADCAdjustment =  int32(-200520);
       DAQmxErrorInvalidCalConstOscillatorFreqDACValue =  int32(-200519);
       DAQmxErrorInvalidCalConstOscillatorPhaseDACValue =  int32(-200518);
       DAQmxErrorInvalidCalConstOffsetDACValue =  int32(-200517);
       DAQmxErrorInvalidCalConstGainDACValue =  int32(-200516);
       DAQmxErrorInvalidNumCalADCReadsToAverage =  int32(-200515);
       DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance =  int32(-200514);
       DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance =  int32(-200513);
       DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset =  int32(-200512);
       DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain =  int32(-200511);
       DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset =  int32(-200510);
       DAQmxErrorMeasCalAdjustCalADC =  int32(-200509);
       DAQmxErrorMeasCalAdjustOscillatorFrequency =  int32(-200508);
       DAQmxErrorMeasCalAdjustDirectPathOutputImpedance =  int32(-200507);
       DAQmxErrorMeasCalAdjustMainPathOutputImpedance =  int32(-200506);
       DAQmxErrorMeasCalAdjustDirectPathGain =  int32(-200505);
       DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset =  int32(-200504);
       DAQmxErrorMeasCalAdjustMainPathPreAmpGain =  int32(-200503);
       DAQmxErrorMeasCalAdjustMainPathPreAmpOffset =  int32(-200502);
       DAQmxErrorInvalidDateTimeInEEPROM =  int32(-200501);
       DAQmxErrorUnableToLocateErrorResources =  int32(-200500);
       DAQmxErrorDotNetAPINotUnsigned32BitNumber =  int32(-200499);
       DAQmxErrorInvalidRangeOfObjectsSyntaxInString =  int32(-200498);
       DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled =  int32(-200497);
       DAQmxErrorInvalidCharInPattern =  int32(-200496);
       DAQmxErrorIntermediateBufferFull =  int32(-200495);
       DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev =  int32(-200494);
       DAQmxErrorCAPIReservedParamNotNULLNorEmpty =  int32(-200493);
       DAQmxErrorCAPIReservedParamNotNULL =  int32(-200492);
       DAQmxErrorCAPIReservedParamNotZero =  int32(-200491);
       DAQmxErrorSampleValueOutOfRange =  int32(-200490);
       DAQmxErrorChanAlreadyInTask =  int32(-200489);
       DAQmxErrorVirtualChanDoesNotExist =  int32(-200488);
       DAQmxErrorChanNotInTask =  int32(-200486);
       DAQmxErrorTaskNotInDataNeighborhood =  int32(-200485);
       DAQmxErrorCantSaveTaskWithoutReplace =  int32(-200484);
       DAQmxErrorCantSaveChanWithoutReplace =  int32(-200483);
       DAQmxErrorDevNotInTask =  int32(-200482);
       DAQmxErrorDevAlreadyInTask =  int32(-200481);
       DAQmxErrorCanNotPerformOpWhileTaskRunning =  int32(-200479);
       DAQmxErrorCanNotPerformOpWhenNoChansInTask =  int32(-200478);
       DAQmxErrorCanNotPerformOpWhenNoDevInTask =  int32(-200477);
       DAQmxErrorCannotPerformOpWhenTaskNotRunning =  int32(-200475);
       DAQmxErrorOperationTimedOut =  int32(-200474);
       DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommit =  int32(-200473);
       DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommi =  int32(-200472);
       DAQmxErrorTaskVersionNew =  int32(-200470);
       DAQmxErrorChanVersionNew =  int32(-200469);
       DAQmxErrorEmptyString =  int32(-200467);
       DAQmxErrorChannelSizeTooBigForPortReadType =  int32(-200466);
       DAQmxErrorChannelSizeTooBigForPortWriteType =  int32(-200465);
       DAQmxErrorExpectedNumberOfChannelsVerificationFailed =  int32(-200464);
       DAQmxErrorNumLinesMismatchInReadOrWrite =  int32(-200463);
       DAQmxErrorOutputBufferEmpty =  int32(-200462);
       DAQmxErrorInvalidChanName =  int32(-200461);
       DAQmxErrorReadNoInputChansInTask =  int32(-200460);
       DAQmxErrorWriteNoOutputChansInTask =  int32(-200459);
       DAQmxErrorPropertyNotSupportedNotInputTask =  int32(-200457);
       DAQmxErrorPropertyNotSupportedNotOutputTask =  int32(-200456);
       DAQmxErrorGetPropertyNotInputBufferedTask =  int32(-200455);
       DAQmxErrorGetPropertyNotOutputBufferedTask =  int32(-200454);
       DAQmxErrorInvalidTimeoutVal =  int32(-200453);
       DAQmxErrorAttributeNotSupportedInTaskContext =  int32(-200452);
       DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted =  int32(-200451);
       DAQmxErrorAttributeNotSettableWhenTaskIsRunning =  int32(-200450);
       DAQmxErrorDACRngLowNotMinusRefValNorZero =  int32(-200449);
       DAQmxErrorDACRngHighNotEqualRefVal =  int32(-200448);
       DAQmxErrorUnitsNotFromCustomScale =  int32(-200447);
       DAQmxErrorInvalidVoltageReadingDuringExtCal =  int32(-200446);
       DAQmxErrorCalFunctionNotSupported =  int32(-200445);
       DAQmxErrorInvalidPhysicalChanForCal =  int32(-200444);
       DAQmxErrorExtCalNotComplete =  int32(-200443);
       DAQmxErrorCantSyncToExtStimulusFreqDuringCal =  int32(-200442);
       DAQmxErrorUnableToDetectExtStimulusFreqDuringCal =  int32(-200441);
       DAQmxErrorInvalidCloseAction =  int32(-200440);
       DAQmxErrorExtCalFunctionOutsideExtCalSession =  int32(-200439);
       DAQmxErrorInvalidCalArea =  int32(-200438);
       DAQmxErrorExtCalConstsInvalid =  int32(-200437);
       DAQmxErrorStartTrigDelayWithExtSampClk =  int32(-200436);
       DAQmxErrorDelayFromSampClkWithExtConv =  int32(-200435);
       DAQmxErrorFewerThan2PreScaledVals =  int32(-200434);
       DAQmxErrorFewerThan2ScaledValues =  int32(-200433);
       DAQmxErrorPhysChanOutputType =  int32(-200432);
       DAQmxErrorPhysChanMeasType =  int32(-200431);
       DAQmxErrorInvalidPhysChanType =  int32(-200430);
       DAQmxErrorLabVIEWEmptyTaskOrChans =  int32(-200429);
       DAQmxErrorLabVIEWInvalidTaskOrChans =  int32(-200428);
       DAQmxErrorInvalidRefClkRate =  int32(-200427);
       DAQmxErrorInvalidExtTrigImpedance =  int32(-200426);
       DAQmxErrorHystTrigLevelAIMax =  int32(-200425);
       DAQmxErrorLineNumIncompatibleWithVideoSignalFormat =  int32(-200424);
       DAQmxErrorTrigWindowAIMinAIMaxCombo =  int32(-200423);
       DAQmxErrorTrigAIMinAIMax =  int32(-200422);
       DAQmxErrorHystTrigLevelAIMin =  int32(-200421);
       DAQmxErrorInvalidSampRateConsiderRIS =  int32(-200420);
       DAQmxErrorInvalidReadPosDuringRIS =  int32(-200419);
       DAQmxErrorImmedTrigDuringRISMode =  int32(-200418);
       DAQmxErrorTDCNotEnabledDuringRISMode =  int32(-200417);
       DAQmxErrorMultiRecWithRIS =  int32(-200416);
       DAQmxErrorInvalidRefClkSrc =  int32(-200415);
       DAQmxErrorInvalidSampClkSrc =  int32(-200414);
       DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps =  int32(-200413);
       DAQmxErrorInvalidAIAttenuation =  int32(-200412);
       DAQmxErrorACCouplingNotAllowedWith50OhmImpedance =  int32(-200411);
       DAQmxErrorInvalidRecordNum =  int32(-200410);
       DAQmxErrorZeroSlopeLinearScale =  int32(-200409);
       DAQmxErrorZeroReversePolyScaleCoeffs =  int32(-200408);
       DAQmxErrorZeroForwardPolyScaleCoeffs =  int32(-200407);
       DAQmxErrorNoReversePolyScaleCoeffs =  int32(-200406);
       DAQmxErrorNoForwardPolyScaleCoeffs =  int32(-200405);
       DAQmxErrorNoPolyScaleCoeffs =  int32(-200404);
       DAQmxErrorReversePolyOrderLessThanNumPtsToCompute =  int32(-200403);
       DAQmxErrorReversePolyOrderNotPositive =  int32(-200402);
       DAQmxErrorNumPtsToComputeNotPositive =  int32(-200401);
       DAQmxErrorWaveformLengthNotMultipleOfIncr =  int32(-200400);
       DAQmxErrorCAPINoExtendedErrorInfoAvailable =  int32(-200399);
       DAQmxErrorCVIFunctionNotFoundInDAQmxDLL =  int32(-200398);
       DAQmxErrorCVIFailedToLoadDAQmxDLL =  int32(-200397);
       DAQmxErrorNoCommonTrigLineForImmedRoute =  int32(-200396);
       DAQmxErrorNoCommonTrigLineForTaskRoute =  int32(-200395);
       DAQmxErrorF64PrptyValNotUnsignedInt =  int32(-200394);
       DAQmxErrorRegisterNotWritable =  int32(-200393);
       DAQmxErrorInvalidOutputVoltageAtSampClkRate =  int32(-200392);
       DAQmxErrorStrobePhaseShiftDCMBecameUnlocked =  int32(-200391);
       DAQmxErrorDrivePhaseShiftDCMBecameUnlocked =  int32(-200390);
       DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked =  int32(-200389);
       DAQmxErrorOutputBoardClkDCMBecameUnlocked =  int32(-200388);
       DAQmxErrorInputBoardClkDCMBecameUnlocked =  int32(-200387);
       DAQmxErrorInternalClkDCMBecameUnlocked =  int32(-200386);
       DAQmxErrorDCMLock =  int32(-200385);
       DAQmxErrorDataLineReservedForDynamicOutput =  int32(-200384);
       DAQmxErrorInvalidRefClkSrcGivenSampClkSrc =  int32(-200383);
       DAQmxErrorNoPatternMatcherAvailable =  int32(-200382);
       DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh =  int32(-200381);
       DAQmxErrorStrainGageCalibration =  int32(-200380);
       DAQmxErrorInvalidExtClockFreqAndDivCombo =  int32(-200379);
       DAQmxErrorCustomScaleDoesNotExist =  int32(-200378);
       DAQmxErrorOnlyFrontEndChanOpsDuringScan =  int32(-200377);
       DAQmxErrorInvalidOptionForDigitalPortChannel =  int32(-200376);
       DAQmxErrorUnsupportedSignalTypeExportSignal =  int32(-200375);
       DAQmxErrorInvalidSignalTypeExportSignal =  int32(-200374);
       DAQmxErrorUnsupportedTrigTypeSendsSWTrig =  int32(-200373);
       DAQmxErrorInvalidTrigTypeSendsSWTrig =  int32(-200372);
       DAQmxErrorRepeatedPhysicalChan =  int32(-200371);
       DAQmxErrorResourcesInUseForRouteInTask =  int32(-200370);
       DAQmxErrorResourcesInUseForRoute =  int32(-200369);
       DAQmxErrorRouteNotSupportedByHW =  int32(-200368);
       DAQmxErrorResourcesInUseForExportSignalPolarity =  int32(-200367);
       DAQmxErrorResourcesInUseForInversionInTask =  int32(-200366);
       DAQmxErrorResourcesInUseForInversion =  int32(-200365);
       DAQmxErrorExportSignalPolarityNotSupportedByHW =  int32(-200364);
       DAQmxErrorInversionNotSupportedByHW =  int32(-200363);
       DAQmxErrorOverloadedChansExistNotRead =  int32(-200362);
       DAQmxErrorInputFIFOOverflow2 =  int32(-200361);
       DAQmxErrorCJCChanNotSpecd =  int32(-200360);
       DAQmxErrorCtrExportSignalNotPossible =  int32(-200359);
       DAQmxErrorRefTrigWhenContinuous =  int32(-200358);
       DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges =  int32(-200357);
       DAQmxErrorCustomScaleNameUsed =  int32(-200356);
       DAQmxErrorPropertyValNotSupportedByHW =  int32(-200355);
       DAQmxErrorPropertyValNotValidTermName =  int32(-200354);
       DAQmxErrorResourcesInUseForProperty =  int32(-200353);
       DAQmxErrorCJCChanAlreadyUsed =  int32(-200352);
       DAQmxErrorForwardPolynomialCoefNotSpecd =  int32(-200351);
       DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual =  int32(-200350);
       DAQmxErrorTableScalePreScaledValsNotSpecd =  int32(-200349);
       DAQmxErrorTableScaleScaledValsNotSpecd =  int32(-200348);
       DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr =  int32(-200347);
       DAQmxErrorEventPulseWidthOutOfRange =  int32(-200346);
       DAQmxErrorEventDelayOutOfRange =  int32(-200345);
       DAQmxErrorSampPerChanNotMultipleOfIncr =  int32(-200344);
       DAQmxErrorCannotCalculateNumSampsTaskNotStarted =  int32(-200343);
       DAQmxErrorScriptNotInMem =  int32(-200342);
       DAQmxErrorOnboardMemTooSmall =  int32(-200341);
       DAQmxErrorReadAllAvailableDataWithoutBuffer =  int32(-200340);
       DAQmxErrorPulseActiveAtStart =  int32(-200339);
       DAQmxErrorCalTempNotSupported =  int32(-200338);
       DAQmxErrorDelayFromSampClkTooLong =  int32(-200337);
       DAQmxErrorDelayFromSampClkTooShort =  int32(-200336);
       DAQmxErrorAIConvRateTooHigh =  int32(-200335);
       DAQmxErrorDelayFromStartTrigTooLong =  int32(-200334);
       DAQmxErrorDelayFromStartTrigTooShort =  int32(-200333);
       DAQmxErrorSampRateTooHigh =  int32(-200332);
       DAQmxErrorSampRateTooLow =  int32(-200331);
       DAQmxErrorPFI0UsedForAnalogAndDigitalSrc =  int32(-200330);
       DAQmxErrorPrimingCfgFIFO =  int32(-200329);
       DAQmxErrorCannotOpenTopologyCfgFile =  int32(-200328);
       DAQmxErrorInvalidDTInsideWfmDataType =  int32(-200327);
       DAQmxErrorRouteSrcAndDestSame =  int32(-200326);
       DAQmxErrorReversePolynomialCoefNotSpecd =  int32(-200325);
       DAQmxErrorDevAbsentOrUnavailable =  int32(-200324);
       DAQmxErrorNoAdvTrigForMultiDevScan =  int32(-200323);
       DAQmxErrorInterruptsInsufficientDataXferMech =  int32(-200322);
       DAQmxErrorInvalidAttentuationBasedOnMinMax =  int32(-200321);
       DAQmxErrorCabledModuleCannotRouteSSH =  int32(-200320);
       DAQmxErrorCabledModuleCannotRouteConvClk =  int32(-200319);
       DAQmxErrorInvalidExcitValForScaling =  int32(-200318);
       DAQmxErrorNoDevMemForScript =  int32(-200317);
       DAQmxErrorScriptDataUnderflow =  int32(-200316);
       DAQmxErrorNoDevMemForWaveform =  int32(-200315);
       DAQmxErrorStreamDCMBecameUnlocked =  int32(-200314);
       DAQmxErrorStreamDCMLock =  int32(-200313);
       DAQmxErrorWaveformNotInMem =  int32(-200312);
       DAQmxErrorWaveformWriteOutOfBounds =  int32(-200311);
       DAQmxErrorWaveformPreviouslyAllocated =  int32(-200310);
       DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc =  int32(-200309);
       DAQmxErrorSampTbRateSampTbSrcMismatch =  int32(-200308);
       DAQmxErrorMasterTbRateMasterTbSrcMismatch =  int32(-200307);
       DAQmxErrorSampsPerChanTooBig =  int32(-200306);
       DAQmxErrorFinitePulseTrainNotPossible =  int32(-200305);
       DAQmxErrorExtMasterTimebaseRateNotSpecified =  int32(-200304);
       DAQmxErrorExtSampClkSrcNotSpecified =  int32(-200303);
       DAQmxErrorInputSignalSlowerThanMeasTime =  int32(-200302);
       DAQmxErrorCannotUpdatePulseGenProperty =  int32(-200301);
       DAQmxErrorInvalidTimingType =  int32(-200300);
       DAQmxErrorPropertyUnavailWhenUsingOnboardMemory =  int32(-200297);
       DAQmxErrorCannotWriteAfterStartWithOnboardMemory =  int32(-200295);
       DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition =  int32(-200294);
       DAQmxErrorNoMoreSpace =  int32(-200293);
       DAQmxErrorSamplesCanNotYetBeWritten =  int32(-200292);
       DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSample =  int32(-200291);
       DAQmxErrorGenStoppedToPreventRegenOfOldSamples =  int32(-200290);
       DAQmxErrorSamplesNoLongerWriteable =  int32(-200289);
       DAQmxErrorSamplesWillNeverBeGenerated =  int32(-200288);
       DAQmxErrorNegativeWriteSampleNumber =  int32(-200287);
       DAQmxErrorNoAcqStarted =  int32(-200286);
       DAQmxErrorSamplesNotYetAvailable =  int32(-200284);
       DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow =  int32(-200283);
       DAQmxErrorNoRefTrigConfigured =  int32(-200282);
       DAQmxErrorCannotReadRelativeToRefTrigUntilDone =  int32(-200281);
       DAQmxErrorSamplesNoLongerAvailable =  int32(-200279);
       DAQmxErrorSamplesWillNeverBeAvailable =  int32(-200278);
       DAQmxErrorNegativeReadSampleNumber =  int32(-200277);
       DAQmxErrorExternalSampClkAndRefClkThruSameTerm =  int32(-200276);
       DAQmxErrorExtSampClkRateTooLowForClkIn =  int32(-200275);
       DAQmxErrorExtSampClkRateTooHighForBackplane =  int32(-200274);
       DAQmxErrorSampClkRateAndDivCombo =  int32(-200273);
       DAQmxErrorSampClkRateTooLowForDivDown =  int32(-200272);
       DAQmxErrorProductOfAOMinAndGainTooSmall =  int32(-200271);
       DAQmxErrorInterpolationRateNotPossible =  int32(-200270);
       DAQmxErrorOffsetTooLarge =  int32(-200269);
       DAQmxErrorOffsetTooSmall =  int32(-200268);
       DAQmxErrorProductOfAOMaxAndGainTooLarge =  int32(-200267);
       DAQmxErrorMinAndMaxNotSymmetric =  int32(-200266);
       DAQmxErrorInvalidAnalogTrigSrc =  int32(-200265);
       DAQmxErrorTooManyChansForAnalogRefTrig =  int32(-200264);
       DAQmxErrorTooManyChansForAnalogPauseTrig =  int32(-200263);
       DAQmxErrorTrigWhenOnDemandSampTiming =  int32(-200262);
       DAQmxErrorInconsistentAnalogTrigSettings =  int32(-200261);
       DAQmxErrorMemMapDataXferModeSampTimingCombo =  int32(-200260);
       DAQmxErrorInvalidJumperedAttr =  int32(-200259);
       DAQmxErrorInvalidGainBasedOnMinMax =  int32(-200258);
       DAQmxErrorInconsistentExcit =  int32(-200257);
       DAQmxErrorTopologyNotSupportedByCfgTermBlock =  int32(-200256);
       DAQmxErrorBuiltInTempSensorNotSupported =  int32(-200255);
       DAQmxErrorInvalidTerm =  int32(-200254);
       DAQmxErrorCannotTristateTerm =  int32(-200253);
       DAQmxErrorCannotTristateBusyTerm =  int32(-200252);
       DAQmxErrorNoDMAChansAvailable =  int32(-200251);
       DAQmxErrorInvalidWaveformLengthWithinLoopInScript =  int32(-200250);
       DAQmxErrorInvalidSubsetLengthWithinLoopInScript =  int32(-200249);
       DAQmxErrorMarkerPosInvalidForLoopInScript =  int32(-200248);
       DAQmxErrorIntegerExpectedInScript =  int32(-200247);
       DAQmxErrorPLLBecameUnlocked =  int32(-200246);
       DAQmxErrorPLLLock =  int32(-200245);
       DAQmxErrorDDCClkOutDCMBecameUnlocked =  int32(-200244);
       DAQmxErrorDDCClkOutDCMLock =  int32(-200243);
       DAQmxErrorClkDoublerDCMBecameUnlocked =  int32(-200242);
       DAQmxErrorClkDoublerDCMLock =  int32(-200241);
       DAQmxErrorSampClkDCMBecameUnlocked =  int32(-200240);
       DAQmxErrorSampClkDCMLock =  int32(-200239);
       DAQmxErrorSampClkTimebaseDCMBecameUnlocked =  int32(-200238);
       DAQmxErrorSampClkTimebaseDCMLock =  int32(-200237);
       DAQmxErrorAttrCannotBeReset =  int32(-200236);
       DAQmxErrorExplanationNotFound =  int32(-200235);
       DAQmxErrorWriteBufferTooSmall =  int32(-200234);
       DAQmxErrorSpecifiedAttrNotValid =  int32(-200233);
       DAQmxErrorAttrCannotBeRead =  int32(-200232);
       DAQmxErrorAttrCannotBeSet =  int32(-200231);
       DAQmxErrorNULLPtrForC_Api =  int32(-200230);
       DAQmxErrorReadBufferTooSmall =  int32(-200229);
       DAQmxErrorBufferTooSmallForString =  int32(-200228);
       DAQmxErrorNoAvailTrigLinesOnDevice =  int32(-200227);
       DAQmxErrorTrigBusLineNotAvail =  int32(-200226);
       DAQmxErrorCouldNotReserveRequestedTrigLine =  int32(-200225);
       DAQmxErrorTrigLineNotFound =  int32(-200224);
       DAQmxErrorSCXI1126ThreshHystCombination =  int32(-200223);
       DAQmxErrorAcqStoppedToPreventInputBufferOverwrite =  int32(-200222);
       DAQmxErrorTimeoutExceeded =  int32(-200221);
       DAQmxErrorInvalidDeviceID =  int32(-200220);
       DAQmxErrorInvalidAOChanOrder =  int32(-200219);
       DAQmxErrorSampleTimingTypeAndDataXferMode =  int32(-200218);
       DAQmxErrorBufferWithOnDemandSampTiming =  int32(-200217);
       DAQmxErrorBufferAndDataXferMode =  int32(-200216);
       DAQmxErrorMemMapAndBuffer =  int32(-200215);
       DAQmxErrorNoAnalogTrigHW =  int32(-200214);
       DAQmxErrorTooManyPretrigPlusMinPostTrigSamps =  int32(-200213);
       DAQmxErrorInconsistentUnitsSpecified =  int32(-200212);
       DAQmxErrorMultipleRelaysForSingleRelayOp =  int32(-200211);
       DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList =  int32(-200210);
       DAQmxErrorDuplicateDevIDInList =  int32(-200209);
       DAQmxErrorInvalidRangeStatementCharInList =  int32(-200208);
       DAQmxErrorInvalidDeviceIDInList =  int32(-200207);
       DAQmxErrorTriggerPolarityConflict =  int32(-200206);
       DAQmxErrorCannotScanWithCurrentTopology =  int32(-200205);
       DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList =  int32(-200204);
       DAQmxErrorSwitchCannotDriveMultipleTrigLines =  int32(-200203);
       DAQmxErrorInvalidRelayName =  int32(-200202);
       DAQmxErrorSwitchScanlistTooBig =  int32(-200201);
       DAQmxErrorSwitchChanInUse =  int32(-200200);
       DAQmxErrorSwitchNotResetBeforeScan =  int32(-200199);
       DAQmxErrorInvalidTopology =  int32(-200198);
       DAQmxErrorAttrNotSupported =  int32(-200197);
       DAQmxErrorUnexpectedEndOfActionsInList =  int32(-200196);
       DAQmxErrorPowerBudgetExceeded =  int32(-200195);
       DAQmxErrorHWUnexpectedlyPoweredOffAndOn =  int32(-200194);
       DAQmxErrorSwitchOperationNotSupported =  int32(-200193);
       DAQmxErrorOnlyContinuousScanSupported =  int32(-200192);
       DAQmxErrorSwitchDifferentTopologyWhenScanning =  int32(-200191);
       DAQmxErrorDisconnectPathNotSameAsExistingPath =  int32(-200190);
       DAQmxErrorConnectionNotPermittedOnChanReservedForRouting =  int32(-200189);
       DAQmxErrorCannotConnectSrcChans =  int32(-200188);
       DAQmxErrorCannotConnectChannelToItself =  int32(-200187);
       DAQmxErrorChannelNotReservedForRouting =  int32(-200186);
       DAQmxErrorCannotConnectChansDirectly =  int32(-200185);
       DAQmxErrorChansAlreadyConnected =  int32(-200184);
       DAQmxErrorChanDuplicatedInPath =  int32(-200183);
       DAQmxErrorNoPathToDisconnect =  int32(-200182);
       DAQmxErrorInvalidSwitchChan =  int32(-200181);
       DAQmxErrorNoPathAvailableBetween2SwitchChans =  int32(-200180);
       DAQmxErrorExplicitConnectionExists =  int32(-200179);
       DAQmxErrorSwitchDifferentSettlingTimeWhenScanning =  int32(-200178);
       DAQmxErrorOperationOnlyPermittedWhileScanning =  int32(-200177);
       DAQmxErrorOperationNotPermittedWhileScanning =  int32(-200176);
       DAQmxErrorHardwareNotResponding =  int32(-200175);
       DAQmxErrorInvalidSampAndMasterTimebaseRateCombo =  int32(-200173);
       DAQmxErrorNonZeroBufferSizeInProgIOXfer =  int32(-200172);
       DAQmxErrorVirtualChanNameUsed =  int32(-200171);
       DAQmxErrorPhysicalChanDoesNotExist =  int32(-200170);
       DAQmxErrorMemMapOnlyForProgIOXfer =  int32(-200169);
       DAQmxErrorTooManyChans =  int32(-200168);
       DAQmxErrorCannotHaveCJTempWithOtherChans =  int32(-200167);
       DAQmxErrorOutputBufferUnderwrite =  int32(-200166);
       DAQmxErrorSensorInvalidCompletionResistance =  int32(-200163);
       DAQmxErrorVoltageExcitIncompatibleWith2WireCfg =  int32(-200162);
       DAQmxErrorIntExcitSrcNotAvailable =  int32(-200161);
       DAQmxErrorCannotCreateChannelAfterTaskVerified =  int32(-200160);
       DAQmxErrorLinesReservedForSCXIControl =  int32(-200159);
       DAQmxErrorCouldNotReserveLinesForSCXIControl =  int32(-200158);
       DAQmxErrorCalibrationFailed =  int32(-200157);
       DAQmxErrorReferenceFrequencyInvalid =  int32(-200156);
       DAQmxErrorReferenceResistanceInvalid =  int32(-200155);
       DAQmxErrorReferenceCurrentInvalid =  int32(-200154);
       DAQmxErrorReferenceVoltageInvalid =  int32(-200153);
       DAQmxErrorEEPROMDataInvalid =  int32(-200152);
       DAQmxErrorCabledModuleNotCapableOfRoutingAI =  int32(-200151);
       DAQmxErrorChannelNotAvailableInParallelMode =  int32(-200150);
       DAQmxErrorExternalTimebaseRateNotKnownForDelay =  int32(-200149);
       DAQmxErrorFREQOUTCannotProduceDesiredFrequency =  int32(-200148);
       DAQmxErrorMultipleCounterInputTask =  int32(-200147);
       DAQmxErrorCounterStartPauseTriggerConflict =  int32(-200146);
       DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid =  int32(-200145);
       DAQmxErrorCounterOutputPauseTriggerInvalid =  int32(-200144);
       DAQmxErrorCounterTimebaseRateNotSpecified =  int32(-200143);
       DAQmxErrorCounterTimebaseRateNotFound =  int32(-200142);
       DAQmxErrorCounterOverflow =  int32(-200141);
       DAQmxErrorCounterNoTimebaseEdgesBetweenGates =  int32(-200140);
       DAQmxErrorCounterMaxMinRangeFreq =  int32(-200139);
       DAQmxErrorCounterMaxMinRangeTime =  int32(-200138);
       DAQmxErrorSuitableTimebaseNotFoundTimeCombo =  int32(-200137);
       DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo =  int32(-200136);
       DAQmxErrorInternalTimebaseSourceDivisorCombo =  int32(-200135);
       DAQmxErrorInternalTimebaseSourceRateCombo =  int32(-200134);
       DAQmxErrorInternalTimebaseRateDivisorSourceCombo =  int32(-200133);
       DAQmxErrorExternalTimebaseRateNotknownForRate =  int32(-200132);
       DAQmxErrorAnalogTrigChanNotFirstInScanList =  int32(-200131);
       DAQmxErrorNoDivisorForExternalSignal =  int32(-200130);
       DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels =  int32(-200128);
       DAQmxErrorCannotHandshakeWithPort0 =  int32(-200127);
       DAQmxErrorControlLineConflictOnPortC =  int32(-200126);
       DAQmxErrorLines4To7ConfiguredForOutput =  int32(-200125);
       DAQmxErrorLines4To7ConfiguredForInput =  int32(-200124);
       DAQmxErrorLines0To3ConfiguredForOutput =  int32(-200123);
       DAQmxErrorLines0To3ConfiguredForInput =  int32(-200122);
       DAQmxErrorPortConfiguredForOutput =  int32(-200121);
       DAQmxErrorPortConfiguredForInput =  int32(-200120);
       DAQmxErrorPortConfiguredForStaticDigitalOps =  int32(-200119);
       DAQmxErrorPortReservedForHandshaking =  int32(-200118);
       DAQmxErrorPortDoesNotSupportHandshakingDataIO =  int32(-200117);
       DAQmxErrorCannotTristate8255OutputLines =  int32(-200116);
       DAQmxErrorTemperatureOutOfRangeForCalibration =  int32(-200113);
       DAQmxErrorCalibrationHandleInvalid =  int32(-200112);
       DAQmxErrorPasswordRequired =  int32(-200111);
       DAQmxErrorIncorrectPassword =  int32(-200110);
       DAQmxErrorPasswordTooLong =  int32(-200109);
       DAQmxErrorCalibrationSessionAlreadyOpen =  int32(-200108);
       DAQmxErrorSCXIModuleIncorrect =  int32(-200107);
       DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice =  int32(-200106);
       DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg =  int32(-200105);
       DAQmxErrorBracketPairingMismatchInList =  int32(-200104);
       DAQmxErrorInconsistentNumSamplesToWrite =  int32(-200103);
       DAQmxErrorIncorrectDigitalPattern =  int32(-200102);
       DAQmxErrorIncorrectNumChannelsToWrite =  int32(-200101);
       DAQmxErrorIncorrectReadFunction =  int32(-200100);
       DAQmxErrorPhysicalChannelNotSpecified =  int32(-200099);
       DAQmxErrorMoreThanOneTerminal =  int32(-200098);
       DAQmxErrorMoreThanOneActiveChannelSpecified =  int32(-200097);
       DAQmxErrorInvalidNumberSamplesToRead =  int32(-200096);
       DAQmxErrorAnalogWaveformExpected =  int32(-200095);
       DAQmxErrorDigitalWaveformExpected =  int32(-200094);
       DAQmxErrorActiveChannelNotSpecified =  int32(-200093);
       DAQmxErrorFunctionNotSupportedForDeviceTasks =  int32(-200092);
       DAQmxErrorFunctionNotInLibrary =  int32(-200091);
       DAQmxErrorLibraryNotPresent =  int32(-200090);
       DAQmxErrorDuplicateTask =  int32(-200089);
       DAQmxErrorInvalidTask =  int32(-200088);
       DAQmxErrorInvalidChannel =  int32(-200087);
       DAQmxErrorInvalidSyntaxForPhysicalChannelRange =  int32(-200086);
       DAQmxErrorMinNotLessThanMax =  int32(-200082);
       DAQmxErrorSampleRateNumChansConvertPeriodCombo =  int32(-200081);
       DAQmxErrorAODuringCounter1DMAConflict =  int32(-200079);
       DAQmxErrorAIDuringCounter0DMAConflict =  int32(-200078);
       DAQmxErrorInvalidAttributeValue =  int32(-200077);
       DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange =  int32(-200076);
       DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange =  int32(-200075);
       DAQmxErrorCannotStoreCalConst =  int32(-200074);
       DAQmxErrorSCXIModuleNotFound =  int32(-200073);
       DAQmxErrorDuplicatePhysicalChansNotSupported =  int32(-200072);
       DAQmxErrorTooManyPhysicalChansInList =  int32(-200071);
       DAQmxErrorInvalidAdvanceEventTriggerType =  int32(-200070);
       DAQmxErrorDeviceIsNotAValidSwitch =  int32(-200069);
       DAQmxErrorDeviceDoesNotSupportScanning =  int32(-200068);
       DAQmxErrorScanListCannotBeTimed =  int32(-200067);
       DAQmxErrorConnectOperatorInvalidAtPointInList =  int32(-200066);
       DAQmxErrorUnexpectedSwitchActionInList =  int32(-200065);
       DAQmxErrorUnexpectedSeparatorInList =  int32(-200064);
       DAQmxErrorExpectedTerminatorInList =  int32(-200063);
       DAQmxErrorExpectedConnectOperatorInList =  int32(-200062);
       DAQmxErrorExpectedSeparatorInList =  int32(-200061);
       DAQmxErrorFullySpecifiedPathInListContainsRange =  int32(-200060);
       DAQmxErrorConnectionSeparatorAtEndOfList =  int32(-200059);
       DAQmxErrorIdentifierInListTooLong =  int32(-200058);
       DAQmxErrorDuplicateDeviceIDInListWhenSettling =  int32(-200057);
       DAQmxErrorChannelNameNotSpecifiedInList =  int32(-200056);
       DAQmxErrorDeviceIDNotSpecifiedInList =  int32(-200055);
       DAQmxErrorSemicolonDoesNotFollowRangeInList =  int32(-200054);
       DAQmxErrorSwitchActionInListSpansMultipleDevices =  int32(-200053);
       DAQmxErrorRangeWithoutAConnectActionInList =  int32(-200052);
       DAQmxErrorInvalidIdentifierFollowingSeparatorInList =  int32(-200051);
       DAQmxErrorInvalidChannelNameInList =  int32(-200050);
       DAQmxErrorInvalidNumberInRepeatStatementInList =  int32(-200049);
       DAQmxErrorInvalidTriggerLineInList =  int32(-200048);
       DAQmxErrorInvalidIdentifierInListFollowingDeviceID =  int32(-200047);
       DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction =  int32(-200046);
       DAQmxErrorDeviceRemoved =  int32(-200045);
       DAQmxErrorRoutingPathNotAvailable =  int32(-200044);
       DAQmxErrorRoutingHardwareBusy =  int32(-200043);
       DAQmxErrorRequestedSignalInversionForRoutingNotPossible =  int32(-200042);
       DAQmxErrorInvalidRoutingDestinationTerminalName =  int32(-200041);
       DAQmxErrorInvalidRoutingSourceTerminalName =  int32(-200040);
       DAQmxErrorRoutingNotSupportedForDevice =  int32(-200039);
       DAQmxErrorWaitIsLastInstructionOfLoopInScript =  int32(-200038);
       DAQmxErrorClearIsLastInstructionOfLoopInScript =  int32(-200037);
       DAQmxErrorInvalidLoopIterationsInScript =  int32(-200036);
       DAQmxErrorRepeatLoopNestingTooDeepInScript =  int32(-200035);
       DAQmxErrorMarkerPositionOutsideSubsetInScript =  int32(-200034);
       DAQmxErrorSubsetStartOffsetNotAlignedInScript =  int32(-200033);
       DAQmxErrorInvalidSubsetLengthInScript =  int32(-200032);
       DAQmxErrorMarkerPositionNotAlignedInScript =  int32(-200031);
       DAQmxErrorSubsetOutsideWaveformInScript =  int32(-200030);
       DAQmxErrorMarkerOutsideWaveformInScript =  int32(-200029);
       DAQmxErrorWaveformInScriptNotInMem =  int32(-200028);
       DAQmxErrorKeywordExpectedInScript =  int32(-200027);
       DAQmxErrorBufferNameExpectedInScript =  int32(-200026);
       DAQmxErrorProcedureNameExpectedInScript =  int32(-200025);
       DAQmxErrorScriptHasInvalidIdentifier =  int32(-200024);
       DAQmxErrorScriptHasInvalidCharacter =  int32(-200023);
       DAQmxErrorResourceAlreadyReserved =  int32(-200022);
       DAQmxErrorSelfTestFailed =  int32(-200020);
       DAQmxErrorADCOverrun =  int32(-200019);
       DAQmxErrorDACUnderflow =  int32(-200018);
       DAQmxErrorInputFIFOUnderflow =  int32(-200017);
       DAQmxErrorOutputFIFOUnderflow =  int32(-200016);
       DAQmxErrorSCXISerialCommunication =  int32(-200015);
       DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce =  int32(-200014);
       DAQmxErrorDigitalOutputNotSupported =  int32(-200012);
       DAQmxErrorInconsistentChannelDirections =  int32(-200011);
       DAQmxErrorInputFIFOOverflow =  int32(-200010);
       DAQmxErrorTimeStampOverwritten =  int32(-200009);
       DAQmxErrorStopTriggerHasNotOccurred =  int32(-200008);
       DAQmxErrorRecordNotAvailable =  int32(-200007);
       DAQmxErrorRecordOverwritten =  int32(-200006);
       DAQmxErrorDataNotAvailable =  int32(-200005);
       DAQmxErrorDataOverwrittenInDeviceMemory =  int32(-200004);
       DAQmxErrorDuplicatedChannel =  int32(-200003);
       DAQmxWarningTimestampCounterRolledOver =  int32(200003);
       DAQmxWarningInputTerminationOverloaded =  int32(200004);
       DAQmxWarningADCOverloaded =  int32(200005);
       DAQmxWarningPLLUnlocked =  int32(200007);
       DAQmxWarningCounter0DMADuringAIConflict =  int32(200008);
       DAQmxWarningCounter1DMADuringAOConflict =  int32(200009);
       DAQmxWarningStoppedBeforeDone =  int32(200010);
       DAQmxWarningRateViolatesSettlingTime =  int32(200011);
       DAQmxWarningRateViolatesMaxADCRate =  int32(200012);
       DAQmxWarningUserDefInfoStringTooLong =  int32(200013);
       DAQmxWarningTooManyInterruptsPerSecond =  int32(200014);
       DAQmxWarningPotentialGlitchDuringWrite =  int32(200015);
       DAQmxWarningDevNotSelfCalibratedWithDAQmx =  int32(200016);
       DAQmxWarningAISampRateTooLow =  int32(200017);
       DAQmxWarningAIConvRateTooLow =  int32(200018);
       DAQmxWarningReadOffsetCoercion =  int32(200019);
       DAQmxWarningPretrigCoercion =  int32(200020);
       DAQmxWarningSampValCoercedToMax =  int32(200021);
       DAQmxWarningSampValCoercedToMin =  int32(200022);
       DAQmxWarningPropertyVersionNew =  int32(200024);
       DAQmxWarningUserDefinedInfoTooLong =  int32(200025);
       DAQmxWarningCAPIStringTruncatedToFitBuffer =  int32(200026);
       DAQmxWarningSampClkRateTooLow =  int32(200027);
       DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq =  int32(200028);
       DAQmxWarningRISAcqCompletedSomeBinsNotFilled =  int32(200029);
       DAQmxWarningPXIDevTempExceedsMaxOpTemp =  int32(200030);
       DAQmxWarningOutputGainTooLowForRFFreq =  int32(200031);
       DAQmxWarningOutputGainTooHighForRFFreq =  int32(200032);
       DAQmxWarningMultipleWritesBetweenSampClks =  int32(200033);
       DAQmxWarningDeviceMayShutDownDueToHighTemp =  int32(200034);
       DAQmxWarningRateViolatesMinADCRate =  int32(200035);
       DAQmxWarningSampClkRateAboveDevSpecs =  int32(200036);
       DAQmxWarningCOPrevDAQmxWriteSettingsOverwrittenForHWTimedSingle =  int32(200037);
       DAQmxWarningLowpassFilterSettlingTimeExceedsUserTimeBetween2ADC =  int32(200038);
       DAQmxWarningLowpassFilterSettlingTimeExceedsDriverTimeBetween2A =  int32(200039);
       DAQmxWarningSampClkRateViolatesSettlingTimeForGen =  int32(200040);
       DAQmxWarningInvalidCalConstValueForAI =  int32(200041);
       DAQmxWarningInvalidCalConstValueForAO =  int32(200042);
       DAQmxWarningChanCalExpired =  int32(200043);
       DAQmxWarningUnrecognizedEnumValueEncounteredInStorage =  int32(200044);
       DAQmxWarningTableCRCNotCorrect =  int32(200045);
       DAQmxWarningExternalCRCNotCorrect =  int32(200046);
       DAQmxWarningSelfCalCRCNotCorrect =  int32(200047);
       DAQmxWarningDeviceSpecExceeded =  int32(200048);
       DAQmxWarningOnlyGainCalibrated =  int32(200049);
       DAQmxWarningReversePowerProtectionActivated =  int32(200050);
       DAQmxWarningOverVoltageProtectionActivated =  int32(200051);
       DAQmxWarningBufferSizeNotMultipleOfSectorSize =  int32(200052);
       DAQmxWarningSampleRateMayCauseAcqToFail =  int32(200053);
       DAQmxWarningUserAreaCRCNotCorrect =  int32(200054);
       DAQmxWarningPowerUpInfoCRCNotCorrect =  int32(200055);
       DAQmxWarningReadNotCompleteBeforeSampClk =  int32(209800);
       DAQmxWarningWriteNotCompleteBeforeSampClk =  int32(209801);
       DAQmxWarningWaitForNextSampClkDetectedMissedSampClk =  int32(209802);
       DAQmxErrorRoutingDestTermPXIDStarXNotInSystemTimingSlot_Routing =  int32(-89167);
       DAQmxErrorRoutingSrcTermPXIDStarXNotInSystemTimingSlot_Routing =  int32(-89166);
       DAQmxErrorRoutingSrcTermPXIDStarInNonDStarTriggerSlot_Routing =  int32(-89165);
       DAQmxErrorRoutingDestTermPXIDStarInNonDStarTriggerSlot_Routing =  int32(-89164);
       DAQmxErrorRoutingDestTermPXIClk10InNotInStarTriggerSlot_Routing =  int32(-89162);
       DAQmxErrorRoutingDestTermPXIClk10InNotInSystemTimingSlot_Routin =  int32(-89161);
       DAQmxErrorRoutingDestTermPXIStarXNotInStarTriggerSlot_Routing =  int32(-89160);
       DAQmxErrorRoutingDestTermPXIStarXNotInSystemTimingSlot_Routing =  int32(-89159);
       DAQmxErrorRoutingSrcTermPXIStarXNotInStarTriggerSlot_Routing =  int32(-89158);
       DAQmxErrorRoutingSrcTermPXIStarXNotInSystemTimingSlot_Routing =  int32(-89157);
       DAQmxErrorRoutingSrcTermPXIStarInNonStarTriggerSlot_Routing =  int32(-89156);
       DAQmxErrorRoutingDestTermPXIStarInNonStarTriggerSlot_Routing =  int32(-89155);
       DAQmxErrorRoutingDestTermPXIStarInStarTriggerSlot_Routing =  int32(-89154);
       DAQmxErrorRoutingDestTermPXIStarInSystemTimingSlot_Routing =  int32(-89153);
       DAQmxErrorRoutingSrcTermPXIStarInStarTriggerSlot_Routing =  int32(-89152);
       DAQmxErrorRoutingSrcTermPXIStarInSystemTimingSlot_Routing =  int32(-89151);
       DAQmxErrorInvalidSignalModifier_Routing =  int32(-89150);
       DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2_Routing =  int32(-89149);
       DAQmxErrorRoutingDestTermPXIStarXNotInSlot2_Routing =  int32(-89148);
       DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2_Routing =  int32(-89147);
       DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove_Routing =  int32(-89146);
       DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove_Routing =  int32(-89145);
       DAQmxErrorRoutingDestTermPXIStarInSlot2_Routing =  int32(-89144);
       DAQmxErrorRoutingSrcTermPXIStarInSlot2_Routing =  int32(-89143);
       DAQmxErrorRoutingDestTermPXIChassisNotIdentified_Routing =  int32(-89142);
       DAQmxErrorRoutingSrcTermPXIChassisNotIdentified_Routing =  int32(-89141);
       DAQmxErrorTrigLineNotFoundSingleDevRoute_Routing =  int32(-89140);
       DAQmxErrorNoCommonTrigLineForRoute_Routing =  int32(-89139);
       DAQmxErrorResourcesInUseForRouteInTask_Routing =  int32(-89138);
       DAQmxErrorResourcesInUseForRoute_Routing =  int32(-89137);
       DAQmxErrorRouteNotSupportedByHW_Routing =  int32(-89136);
       DAQmxErrorResourcesInUseForInversionInTask_Routing =  int32(-89135);
       DAQmxErrorResourcesInUseForInversion_Routing =  int32(-89134);
       DAQmxErrorInversionNotSupportedByHW_Routing =  int32(-89133);
       DAQmxErrorResourcesInUseForProperty_Routing =  int32(-89132);
       DAQmxErrorRouteSrcAndDestSame_Routing =  int32(-89131);
       DAQmxErrorDevAbsentOrUnavailable_Routing =  int32(-89130);
       DAQmxErrorInvalidTerm_Routing =  int32(-89129);
       DAQmxErrorCannotTristateTerm_Routing =  int32(-89128);
       DAQmxErrorCannotTristateBusyTerm_Routing =  int32(-89127);
       DAQmxErrorCouldNotReserveRequestedTrigLine_Routing =  int32(-89126);
       DAQmxErrorTrigLineNotFound_Routing =  int32(-89125);
       DAQmxErrorRoutingPathNotAvailable_Routing =  int32(-89124);
       DAQmxErrorRoutingHardwareBusy_Routing =  int32(-89123);
       DAQmxErrorRequestedSignalInversionForRoutingNotPossible_Routing =  int32(-89122);
       DAQmxErrorInvalidRoutingDestinationTerminalName_Routing =  int32(-89121);
       DAQmxErrorInvalidRoutingSourceTerminalName_Routing =  int32(-89120);
       DAQmxErrorServiceLocatorNotAvailable_Routing =  int32(-88907);
       DAQmxErrorCouldNotConnectToServer_Routing =  int32(-88900);
       DAQmxErrorDeviceNameContainsSpacesOrPunctuation_Routing =  int32(-88720);
       DAQmxErrorDeviceNameContainsNonprintableCharacters_Routing =  int32(-88719);
       DAQmxErrorDeviceNameIsEmpty_Routing =  int32(-88718);
       DAQmxErrorDeviceNameNotFound_Routing =  int32(-88717);
       DAQmxErrorLocalRemoteDriverVersionMismatch_Routing =  int32(-88716);
       DAQmxErrorDuplicateDeviceName_Routing =  int32(-88715);
       DAQmxErrorRuntimeAborting_Routing =  int32(-88710);
       DAQmxErrorRuntimeAborted_Routing =  int32(-88709);
       DAQmxErrorResourceNotInPool_Routing =  int32(-88708);
       DAQmxErrorDriverDeviceGUIDNotFound_Routing =  int32(-88705);
       DAQmxErrorPALIsocStreamBufferError =  int32(-50807);
       DAQmxErrorPALInvalidAddressComponent =  int32(-50806);
       DAQmxErrorPALSharingViolation =  int32(-50805);
       DAQmxErrorPALInvalidDeviceState =  int32(-50804);
       DAQmxErrorPALConnectionReset =  int32(-50803);
       DAQmxErrorPALConnectionAborted =  int32(-50802);
       DAQmxErrorPALConnectionRefused =  int32(-50801);
       DAQmxErrorPALBusResetOccurred =  int32(-50800);
       DAQmxErrorPALWaitInterrupted =  int32(-50700);
       DAQmxErrorPALMessageUnderflow =  int32(-50651);
       DAQmxErrorPALMessageOverflow =  int32(-50650);
       DAQmxErrorPALThreadAlreadyDead =  int32(-50604);
       DAQmxErrorPALThreadStackSizeNotSupported =  int32(-50603);
       DAQmxErrorPALThreadControllerIsNotThreadCreator =  int32(-50602);
       DAQmxErrorPALThreadHasNoThreadObject =  int32(-50601);
       DAQmxErrorPALThreadCouldNotRun =  int32(-50600);
       DAQmxErrorPALSyncAbandoned =  int32(-50551);
       DAQmxErrorPALSyncTimedOut =  int32(-50550);
       DAQmxErrorPALReceiverSocketInvalid =  int32(-50503);
       DAQmxErrorPALSocketListenerInvalid =  int32(-50502);
       DAQmxErrorPALSocketListenerAlreadyRegistered =  int32(-50501);
       DAQmxErrorPALDispatcherAlreadyExported =  int32(-50500);
       DAQmxErrorPALDMALinkEventMissed =  int32(-50450);
       DAQmxErrorPALBusError =  int32(-50413);
       DAQmxErrorPALRetryLimitExceeded =  int32(-50412);
       DAQmxErrorPALTransferOverread =  int32(-50411);
       DAQmxErrorPALTransferOverwritten =  int32(-50410);
       DAQmxErrorPALPhysicalBufferFull =  int32(-50409);
       DAQmxErrorPALPhysicalBufferEmpty =  int32(-50408);
       DAQmxErrorPALLogicalBufferFull =  int32(-50407);
       DAQmxErrorPALLogicalBufferEmpty =  int32(-50406);
       DAQmxErrorPALTransferAborted =  int32(-50405);
       DAQmxErrorPALTransferStopped =  int32(-50404);
       DAQmxErrorPALTransferInProgress =  int32(-50403);
       DAQmxErrorPALTransferNotInProgress =  int32(-50402);
       DAQmxErrorPALCommunicationsFault =  int32(-50401);
       DAQmxErrorPALTransferTimedOut =  int32(-50400);
       DAQmxErrorPALMemoryHeapNotEmpty =  int32(-50355);
       DAQmxErrorPALMemoryBlockCheckFailed =  int32(-50354);
       DAQmxErrorPALMemoryPageLockFailed =  int32(-50353);
       DAQmxErrorPALMemoryFull =  int32(-50352);
       DAQmxErrorPALMemoryAlignmentFault =  int32(-50351);
       DAQmxErrorPALMemoryConfigurationFault =  int32(-50350);
       DAQmxErrorPALDeviceInitializationFault =  int32(-50303);
       DAQmxErrorPALDeviceNotSupported =  int32(-50302);
       DAQmxErrorPALDeviceUnknown =  int32(-50301);
       DAQmxErrorPALDeviceNotFound =  int32(-50300);
       DAQmxErrorPALFeatureDisabled =  int32(-50265);
       DAQmxErrorPALComponentBusy =  int32(-50264);
       DAQmxErrorPALComponentAlreadyInstalled =  int32(-50263);
       DAQmxErrorPALComponentNotUnloadable =  int32(-50262);
       DAQmxErrorPALComponentNeverLoaded =  int32(-50261);
       DAQmxErrorPALComponentAlreadyLoaded =  int32(-50260);
       DAQmxErrorPALComponentCircularDependency =  int32(-50259);
       DAQmxErrorPALComponentInitializationFault =  int32(-50258);
       DAQmxErrorPALComponentImageCorrupt =  int32(-50257);
       DAQmxErrorPALFeatureNotSupported =  int32(-50256);
       DAQmxErrorPALFunctionNotFound =  int32(-50255);
       DAQmxErrorPALFunctionObsolete =  int32(-50254);
       DAQmxErrorPALComponentTooNew =  int32(-50253);
       DAQmxErrorPALComponentTooOld =  int32(-50252);
       DAQmxErrorPALComponentNotFound =  int32(-50251);
       DAQmxErrorPALVersionMismatch =  int32(-50250);
       DAQmxErrorPALFileFault =  int32(-50209);
       DAQmxErrorPALFileWriteFault =  int32(-50208);
       DAQmxErrorPALFileReadFault =  int32(-50207);
       DAQmxErrorPALFileSeekFault =  int32(-50206);
       DAQmxErrorPALFileCloseFault =  int32(-50205);
       DAQmxErrorPALFileOpenFault =  int32(-50204);
       DAQmxErrorPALDiskFull =  int32(-50203);
       DAQmxErrorPALOSFault =  int32(-50202);
       DAQmxErrorPALOSInitializationFault =  int32(-50201);
       DAQmxErrorPALOSUnsupported =  int32(-50200);
       DAQmxErrorPALCalculationOverflow =  int32(-50175);
       DAQmxErrorPALHardwareFault =  int32(-50152);
       DAQmxErrorPALFirmwareFault =  int32(-50151);
       DAQmxErrorPALSoftwareFault =  int32(-50150);
       DAQmxErrorPALMessageQueueFull =  int32(-50108);
       DAQmxErrorPALResourceAmbiguous =  int32(-50107);
       DAQmxErrorPALResourceBusy =  int32(-50106);
       DAQmxErrorPALResourceInitialized =  int32(-50105);
       DAQmxErrorPALResourceNotInitialized =  int32(-50104);
       DAQmxErrorPALResourceReserved =  int32(-50103);
       DAQmxErrorPALResourceNotReserved =  int32(-50102);
       DAQmxErrorPALResourceNotAvailable =  int32(-50101);
       DAQmxErrorPALResourceOwnedBySystem =  int32(-50100);
       DAQmxErrorPALBadToken =  int32(-50020);
       DAQmxErrorPALBadThreadMultitask =  int32(-50019);
       DAQmxErrorPALBadLibrarySpecifier =  int32(-50018);
       DAQmxErrorPALBadAddressSpace =  int32(-50017);
       DAQmxErrorPALBadWindowType =  int32(-50016);
       DAQmxErrorPALBadAddressClass =  int32(-50015);
       DAQmxErrorPALBadWriteCount =  int32(-50014);
       DAQmxErrorPALBadWriteOffset =  int32(-50013);
       DAQmxErrorPALBadWriteMode =  int32(-50012);
       DAQmxErrorPALBadReadCount =  int32(-50011);
       DAQmxErrorPALBadReadOffset =  int32(-50010);
       DAQmxErrorPALBadReadMode =  int32(-50009);
       DAQmxErrorPALBadCount =  int32(-50008);
       DAQmxErrorPALBadOffset =  int32(-50007);
       DAQmxErrorPALBadMode =  int32(-50006);
       DAQmxErrorPALBadDataSize =  int32(-50005);
       DAQmxErrorPALBadPointer =  int32(-50004);
       DAQmxErrorPALBadSelector =  int32(-50003);
       DAQmxErrorPALBadDevice =  int32(-50002);
       DAQmxErrorPALIrrelevantAttribute =  int32(-50001);
       DAQmxErrorPALValueConflict =  int32(-50000);
       DAQmxErrorRetryCall =  int32(-26853);
       DAQmxErrorFileDoesNotExist =  int32(-26852);
       DAQmxErrorGenerationDisabled =  int32(-26851);
       DAQmxErrorAlreadyInitialized =  int32(-26850);
       DAQmxErrorInvalidHandle =  int32(-26805);
       DAQmxErrorServiceNotRunning =  int32(-26804);
       DAQmxErrorRecursiveCall =  int32(-26803);
       DAQmxErrorTimeout =  int32(-26802);
       DAQmxErrorUnspecifiedError =  int32(-26801);
       DAQmxErrorPxiResmanMxsPxiSystemNotFound =  int32(-26600);
       DAQmxErrorPxiResmanPciDescriptionStringParseError =  int32(-26550);
       DAQmxErrorPxiResmanModuleParseError =  int32(-26500);
       DAQmxErrorPxiResmanSystemDescriptionSpecLimitation =  int32(-26403);
       DAQmxErrorPxiResmanSystemDescriptionWriteError =  int32(-26402);
       DAQmxErrorPxiResmanSystemDescriptionParseError =  int32(-26401);
       DAQmxErrorPxiResmanSystemDescriptionFileNotFound =  int32(-26400);
       DAQmxErrorPxiResmanControllerParseError =  int32(-26302);
       DAQmxErrorPxiResmanControllerTypeInvalid =  int32(-26301);
       DAQmxErrorPxiResmanControllerFileNotFound =  int32(-26300);
       DAQmxErrorPxiResmanChassisTriggerParseError =  int32(-26206);
       DAQmxErrorPxiResmanChassisBridgeParseError =  int32(-26205);
       DAQmxErrorPxiResmanChassisSlotParseError =  int32(-26204);
       DAQmxErrorPxiResmanChassisSegmentParseError =  int32(-26203);
       DAQmxErrorPxiResmanChassisParseError =  int32(-26202);
       DAQmxErrorPxiResmanChassisBridgeNotFound =  int32(-26201);
       DAQmxErrorPxiResmanChassisFileNotFound =  int32(-26200);
       DAQmxErrorPxiResmanSystemNotInitialized =  int32(-26102);
       DAQmxErrorPxiResmanInvalidConfiguration =  int32(-26101);
       DAQmxErrorPxiResmanAllocationError =  int32(-26100);
       DAQmxWarningPxiResmanAllocationError =  int32(26100);
       DAQmxWarningPxiResmanInvalidConfiguration =  int32(26101);
       DAQmxWarningPxiResmanSystemNotInitialized =  int32(26102);
       DAQmxWarningPxiResmanChassisFileNotFound =  int32(26200);
       DAQmxWarningPxiResmanChassisBridgeNotFound =  int32(26201);
       DAQmxWarningPxiResmanChassisParseError =  int32(26202);
       DAQmxWarningPxiResmanChassisSegmentParseError =  int32(26203);
       DAQmxWarningPxiResmanChassisSlotParseError =  int32(26204);
       DAQmxWarningPxiResmanChassisBridgeParseError =  int32(26205);
       DAQmxWarningPxiResmanChassisTriggerParseError =  int32(26206);
       DAQmxWarningPxiResmanControllerFileNotFound =  int32(26300);
       DAQmxWarningPxiResmanControllerTypeInvalid =  int32(26301);
       DAQmxWarningPxiResmanControllerParseError =  int32(26302);
       DAQmxWarningPxiResmanSystemDescriptionFileNotFound =  int32(26400);
       DAQmxWarningPxiResmanSystemDescriptionParseError =  int32(26401);
       DAQmxWarningPxiResmanSystemDescriptionWriteError =  int32(26402);
       DAQmxWarningPxiResmanSystemDescriptionSpecLimitation =  int32(26403);
       DAQmxWarningPxiResmanModuleParseError =  int32(26500);
       DAQmxWarningPxiResmanPciDescriptionStringParseError =  int32(26550);
       DAQmxWarningPxiResmanMxsPxiSystemNotFound =  int32(26600);
       DAQmxWarningUnspecifiedError =  int32(26801);
       DAQmxWarningTimeout =  int32(26802);
       DAQmxWarningRecursiveCall =  int32(26803);
       DAQmxWarningServiceNotRunning =  int32(26804);
       DAQmxWarningInvalidHandle =  int32(26805);
       DAQmxWarningAlreadyInitialized =  int32(26850);
       DAQmxWarningGenerationDisabled =  int32(26851);
       DAQmxWarningFileDoesNotExist =  int32(26852);
       DAQmxWarningRetryCall =  int32(26853);
       DAQmxWarningPALValueConflict =  int32(50000);
       DAQmxWarningPALIrrelevantAttribute =  int32(50001);
       DAQmxWarningPALBadDevice =  int32(50002);
       DAQmxWarningPALBadSelector =  int32(50003);
       DAQmxWarningPALBadPointer =  int32(50004);
       DAQmxWarningPALBadDataSize =  int32(50005);
       DAQmxWarningPALBadMode =  int32(50006);
       DAQmxWarningPALBadOffset =  int32(50007);
       DAQmxWarningPALBadCount =  int32(50008);
       DAQmxWarningPALBadReadMode =  int32(50009);
       DAQmxWarningPALBadReadOffset =  int32(50010);
       DAQmxWarningPALBadReadCount =  int32(50011);
       DAQmxWarningPALBadWriteMode =  int32(50012);
       DAQmxWarningPALBadWriteOffset =  int32(50013);
       DAQmxWarningPALBadWriteCount =  int32(50014);
       DAQmxWarningPALBadAddressClass =  int32(50015);
       DAQmxWarningPALBadWindowType =  int32(50016);
       DAQmxWarningPALBadThreadMultitask =  int32(50019);
       DAQmxWarningPALResourceOwnedBySystem =  int32(50100);
       DAQmxWarningPALResourceNotAvailable =  int32(50101);
       DAQmxWarningPALResourceNotReserved =  int32(50102);
       DAQmxWarningPALResourceReserved =  int32(50103);
       DAQmxWarningPALResourceNotInitialized =  int32(50104);
       DAQmxWarningPALResourceInitialized =  int32(50105);
       DAQmxWarningPALResourceBusy =  int32(50106);
       DAQmxWarningPALResourceAmbiguous =  int32(50107);
       DAQmxWarningPALFirmwareFault =  int32(50151);
       DAQmxWarningPALHardwareFault =  int32(50152);
       DAQmxWarningPALOSUnsupported =  int32(50200);
       DAQmxWarningPALOSFault =  int32(50202);
       DAQmxWarningPALFunctionObsolete =  int32(50254);
       DAQmxWarningPALFunctionNotFound =  int32(50255);
       DAQmxWarningPALFeatureNotSupported =  int32(50256);
       DAQmxWarningPALComponentInitializationFault =  int32(50258);
       DAQmxWarningPALComponentAlreadyLoaded =  int32(50260);
       DAQmxWarningPALComponentNotUnloadable =  int32(50262);
       DAQmxWarningPALMemoryAlignmentFault =  int32(50351);
       DAQmxWarningPALMemoryHeapNotEmpty =  int32(50355);
       DAQmxWarningPALTransferNotInProgress =  int32(50402);
       DAQmxWarningPALTransferInProgress =  int32(50403);
       DAQmxWarningPALTransferStopped =  int32(50404);
       DAQmxWarningPALTransferAborted =  int32(50405);
       DAQmxWarningPALLogicalBufferEmpty =  int32(50406);
       DAQmxWarningPALLogicalBufferFull =  int32(50407);
       DAQmxWarningPALPhysicalBufferEmpty =  int32(50408);
       DAQmxWarningPALPhysicalBufferFull =  int32(50409);
       DAQmxWarningPALTransferOverwritten =  int32(50410);
       DAQmxWarningPALTransferOverread =  int32(50411);
       DAQmxWarningPALDispatcherAlreadyExported =  int32(50500);
       DAQmxWarningPALSyncAbandoned =  int32(50551);

        % Custom Constants
    end
    methods (Static)

        function [status, callbackData] = DAQmxRegisterEveryNSamplesEvent(task, everyNsamplesEventType, nSamples, options, callbackFunction, callbackData)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(task, {'uint64'}, {'scalar'}, 'DAQmxRegisterEveryNSamplesEvent', 'task', 1);
            validateattributes(everyNsamplesEventType, {'int32'}, {'scalar'}, 'DAQmxRegisterEveryNSamplesEvent', 'everyNsamplesEventType', 2);
            validateattributes(nSamples, {'uint32'}, {'scalar'}, 'DAQmxRegisterEveryNSamplesEvent', 'nSamples', 3);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxRegisterEveryNSamplesEvent', 'options', 4);
            validateattributes(callbackFunction, {'int32'}, {'scalar'}, 'DAQmxRegisterEveryNSamplesEvent', 'callbackFunction', 5);
            validateattributes(callbackData, {'uint32'}, {'vector'}, 'DAQmxRegisterEveryNSamplesEvent', 'callbackData', 6);
                [status, callbackData]= mexNIDAQmx('DAQmxRegisterEveryNSamplesEvent', task, everyNsamplesEventType, nSamples, options, callbackFunction, callbackData);
        end

        function [status, callbackData] = DAQmxRegisterDoneEvent(task, options, callbackFunction, callbackData)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(task, {'uint64'}, {'scalar'}, 'DAQmxRegisterDoneEvent', 'task', 1);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxRegisterDoneEvent', 'options', 2);
            validateattributes(callbackFunction, {'int32'}, {'scalar'}, 'DAQmxRegisterDoneEvent', 'callbackFunction', 3);
            validateattributes(callbackData, {'uint32'}, {'vector'}, 'DAQmxRegisterDoneEvent', 'callbackData', 4);
                [status, callbackData]= mexNIDAQmx('DAQmxRegisterDoneEvent', task, options, callbackFunction, callbackData);
        end

        function [status, callbackData] = DAQmxRegisterSignalEvent(task, signalID, options, callbackFunction, callbackData)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(task, {'uint64'}, {'scalar'}, 'DAQmxRegisterSignalEvent', 'task', 1);
            validateattributes(signalID, {'int32'}, {'scalar'}, 'DAQmxRegisterSignalEvent', 'signalID', 2);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxRegisterSignalEvent', 'options', 3);
            validateattributes(callbackFunction, {'int32'}, {'scalar'}, 'DAQmxRegisterSignalEvent', 'callbackFunction', 4);
            validateattributes(callbackData, {'uint32'}, {'vector'}, 'DAQmxRegisterSignalEvent', 'callbackData', 5);
                [status, callbackData]= mexNIDAQmx('DAQmxRegisterSignalEvent', task, signalID, options, callbackFunction, callbackData);
        end

        function [status, value] = DAQmxGetTaskAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetTaskAttribute', taskHandle, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetChanAttribute(taskHandle, channel, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetChanAttribute', taskHandle, channel, attribute, value, varargs);
        end

        function [status] = DAQmxSetChanAttribute(taskHandle, channel, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetChanAttribute', taskHandle, channel, attribute, varargs);
        end

        function [status, value] = DAQmxGetTimingAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetTimingAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetTimingAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetTimingAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetTimingAttributeEx(taskHandle, deviceNames, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetTimingAttributeEx', taskHandle, deviceNames, attribute, value, varargs);
        end

        function [status] = DAQmxSetTimingAttributeEx(taskHandle, deviceNames, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetTimingAttributeEx', taskHandle, deviceNames, attribute, varargs);
        end

        function [status, value] = DAQmxGetTrigAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetTrigAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetTrigAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetTrigAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetReadAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetReadAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetReadAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetReadAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetWriteAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetWriteAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetWriteAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetWriteAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetExportedSignalAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetExportedSignalAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetExportedSignalAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetExportedSignalAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetScaleAttribute(scaleName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetScaleAttribute', scaleName, attribute, value, varargs);
        end

        function [status] = DAQmxSetScaleAttribute(scaleName, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetScaleAttribute', scaleName, attribute, varargs);
        end

        function [status] = DAQmxSetBufferAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetBufferAttribute', taskHandle, attribute, varargs);
        end

        function [status] = DAQmxSetSwitchChanAttribute(switchChannelName, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetSwitchChanAttribute', switchChannelName, attribute, varargs);
        end

        function [status, value] = DAQmxGetSwitchDeviceAttribute(deviceName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetSwitchDeviceAttribute', deviceName, attribute, value, varargs);
        end

        function [status] = DAQmxSetSwitchDeviceAttribute(deviceName, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetSwitchDeviceAttribute', deviceName, attribute, varargs);
        end

        function [status] = DAQmxSetSwitchScanAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetSwitchScanAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetDeviceAttribute(deviceName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetDeviceAttribute', deviceName, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetWatchdogAttribute(taskHandle, lines, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetWatchdogAttribute', taskHandle, lines, attribute, value, varargs);
        end

        function [status] = DAQmxSetWatchdogAttribute(taskHandle, lines, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetWatchdogAttribute', taskHandle, lines, attribute, varargs);
        end

        function [status, value] = DAQmxGetCalInfoAttribute(deviceName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetCalInfoAttribute', deviceName, attribute, value, varargs);
        end

        function [status] = DAQmxSetCalInfoAttribute(deviceName, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetCalInfoAttribute', deviceName, attribute, varargs);
        end

        function [status, value] = DAQmxGetPhysicalChanAttribute(physicalChannel, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetPhysicalChanAttribute', physicalChannel, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetRealTimeAttribute(taskHandle, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetRealTimeAttribute', taskHandle, attribute, value, varargs);
        end

        function [status] = DAQmxSetRealTimeAttribute(taskHandle, attribute, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetRealTimeAttribute', taskHandle, attribute, varargs);
        end

        function [status, value] = DAQmxGetPersistedTaskAttribute(taskName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetPersistedTaskAttribute', taskName, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetPersistedChanAttribute(channel, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetPersistedChanAttribute', channel, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetPersistedScaleAttribute(scaleName, attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetPersistedScaleAttribute', scaleName, attribute, value, varargs);
        end

        function [status, value] = DAQmxGetSystemInfoAttribute(attribute, value, varargs)
            % Not validating parameters due to VARARGS
                [status, value]= mexNIDAQmx('DAQmxGetSystemInfoAttribute', attribute, value, varargs);
        end

        function [status, state] = DAQmxGetDigitalPowerUpStates(deviceName, channelName, state, varargs)
            % Not validating parameters due to VARARGS
                [status, state]= mexNIDAQmx('DAQmxGetDigitalPowerUpStates', deviceName, channelName, state, varargs);
        end

        function [status] = DAQmxSetDigitalPullUpPullDownStates(deviceName, channelName, state, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetDigitalPullUpPullDownStates', deviceName, channelName, state, varargs);
        end

        function [status, state] = DAQmxGetDigitalPullUpPullDownStates(deviceName, channelName, state, varargs)
            % Not validating parameters due to VARARGS
                [status, state]= mexNIDAQmx('DAQmxGetDigitalPullUpPullDownStates', deviceName, channelName, state, varargs);
        end

        function [status, state] = DAQmxGetAnalogPowerUpStates(deviceName, channelName, state, channelType, varargs)
            % Not validating parameters due to VARARGS
                [status, state]= mexNIDAQmx('DAQmxGetAnalogPowerUpStates', deviceName, channelName, state, channelType, varargs);
        end

        function [status, taskHandle] = DAQmxCreateWatchdogTimerTask(deviceName, taskName, taskHandle, timeout, lines, expState, varargs)
            % Not validating parameters due to VARARGS
                [status, taskHandle]= mexNIDAQmx('DAQmxCreateWatchdogTimerTask', deviceName, taskName, taskHandle, timeout, lines, expState, varargs);
        end

        function [status] = DAQmxSetDigitalPowerUpStates(deviceName, channelNames, state, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetDigitalPowerUpStates', deviceName, channelNames, state, varargs);
        end

        function [status] = DAQmxSetAnalogPowerUpStates(deviceName, channelNames, state, channelType, varargs)
            % Not validating parameters due to VARARGS
                [status]= mexNIDAQmx('DAQmxSetAnalogPowerUpStates', deviceName, channelNames, state, channelType, varargs);
        end

        function [status] = setDebugOutput(debugOutputIn)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(debugOutputIn, {'uint32'}, {'scalar'}, 'setDebugOutput', 'debugOutputIn', 1);
                [status]= mexNIDAQmx('setDebugOutput', debugOutputIn);
        end

        function [status, debugOutputOut] = getDebugOutput(debugOutputOut)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(debugOutputOut, {'uint32'}, {'vector'}, 'getDebugOutput', 'debugOutputOut', 1);
                [status, debugOutputOut]= mexNIDAQmx('getDebugOutput', debugOutputOut);
        end

        function [status] = lockMex()
            error(nargchk(0, 0, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
                [status]= mexNIDAQmx('lockMex');
        end

        function [status] = unlockMex()
            error(nargchk(0, 0, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
                [status]= mexNIDAQmx('unlockMex');
        end

        function [status, taskHandle] = DAQmxLoadTask(taskName, taskHandle)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxLoadTask', 'taskName', 1);
            validateattributes(taskHandle, {'uint64'}, {'vector'}, 'DAQmxLoadTask', 'taskHandle', 2);
                [status, taskHandle]= mexNIDAQmx('DAQmxLoadTask', taskName, taskHandle);
        end

        function [status, taskHandle] = DAQmxCreateTask(taskName, taskHandle)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxCreateTask', 'taskName', 1);
            validateattributes(taskHandle, {'uint64'}, {'vector'}, 'DAQmxCreateTask', 'taskHandle', 2);
                [status, taskHandle]= mexNIDAQmx('DAQmxCreateTask', taskName, taskHandle);
        end

        function [status] = DAQmxAddGlobalChansToTask(taskHandle, channelNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxAddGlobalChansToTask', 'taskHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAddGlobalChansToTask', 'channelNames', 2);
                [status]= mexNIDAQmx('DAQmxAddGlobalChansToTask', taskHandle, channelNames);
        end

        function [status] = DAQmxStartTask(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxStartTask', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxStartTask', taskHandle);
        end

        function [status] = DAQmxStopTask(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxStopTask', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxStopTask', taskHandle);
        end

        function [status] = DAQmxClearTask(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxClearTask', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxClearTask', taskHandle);
        end

        function [status] = DAQmxWaitUntilTaskDone(taskHandle, timeToWait)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWaitUntilTaskDone', 'taskHandle', 1);
            validateattributes(timeToWait, {'double'}, {'scalar'}, 'DAQmxWaitUntilTaskDone', 'timeToWait', 2);
                [status]= mexNIDAQmx('DAQmxWaitUntilTaskDone', taskHandle, timeToWait);
        end

        function [status, isTaskDone] = DAQmxIsTaskDone(taskHandle, isTaskDone)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxIsTaskDone', 'taskHandle', 1);
            validateattributes(isTaskDone, {'uint32'}, {'vector'}, 'DAQmxIsTaskDone', 'isTaskDone', 2);
                [status, isTaskDone]= mexNIDAQmx('DAQmxIsTaskDone', taskHandle, isTaskDone);
        end

        function [status] = DAQmxTaskControl(taskHandle, action)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxTaskControl', 'taskHandle', 1);
            validateattributes(action, {'int32'}, {'scalar'}, 'DAQmxTaskControl', 'action', 2);
                [status]= mexNIDAQmx('DAQmxTaskControl', taskHandle, action);
        end

        function [status, buffer] = DAQmxGetNthTaskChannel(taskHandle, index, buffer, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetNthTaskChannel', 'taskHandle', 1);
            validateattributes(index, {'uint32'}, {'scalar'}, 'DAQmxGetNthTaskChannel', 'index', 2);
            validateattributes(buffer, {'char'}, {'vector'}, 'DAQmxGetNthTaskChannel', 'buffer', 3);
            validateattributes(bufferSize, {'int32'}, {'scalar'}, 'DAQmxGetNthTaskChannel', 'bufferSize', 4);
                [status, buffer]= mexNIDAQmx('DAQmxGetNthTaskChannel', taskHandle, index, buffer, bufferSize);
        end

        function [status, buffer] = DAQmxGetNthTaskDevice(taskHandle, index, buffer, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetNthTaskDevice', 'taskHandle', 1);
            validateattributes(index, {'uint32'}, {'scalar'}, 'DAQmxGetNthTaskDevice', 'index', 2);
            validateattributes(buffer, {'char'}, {'vector'}, 'DAQmxGetNthTaskDevice', 'buffer', 3);
            validateattributes(bufferSize, {'int32'}, {'scalar'}, 'DAQmxGetNthTaskDevice', 'bufferSize', 4);
                [status, buffer]= mexNIDAQmx('DAQmxGetNthTaskDevice', taskHandle, index, buffer, bufferSize);
        end

        function [status] = DAQmxCreateAIVoltageChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIVoltageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChan', 'units', 7);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChan', 'customScaleName', 8);
                [status]= mexNIDAQmx('DAQmxCreateAIVoltageChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateAICurrentChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAICurrentChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAICurrentChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'units', 7);
            validateattributes(shuntResistorLoc, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'shuntResistorLoc', 8);
            validateattributes(extShuntResistorVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentChan', 'extShuntResistorVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAICurrentChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateAICurrentChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
        end

        function [status] = DAQmxCreateAIVoltageRMSChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIVoltageRMSChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageRMSChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageRMSChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageRMSChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageRMSChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageRMSChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageRMSChan', 'units', 7);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageRMSChan', 'customScaleName', 8);
                [status]= mexNIDAQmx('DAQmxCreateAIVoltageRMSChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateAICurrentRMSChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAICurrentRMSChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAICurrentRMSChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'units', 7);
            validateattributes(shuntResistorLoc, {'int32'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'shuntResistorLoc', 8);
            validateattributes(extShuntResistorVal, {'double'}, {'scalar'}, 'DAQmxCreateAICurrentRMSChan', 'extShuntResistorVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAICurrentRMSChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateAICurrentRMSChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
        end

        function [status] = DAQmxCreateAIThrmcplChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmcplChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmcplChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'units', 6);
            validateattributes(thermocoupleType, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'thermocoupleType', 7);
            validateattributes(cjcSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'cjcSource', 8);
            validateattributes(cjcVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmcplChan', 'cjcVal', 9);
            validateattributes(cjcChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmcplChan', 'cjcChannel', 10);
                [status]= mexNIDAQmx('DAQmxCreateAIThrmcplChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel);
        end

        function [status] = DAQmxCreateAIRTDChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIRTDChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIRTDChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'units', 6);
            validateattributes(rtdType, {'int32'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'rtdType', 7);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'resistanceConfig', 8);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'currentExcitSource', 9);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'currentExcitVal', 10);
            validateattributes(r0, {'double'}, {'scalar'}, 'DAQmxCreateAIRTDChan', 'r0', 11);
                [status]= mexNIDAQmx('DAQmxCreateAIRTDChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0);
        end

        function [status] = DAQmxCreateAIThrmstrChanIex(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c)
            error(nargchk(12, 12, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmstrChanIex', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmstrChanIex', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'resistanceConfig', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'currentExcitVal', 9);
            validateattributes(a, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'a', 10);
            validateattributes(b, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'b', 11);
            validateattributes(c, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanIex', 'c', 12);
                [status]= mexNIDAQmx('DAQmxCreateAIThrmstrChanIex', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c);
        end

        function [status] = DAQmxCreateAIThrmstrChanVex(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1)
            error(nargchk(13, 13, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmstrChanVex', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIThrmstrChanVex', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'resistanceConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'voltageExcitVal', 9);
            validateattributes(a, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'a', 10);
            validateattributes(b, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'b', 11);
            validateattributes(c, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'c', 12);
            validateattributes(r1, {'double'}, {'scalar'}, 'DAQmxCreateAIThrmstrChanVex', 'r1', 13);
                [status]= mexNIDAQmx('DAQmxCreateAIThrmstrChanVex', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1);
        end

        function [status] = DAQmxCreateAIFreqVoltageChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIFreqVoltageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIFreqVoltageChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'units', 6);
            validateattributes(thresholdLevel, {'double'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'thresholdLevel', 7);
            validateattributes(hysteresis, {'double'}, {'scalar'}, 'DAQmxCreateAIFreqVoltageChan', 'hysteresis', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIFreqVoltageChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateAIFreqVoltageChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName);
        end

        function [status] = DAQmxCreateAIResistanceChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIResistanceChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIResistanceChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'resistanceConfig', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIResistanceChan', 'currentExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIResistanceChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateAIResistanceChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateAIStrainGageChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName)
            error(nargchk(15, 15, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIStrainGageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIStrainGageChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'units', 6);
            validateattributes(strainConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'strainConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'voltageExcitVal', 9);
            validateattributes(gageFactor, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'gageFactor', 10);
            validateattributes(initialBridgeVoltage, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'initialBridgeVoltage', 11);
            validateattributes(nominalGageResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'nominalGageResistance', 12);
            validateattributes(poissonRatio, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'poissonRatio', 13);
            validateattributes(leadWireResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIStrainGageChan', 'leadWireResistance', 14);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIStrainGageChan', 'customScaleName', 15);
                [status]= mexNIDAQmx('DAQmxCreateAIStrainGageChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName);
        end

        function [status] = DAQmxCreateAIForceBridgeTwoPointLinChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'nominalBridgeResistance', 10);
            validateattributes(firstElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'firstElectricalVal', 11);
            validateattributes(secondElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'secondElectricalVal', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'electricalUnits', 13);
            validateattributes(firstPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'firstPhysicalVal', 14);
            validateattributes(secondPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'secondPhysicalVal', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTwoPointLinChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIForceBridgeTwoPointLinChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIForceBridgeTableChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTableChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTableChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'nominalBridgeResistance', 10);
            validateattributes(electricalVals, {'double'}, {'vector'}, 'DAQmxCreateAIForceBridgeTableChan', 'electricalVals', 11);
            validateattributes(numElectricalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'numElectricalVals', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'electricalUnits', 13);
            validateattributes(physicalVals, {'double'}, {'vector'}, 'DAQmxCreateAIForceBridgeTableChan', 'physicalVals', 14);
            validateattributes(numPhysicalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'numPhysicalVals', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgeTableChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgeTableChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIForceBridgeTableChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIForceBridgePolynomialChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'nominalBridgeResistance', 10);
            validateattributes(forwardCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'forwardCoeffs', 11);
            validateattributes(numForwardCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'numForwardCoeffs', 12);
            validateattributes(reverseCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'reverseCoeffs', 13);
            validateattributes(numReverseCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'numReverseCoeffs', 14);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'electricalUnits', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIForceBridgePolynomialChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIForceBridgePolynomialChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIPressureBridgeTwoPointLinChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'nominalBridgeResistance', 10);
            validateattributes(firstElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'firstElectricalVal', 11);
            validateattributes(secondElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'secondElectricalVal', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'electricalUnits', 13);
            validateattributes(firstPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'firstPhysicalVal', 14);
            validateattributes(secondPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'secondPhysicalVal', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTwoPointLinChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIPressureBridgeTwoPointLinChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIPressureBridgeTableChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTableChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTableChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'nominalBridgeResistance', 10);
            validateattributes(electricalVals, {'double'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTableChan', 'electricalVals', 11);
            validateattributes(numElectricalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'numElectricalVals', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'electricalUnits', 13);
            validateattributes(physicalVals, {'double'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTableChan', 'physicalVals', 14);
            validateattributes(numPhysicalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'numPhysicalVals', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgeTableChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgeTableChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIPressureBridgeTableChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIPressureBridgePolynomialChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'nominalBridgeResistance', 10);
            validateattributes(forwardCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'forwardCoeffs', 11);
            validateattributes(numForwardCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'numForwardCoeffs', 12);
            validateattributes(reverseCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'reverseCoeffs', 13);
            validateattributes(numReverseCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'numReverseCoeffs', 14);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'electricalUnits', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPressureBridgePolynomialChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAIPressureBridgePolynomialChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAITorqueBridgeTwoPointLinChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'nominalBridgeResistance', 10);
            validateattributes(firstElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'firstElectricalVal', 11);
            validateattributes(secondElectricalVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'secondElectricalVal', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'electricalUnits', 13);
            validateattributes(firstPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'firstPhysicalVal', 14);
            validateattributes(secondPhysicalVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'secondPhysicalVal', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTwoPointLinChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAITorqueBridgeTwoPointLinChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAITorqueBridgeTableChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTableChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTableChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'nominalBridgeResistance', 10);
            validateattributes(electricalVals, {'double'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTableChan', 'electricalVals', 11);
            validateattributes(numElectricalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'numElectricalVals', 12);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'electricalUnits', 13);
            validateattributes(physicalVals, {'double'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTableChan', 'physicalVals', 14);
            validateattributes(numPhysicalVals, {'uint32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'numPhysicalVals', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgeTableChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgeTableChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAITorqueBridgeTableChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAITorqueBridgePolynomialChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName)
            error(nargchk(17, 17, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'nominalBridgeResistance', 10);
            validateattributes(forwardCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'forwardCoeffs', 11);
            validateattributes(numForwardCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'numForwardCoeffs', 12);
            validateattributes(reverseCoeffs, {'double'}, {'vector'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'reverseCoeffs', 13);
            validateattributes(numReverseCoeffs, {'uint32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'numReverseCoeffs', 14);
            validateattributes(electricalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'electricalUnits', 15);
            validateattributes(physicalUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'physicalUnits', 16);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAITorqueBridgePolynomialChan', 'customScaleName', 17);
                [status]= mexNIDAQmx('DAQmxCreateAITorqueBridgePolynomialChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIBridgeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIBridgeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIBridgeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'units', 6);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'bridgeConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'voltageExcitVal', 9);
            validateattributes(nominalBridgeResistance, {'double'}, {'scalar'}, 'DAQmxCreateAIBridgeChan', 'nominalBridgeResistance', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIBridgeChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateAIBridgeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName);
        end

        function [status] = DAQmxCreateAIVoltageChanWithExcit(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName)
            error(nargchk(12, 12, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChanWithExcit', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChanWithExcit', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'units', 7);
            validateattributes(bridgeConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'bridgeConfig', 8);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'voltageExcitSource', 9);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'voltageExcitVal', 10);
            validateattributes(useExcitForScaling, {'uint32'}, {'scalar'}, 'DAQmxCreateAIVoltageChanWithExcit', 'useExcitForScaling', 11);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIVoltageChanWithExcit', 'customScaleName', 12);
                [status]= mexNIDAQmx('DAQmxCreateAIVoltageChanWithExcit', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName);
        end

        function [status] = DAQmxCreateAITempBuiltInSensorChan(taskHandle, physicalChannel, nameToAssignToChannel, units)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAITempBuiltInSensorChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAITempBuiltInSensorChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAITempBuiltInSensorChan', 'nameToAssignToChannel', 3);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAITempBuiltInSensorChan', 'units', 4);
                [status]= mexNIDAQmx('DAQmxCreateAITempBuiltInSensorChan', taskHandle, physicalChannel, nameToAssignToChannel, units);
        end

        function [status] = DAQmxCreateAIAccelChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(12, 12, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIAccelChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIAccelChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'units', 7);
            validateattributes(sensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'sensitivity', 8);
            validateattributes(sensitivityUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'sensitivityUnits', 9);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'currentExcitSource', 10);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIAccelChan', 'currentExcitVal', 11);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIAccelChan', 'customScaleName', 12);
                [status]= mexNIDAQmx('DAQmxCreateAIAccelChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateAIForceIEPEChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(12, 12, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceIEPEChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIForceIEPEChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'units', 7);
            validateattributes(sensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'sensitivity', 8);
            validateattributes(sensitivityUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'sensitivityUnits', 9);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'currentExcitSource', 10);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIForceIEPEChan', 'currentExcitVal', 11);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIForceIEPEChan', 'customScaleName', 12);
                [status]= mexNIDAQmx('DAQmxCreateAIForceIEPEChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateAIMicrophoneChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIMicrophoneChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIMicrophoneChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'terminalConfig', 4);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'units', 5);
            validateattributes(micSensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'micSensitivity', 6);
            validateattributes(maxSndPressLevel, {'double'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'maxSndPressLevel', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIMicrophoneChan', 'currentExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIMicrophoneChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateAIMicrophoneChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateAIPosLVDTChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName)
            error(nargchk(13, 13, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosLVDTChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosLVDTChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'units', 6);
            validateattributes(sensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'sensitivity', 7);
            validateattributes(sensitivityUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'sensitivityUnits', 8);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'voltageExcitSource', 9);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'voltageExcitVal', 10);
            validateattributes(voltageExcitFreq, {'double'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'voltageExcitFreq', 11);
            validateattributes(ACExcitWireMode, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosLVDTChan', 'ACExcitWireMode', 12);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPosLVDTChan', 'customScaleName', 13);
                [status]= mexNIDAQmx('DAQmxCreateAIPosLVDTChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName);
        end

        function [status] = DAQmxCreateAIPosRVDTChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName)
            error(nargchk(13, 13, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosRVDTChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosRVDTChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'units', 6);
            validateattributes(sensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'sensitivity', 7);
            validateattributes(sensitivityUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'sensitivityUnits', 8);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'voltageExcitSource', 9);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'voltageExcitVal', 10);
            validateattributes(voltageExcitFreq, {'double'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'voltageExcitFreq', 11);
            validateattributes(ACExcitWireMode, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosRVDTChan', 'ACExcitWireMode', 12);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPosRVDTChan', 'customScaleName', 13);
                [status]= mexNIDAQmx('DAQmxCreateAIPosRVDTChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName);
        end

        function [status] = DAQmxCreateAIPosEddyCurrProxProbeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'units', 6);
            validateattributes(sensitivity, {'double'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'sensitivity', 7);
            validateattributes(sensitivityUnits, {'int32'}, {'scalar'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'sensitivityUnits', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAIPosEddyCurrProxProbeChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateAIPosEddyCurrProxProbeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName);
        end

        function [status] = DAQmxCreateAIDeviceTempChan(taskHandle, physicalChannel, nameToAssignToChannel, units)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAIDeviceTempChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAIDeviceTempChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAIDeviceTempChan', 'nameToAssignToChannel', 3);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAIDeviceTempChan', 'units', 4);
                [status]= mexNIDAQmx('DAQmxCreateAIDeviceTempChan', taskHandle, physicalChannel, nameToAssignToChannel, units);
        end

        function [status] = DAQmxCreateTEDSAIVoltageChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChan', 'units', 7);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChan', 'customScaleName', 8);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIVoltageChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAICurrentChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAICurrentChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAICurrentChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'units', 7);
            validateattributes(shuntResistorLoc, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'shuntResistorLoc', 8);
            validateattributes(extShuntResistorVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAICurrentChan', 'extShuntResistorVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAICurrentChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAICurrentChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIThrmcplChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmcplChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmcplChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'units', 6);
            validateattributes(cjcSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'cjcSource', 7);
            validateattributes(cjcVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmcplChan', 'cjcVal', 8);
            validateattributes(cjcChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmcplChan', 'cjcChannel', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIThrmcplChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel);
        end

        function [status] = DAQmxCreateTEDSAIRTDChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIRTDChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIRTDChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'resistanceConfig', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIRTDChan', 'currentExcitVal', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIRTDChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
        end

        function [status] = DAQmxCreateTEDSAIThrmstrChanIex(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'resistanceConfig', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanIex', 'currentExcitVal', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIThrmstrChanIex', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal);
        end

        function [status] = DAQmxCreateTEDSAIThrmstrChanVex(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'resistanceConfig', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'voltageExcitVal', 9);
            validateattributes(r1, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIThrmstrChanVex', 'r1', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIThrmstrChanVex', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1);
        end

        function [status] = DAQmxCreateTEDSAIResistanceChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIResistanceChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIResistanceChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'units', 6);
            validateattributes(resistanceConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'resistanceConfig', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIResistanceChan', 'currentExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIResistanceChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIResistanceChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIStrainGageChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIStrainGageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIStrainGageChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'voltageExcitVal', 8);
            validateattributes(initialBridgeVoltage, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'initialBridgeVoltage', 9);
            validateattributes(leadWireResistance, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIStrainGageChan', 'leadWireResistance', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIStrainGageChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIStrainGageChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIForceBridgeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'voltageExcitVal', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceBridgeChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIForceBridgeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIPressureBridgeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'voltageExcitVal', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPressureBridgeChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIPressureBridgeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAITorqueBridgeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'voltageExcitVal', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAITorqueBridgeChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAITorqueBridgeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIBridgeChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIBridgeChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIBridgeChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIBridgeChan', 'voltageExcitVal', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIBridgeChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIBridgeChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIVoltageChanWithExcit(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'units', 7);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'voltageExcitSource', 8);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'voltageExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIVoltageChanWithExcit', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIVoltageChanWithExcit', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIAccelChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIAccelChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIAccelChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'units', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIAccelChan', 'currentExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIAccelChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIAccelChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIForceIEPEChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(10, 10, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'terminalConfig', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'maxVal', 6);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'units', 7);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'currentExcitSource', 8);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'currentExcitVal', 9);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIForceIEPEChan', 'customScaleName', 10);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIForceIEPEChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIMicrophoneChan(taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'nameToAssignToChannel', 3);
            validateattributes(terminalConfig, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'terminalConfig', 4);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'units', 5);
            validateattributes(maxSndPressLevel, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'maxSndPressLevel', 6);
            validateattributes(currentExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'currentExcitSource', 7);
            validateattributes(currentExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'currentExcitVal', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIMicrophoneChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIMicrophoneChan', taskHandle, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIPosLVDTChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'voltageExcitVal', 8);
            validateattributes(voltageExcitFreq, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'voltageExcitFreq', 9);
            validateattributes(ACExcitWireMode, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'ACExcitWireMode', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosLVDTChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIPosLVDTChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName);
        end

        function [status] = DAQmxCreateTEDSAIPosRVDTChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'units', 6);
            validateattributes(voltageExcitSource, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'voltageExcitSource', 7);
            validateattributes(voltageExcitVal, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'voltageExcitVal', 8);
            validateattributes(voltageExcitFreq, {'double'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'voltageExcitFreq', 9);
            validateattributes(ACExcitWireMode, {'int32'}, {'scalar'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'ACExcitWireMode', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateTEDSAIPosRVDTChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateTEDSAIPosRVDTChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName);
        end

        function [status] = DAQmxCreateAOVoltageChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAOVoltageChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAOVoltageChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAOVoltageChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAOVoltageChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAOVoltageChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAOVoltageChan', 'units', 6);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAOVoltageChan', 'customScaleName', 7);
                [status]= mexNIDAQmx('DAQmxCreateAOVoltageChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateAOCurrentChan(taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAOCurrentChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAOCurrentChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAOCurrentChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateAOCurrentChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateAOCurrentChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateAOCurrentChan', 'units', 6);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateAOCurrentChan', 'customScaleName', 7);
                [status]= mexNIDAQmx('DAQmxCreateAOCurrentChan', taskHandle, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateAOFuncGenChan(taskHandle, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateAOFuncGenChan', 'taskHandle', 1);
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxCreateAOFuncGenChan', 'physicalChannel', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateAOFuncGenChan', 'nameToAssignToChannel', 3);
            validateattributes(type, {'int32'}, {'scalar'}, 'DAQmxCreateAOFuncGenChan', 'type', 4);
            validateattributes(freq, {'double'}, {'scalar'}, 'DAQmxCreateAOFuncGenChan', 'freq', 5);
            validateattributes(amplitude, {'double'}, {'scalar'}, 'DAQmxCreateAOFuncGenChan', 'amplitude', 6);
            validateattributes(offset, {'double'}, {'scalar'}, 'DAQmxCreateAOFuncGenChan', 'offset', 7);
                [status]= mexNIDAQmx('DAQmxCreateAOFuncGenChan', taskHandle, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset);
        end

        function [status] = DAQmxCreateDIChan(taskHandle, lines, nameToAssignToLines, lineGrouping)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateDIChan', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxCreateDIChan', 'lines', 2);
            validateattributes(nameToAssignToLines, {'char'}, {'vector'}, 'DAQmxCreateDIChan', 'nameToAssignToLines', 3);
            validateattributes(lineGrouping, {'int32'}, {'scalar'}, 'DAQmxCreateDIChan', 'lineGrouping', 4);
                [status]= mexNIDAQmx('DAQmxCreateDIChan', taskHandle, lines, nameToAssignToLines, lineGrouping);
        end

        function [status] = DAQmxCreateDOChan(taskHandle, lines, nameToAssignToLines, lineGrouping)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateDOChan', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxCreateDOChan', 'lines', 2);
            validateattributes(nameToAssignToLines, {'char'}, {'vector'}, 'DAQmxCreateDOChan', 'nameToAssignToLines', 3);
            validateattributes(lineGrouping, {'int32'}, {'scalar'}, 'DAQmxCreateDOChan', 'lineGrouping', 4);
                [status]= mexNIDAQmx('DAQmxCreateDOChan', taskHandle, lines, nameToAssignToLines, lineGrouping);
        end

        function [status] = DAQmxCreateCIFreqChan(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIFreqChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIFreqChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'units', 6);
            validateattributes(edge, {'int32'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'edge', 7);
            validateattributes(measMethod, {'int32'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'measMethod', 8);
            validateattributes(measTime, {'double'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'measTime', 9);
            validateattributes(divisor, {'uint32'}, {'scalar'}, 'DAQmxCreateCIFreqChan', 'divisor', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCIFreqChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateCIFreqChan', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
        end

        function [status] = DAQmxCreateCIPeriodChan(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIPeriodChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIPeriodChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'units', 6);
            validateattributes(edge, {'int32'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'edge', 7);
            validateattributes(measMethod, {'int32'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'measMethod', 8);
            validateattributes(measTime, {'double'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'measTime', 9);
            validateattributes(divisor, {'uint32'}, {'scalar'}, 'DAQmxCreateCIPeriodChan', 'divisor', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCIPeriodChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateCIPeriodChan', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName);
        end

        function [status] = DAQmxCreateCICountEdgesChan(taskHandle, counter, nameToAssignToChannel, edge, initialCount, countDirection)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCICountEdgesChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCICountEdgesChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCICountEdgesChan', 'nameToAssignToChannel', 3);
            validateattributes(edge, {'int32'}, {'scalar'}, 'DAQmxCreateCICountEdgesChan', 'edge', 4);
            validateattributes(initialCount, {'uint32'}, {'scalar'}, 'DAQmxCreateCICountEdgesChan', 'initialCount', 5);
            validateattributes(countDirection, {'int32'}, {'scalar'}, 'DAQmxCreateCICountEdgesChan', 'countDirection', 6);
                [status]= mexNIDAQmx('DAQmxCreateCICountEdgesChan', taskHandle, counter, nameToAssignToChannel, edge, initialCount, countDirection);
        end

        function [status] = DAQmxCreateCIPulseWidthChan(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIPulseWidthChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIPulseWidthChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIPulseWidthChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseWidthChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseWidthChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIPulseWidthChan', 'units', 6);
            validateattributes(startingEdge, {'int32'}, {'scalar'}, 'DAQmxCreateCIPulseWidthChan', 'startingEdge', 7);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCIPulseWidthChan', 'customScaleName', 8);
                [status]= mexNIDAQmx('DAQmxCreateCIPulseWidthChan', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName);
        end

        function [status] = DAQmxCreateCISemiPeriodChan(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCISemiPeriodChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCISemiPeriodChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCISemiPeriodChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCISemiPeriodChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCISemiPeriodChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCISemiPeriodChan', 'units', 6);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCISemiPeriodChan', 'customScaleName', 7);
                [status]= mexNIDAQmx('DAQmxCreateCISemiPeriodChan', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName);
        end

        function [status] = DAQmxCreateCITwoEdgeSepChan(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCITwoEdgeSepChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCITwoEdgeSepChan', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'units', 6);
            validateattributes(firstEdge, {'int32'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'firstEdge', 7);
            validateattributes(secondEdge, {'int32'}, {'scalar'}, 'DAQmxCreateCITwoEdgeSepChan', 'secondEdge', 8);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCITwoEdgeSepChan', 'customScaleName', 9);
                [status]= mexNIDAQmx('DAQmxCreateCITwoEdgeSepChan', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName);
        end

        function [status] = DAQmxCreateCIPulseChanFreq(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIPulseChanFreq', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanFreq', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanFreq', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanFreq', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanFreq', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIPulseChanFreq', 'units', 6);
                [status]= mexNIDAQmx('DAQmxCreateCIPulseChanFreq', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units);
        end

        function [status] = DAQmxCreateCIPulseChanTime(taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIPulseChanTime', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanTime', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanTime', 'nameToAssignToChannel', 3);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanTime', 'minVal', 4);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanTime', 'maxVal', 5);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIPulseChanTime', 'units', 6);
                [status]= mexNIDAQmx('DAQmxCreateCIPulseChanTime', taskHandle, counter, nameToAssignToChannel, minVal, maxVal, units);
        end

        function [status] = DAQmxCreateCIPulseChanTicks(taskHandle, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIPulseChanTicks', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanTicks', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanTicks', 'nameToAssignToChannel', 3);
            validateattributes(sourceTerminal, {'char'}, {'vector'}, 'DAQmxCreateCIPulseChanTicks', 'sourceTerminal', 4);
            validateattributes(minVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanTicks', 'minVal', 5);
            validateattributes(maxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIPulseChanTicks', 'maxVal', 6);
                [status]= mexNIDAQmx('DAQmxCreateCIPulseChanTicks', taskHandle, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal);
        end

        function [status] = DAQmxCreateCILinEncoderChan(taskHandle, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, distPerPulse, initialPos, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCILinEncoderChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCILinEncoderChan', 'nameToAssignToChannel', 3);
            validateattributes(decodingType, {'int32'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'decodingType', 4);
            validateattributes(ZidxEnable, {'uint32'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'ZidxEnable', 5);
            validateattributes(ZidxVal, {'double'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'ZidxVal', 6);
            validateattributes(ZidxPhase, {'int32'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'ZidxPhase', 7);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'units', 8);
            validateattributes(distPerPulse, {'double'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'distPerPulse', 9);
            validateattributes(initialPos, {'double'}, {'scalar'}, 'DAQmxCreateCILinEncoderChan', 'initialPos', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCILinEncoderChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateCILinEncoderChan', taskHandle, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, distPerPulse, initialPos, customScaleName);
        end

        function [status] = DAQmxCreateCIAngEncoderChan(taskHandle, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, pulsesPerRev, initialAngle, customScaleName)
            error(nargchk(11, 11, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIAngEncoderChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIAngEncoderChan', 'nameToAssignToChannel', 3);
            validateattributes(decodingType, {'int32'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'decodingType', 4);
            validateattributes(ZidxEnable, {'uint32'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'ZidxEnable', 5);
            validateattributes(ZidxVal, {'double'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'ZidxVal', 6);
            validateattributes(ZidxPhase, {'int32'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'ZidxPhase', 7);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'units', 8);
            validateattributes(pulsesPerRev, {'uint32'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'pulsesPerRev', 9);
            validateattributes(initialAngle, {'double'}, {'scalar'}, 'DAQmxCreateCIAngEncoderChan', 'initialAngle', 10);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCIAngEncoderChan', 'customScaleName', 11);
                [status]= mexNIDAQmx('DAQmxCreateCIAngEncoderChan', taskHandle, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, pulsesPerRev, initialAngle, customScaleName);
        end

        function [status] = DAQmxCreateCIGPSTimestampChan(taskHandle, counter, nameToAssignToChannel, units, syncMethod, customScaleName)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCIGPSTimestampChan', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCIGPSTimestampChan', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCIGPSTimestampChan', 'nameToAssignToChannel', 3);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCIGPSTimestampChan', 'units', 4);
            validateattributes(syncMethod, {'int32'}, {'scalar'}, 'DAQmxCreateCIGPSTimestampChan', 'syncMethod', 5);
            validateattributes(customScaleName, {'char'}, {'vector'}, 'DAQmxCreateCIGPSTimestampChan', 'customScaleName', 6);
                [status]= mexNIDAQmx('DAQmxCreateCIGPSTimestampChan', taskHandle, counter, nameToAssignToChannel, units, syncMethod, customScaleName);
        end

        function [status] = DAQmxCreateCOPulseChanFreq(taskHandle, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanFreq', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanFreq', 'nameToAssignToChannel', 3);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'units', 4);
            validateattributes(idleState, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'idleState', 5);
            validateattributes(initialDelay, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'initialDelay', 6);
            validateattributes(freq, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'freq', 7);
            validateattributes(dutyCycle, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanFreq', 'dutyCycle', 8);
                [status]= mexNIDAQmx('DAQmxCreateCOPulseChanFreq', taskHandle, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle);
        end

        function [status] = DAQmxCreateCOPulseChanTime(taskHandle, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanTime', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanTime', 'nameToAssignToChannel', 3);
            validateattributes(units, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'units', 4);
            validateattributes(idleState, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'idleState', 5);
            validateattributes(initialDelay, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'initialDelay', 6);
            validateattributes(lowTime, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'lowTime', 7);
            validateattributes(highTime, {'double'}, {'scalar'}, 'DAQmxCreateCOPulseChanTime', 'highTime', 8);
                [status]= mexNIDAQmx('DAQmxCreateCOPulseChanTime', taskHandle, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime);
        end

        function [status] = DAQmxCreateCOPulseChanTicks(taskHandle, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCreateCOPulseChanTicks', 'taskHandle', 1);
            validateattributes(counter, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanTicks', 'counter', 2);
            validateattributes(nameToAssignToChannel, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanTicks', 'nameToAssignToChannel', 3);
            validateattributes(sourceTerminal, {'char'}, {'vector'}, 'DAQmxCreateCOPulseChanTicks', 'sourceTerminal', 4);
            validateattributes(idleState, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTicks', 'idleState', 5);
            validateattributes(initialDelay, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTicks', 'initialDelay', 6);
            validateattributes(lowTicks, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTicks', 'lowTicks', 7);
            validateattributes(highTicks, {'int32'}, {'scalar'}, 'DAQmxCreateCOPulseChanTicks', 'highTicks', 8);
                [status]= mexNIDAQmx('DAQmxCreateCOPulseChanTicks', taskHandle, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks);
        end

        function [status, year, month, day, hour, minute] = DAQmxGetAIChanCalCalDate(taskHandle, channelName, year, month, day, hour, minute)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(6, 6, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalCalDate', 'taskHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'channelName', 2);
            validateattributes(year, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'year', 3);
            validateattributes(month, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'month', 4);
            validateattributes(day, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'day', 5);
            validateattributes(hour, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'hour', 6);
            validateattributes(minute, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalCalDate', 'minute', 7);
                [status, year, month, day, hour, minute]= mexNIDAQmx('DAQmxGetAIChanCalCalDate', taskHandle, channelName, year, month, day, hour, minute);
        end

        function [status] = DAQmxSetAIChanCalCalDate(taskHandle, channelName, year, month, day, hour, minute)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'taskHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetAIChanCalCalDate', 'channelName', 2);
            validateattributes(year, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'year', 3);
            validateattributes(month, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'month', 4);
            validateattributes(day, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'day', 5);
            validateattributes(hour, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'hour', 6);
            validateattributes(minute, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalCalDate', 'minute', 7);
                [status]= mexNIDAQmx('DAQmxSetAIChanCalCalDate', taskHandle, channelName, year, month, day, hour, minute);
        end

        function [status, year, month, day, hour, minute] = DAQmxGetAIChanCalExpDate(taskHandle, channelName, year, month, day, hour, minute)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(6, 6, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalExpDate', 'taskHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'channelName', 2);
            validateattributes(year, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'year', 3);
            validateattributes(month, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'month', 4);
            validateattributes(day, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'day', 5);
            validateattributes(hour, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'hour', 6);
            validateattributes(minute, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalExpDate', 'minute', 7);
                [status, year, month, day, hour, minute]= mexNIDAQmx('DAQmxGetAIChanCalExpDate', taskHandle, channelName, year, month, day, hour, minute);
        end

        function [status] = DAQmxSetAIChanCalExpDate(taskHandle, channelName, year, month, day, hour, minute)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'taskHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetAIChanCalExpDate', 'channelName', 2);
            validateattributes(year, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'year', 3);
            validateattributes(month, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'month', 4);
            validateattributes(day, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'day', 5);
            validateattributes(hour, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'hour', 6);
            validateattributes(minute, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalExpDate', 'minute', 7);
                [status]= mexNIDAQmx('DAQmxSetAIChanCalExpDate', taskHandle, channelName, year, month, day, hour, minute);
        end

        function [status] = DAQmxResetChanAttribute(taskHandle, channel, attribute)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetChanAttribute', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetChanAttribute', 'channel', 2);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetChanAttribute', 'attribute', 3);
                [status]= mexNIDAQmx('DAQmxResetChanAttribute', taskHandle, channel, attribute);
        end

        function [status] = DAQmxCfgSampClkTiming(taskHandle, source, rate, activeEdge, sampleMode, sampsPerChan)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgSampClkTiming', 'taskHandle', 1);
            validateattributes(source, {'char'}, {'vector'}, 'DAQmxCfgSampClkTiming', 'source', 2);
            validateattributes(rate, {'double'}, {'scalar'}, 'DAQmxCfgSampClkTiming', 'rate', 3);
            validateattributes(activeEdge, {'int32'}, {'scalar'}, 'DAQmxCfgSampClkTiming', 'activeEdge', 4);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgSampClkTiming', 'sampleMode', 5);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgSampClkTiming', 'sampsPerChan', 6);
                [status]= mexNIDAQmx('DAQmxCfgSampClkTiming', taskHandle, source, rate, activeEdge, sampleMode, sampsPerChan);
        end

        function [status] = DAQmxCfgHandshakingTiming(taskHandle, sampleMode, sampsPerChan)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgHandshakingTiming', 'taskHandle', 1);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgHandshakingTiming', 'sampleMode', 2);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgHandshakingTiming', 'sampsPerChan', 3);
                [status]= mexNIDAQmx('DAQmxCfgHandshakingTiming', taskHandle, sampleMode, sampsPerChan);
        end

        function [status] = DAQmxCfgBurstHandshakingTimingImportClock(taskHandle, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'taskHandle', 1);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'sampleMode', 2);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'sampsPerChan', 3);
            validateattributes(sampleClkRate, {'double'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'sampleClkRate', 4);
            validateattributes(sampleClkSrc, {'char'}, {'vector'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'sampleClkSrc', 5);
            validateattributes(sampleClkActiveEdge, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'sampleClkActiveEdge', 6);
            validateattributes(pauseWhen, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'pauseWhen', 7);
            validateattributes(readyEventActiveLevel, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingImportClock', 'readyEventActiveLevel', 8);
                [status]= mexNIDAQmx('DAQmxCfgBurstHandshakingTimingImportClock', taskHandle, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel);
        end

        function [status] = DAQmxCfgBurstHandshakingTimingExportClock(taskHandle, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'taskHandle', 1);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'sampleMode', 2);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'sampsPerChan', 3);
            validateattributes(sampleClkRate, {'double'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'sampleClkRate', 4);
            validateattributes(sampleClkOutpTerm, {'char'}, {'vector'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'sampleClkOutpTerm', 5);
            validateattributes(sampleClkPulsePolarity, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'sampleClkPulsePolarity', 6);
            validateattributes(pauseWhen, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'pauseWhen', 7);
            validateattributes(readyEventActiveLevel, {'int32'}, {'scalar'}, 'DAQmxCfgBurstHandshakingTimingExportClock', 'readyEventActiveLevel', 8);
                [status]= mexNIDAQmx('DAQmxCfgBurstHandshakingTimingExportClock', taskHandle, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel);
        end

        function [status] = DAQmxCfgChangeDetectionTiming(taskHandle, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgChangeDetectionTiming', 'taskHandle', 1);
            validateattributes(risingEdgeChan, {'char'}, {'vector'}, 'DAQmxCfgChangeDetectionTiming', 'risingEdgeChan', 2);
            validateattributes(fallingEdgeChan, {'char'}, {'vector'}, 'DAQmxCfgChangeDetectionTiming', 'fallingEdgeChan', 3);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgChangeDetectionTiming', 'sampleMode', 4);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgChangeDetectionTiming', 'sampsPerChan', 5);
                [status]= mexNIDAQmx('DAQmxCfgChangeDetectionTiming', taskHandle, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan);
        end

        function [status] = DAQmxCfgImplicitTiming(taskHandle, sampleMode, sampsPerChan)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgImplicitTiming', 'taskHandle', 1);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgImplicitTiming', 'sampleMode', 2);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgImplicitTiming', 'sampsPerChan', 3);
                [status]= mexNIDAQmx('DAQmxCfgImplicitTiming', taskHandle, sampleMode, sampsPerChan);
        end

        function [status] = DAQmxCfgPipelinedSampClkTiming(taskHandle, source, rate, activeEdge, sampleMode, sampsPerChan)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgPipelinedSampClkTiming', 'taskHandle', 1);
            validateattributes(source, {'char'}, {'vector'}, 'DAQmxCfgPipelinedSampClkTiming', 'source', 2);
            validateattributes(rate, {'double'}, {'scalar'}, 'DAQmxCfgPipelinedSampClkTiming', 'rate', 3);
            validateattributes(activeEdge, {'int32'}, {'scalar'}, 'DAQmxCfgPipelinedSampClkTiming', 'activeEdge', 4);
            validateattributes(sampleMode, {'int32'}, {'scalar'}, 'DAQmxCfgPipelinedSampClkTiming', 'sampleMode', 5);
            validateattributes(sampsPerChan, {'uint64'}, {'scalar'}, 'DAQmxCfgPipelinedSampClkTiming', 'sampsPerChan', 6);
                [status]= mexNIDAQmx('DAQmxCfgPipelinedSampClkTiming', taskHandle, source, rate, activeEdge, sampleMode, sampsPerChan);
        end

        function [status] = DAQmxResetTimingAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetTimingAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetTimingAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetTimingAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxResetTimingAttributeEx(taskHandle, deviceNames, attribute)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetTimingAttributeEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetTimingAttributeEx', 'deviceNames', 2);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetTimingAttributeEx', 'attribute', 3);
                [status]= mexNIDAQmx('DAQmxResetTimingAttributeEx', taskHandle, deviceNames, attribute);
        end

        function [status] = DAQmxDisableStartTrig(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxDisableStartTrig', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxDisableStartTrig', taskHandle);
        end

        function [status] = DAQmxCfgDigEdgeStartTrig(taskHandle, triggerSource, triggerEdge)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgDigEdgeStartTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgDigEdgeStartTrig', 'triggerSource', 2);
            validateattributes(triggerEdge, {'int32'}, {'scalar'}, 'DAQmxCfgDigEdgeStartTrig', 'triggerEdge', 3);
                [status]= mexNIDAQmx('DAQmxCfgDigEdgeStartTrig', taskHandle, triggerSource, triggerEdge);
        end

        function [status] = DAQmxCfgAnlgEdgeStartTrig(taskHandle, triggerSource, triggerSlope, triggerLevel)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgAnlgEdgeStartTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgAnlgEdgeStartTrig', 'triggerSource', 2);
            validateattributes(triggerSlope, {'int32'}, {'scalar'}, 'DAQmxCfgAnlgEdgeStartTrig', 'triggerSlope', 3);
            validateattributes(triggerLevel, {'double'}, {'scalar'}, 'DAQmxCfgAnlgEdgeStartTrig', 'triggerLevel', 4);
                [status]= mexNIDAQmx('DAQmxCfgAnlgEdgeStartTrig', taskHandle, triggerSource, triggerSlope, triggerLevel);
        end

        function [status] = DAQmxCfgAnlgWindowStartTrig(taskHandle, triggerSource, triggerWhen, windowTop, windowBottom)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgAnlgWindowStartTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgAnlgWindowStartTrig', 'triggerSource', 2);
            validateattributes(triggerWhen, {'int32'}, {'scalar'}, 'DAQmxCfgAnlgWindowStartTrig', 'triggerWhen', 3);
            validateattributes(windowTop, {'double'}, {'scalar'}, 'DAQmxCfgAnlgWindowStartTrig', 'windowTop', 4);
            validateattributes(windowBottom, {'double'}, {'scalar'}, 'DAQmxCfgAnlgWindowStartTrig', 'windowBottom', 5);
                [status]= mexNIDAQmx('DAQmxCfgAnlgWindowStartTrig', taskHandle, triggerSource, triggerWhen, windowTop, windowBottom);
        end

        function [status] = DAQmxCfgDigPatternStartTrig(taskHandle, triggerSource, triggerPattern, triggerWhen)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgDigPatternStartTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgDigPatternStartTrig', 'triggerSource', 2);
            validateattributes(triggerPattern, {'char'}, {'vector'}, 'DAQmxCfgDigPatternStartTrig', 'triggerPattern', 3);
            validateattributes(triggerWhen, {'int32'}, {'scalar'}, 'DAQmxCfgDigPatternStartTrig', 'triggerWhen', 4);
                [status]= mexNIDAQmx('DAQmxCfgDigPatternStartTrig', taskHandle, triggerSource, triggerPattern, triggerWhen);
        end

        function [status] = DAQmxDisableRefTrig(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxDisableRefTrig', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxDisableRefTrig', taskHandle);
        end

        function [status] = DAQmxCfgDigEdgeRefTrig(taskHandle, triggerSource, triggerEdge, pretriggerSamples)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgDigEdgeRefTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgDigEdgeRefTrig', 'triggerSource', 2);
            validateattributes(triggerEdge, {'int32'}, {'scalar'}, 'DAQmxCfgDigEdgeRefTrig', 'triggerEdge', 3);
            validateattributes(pretriggerSamples, {'uint32'}, {'scalar'}, 'DAQmxCfgDigEdgeRefTrig', 'pretriggerSamples', 4);
                [status]= mexNIDAQmx('DAQmxCfgDigEdgeRefTrig', taskHandle, triggerSource, triggerEdge, pretriggerSamples);
        end

        function [status] = DAQmxCfgAnlgEdgeRefTrig(taskHandle, triggerSource, triggerSlope, triggerLevel, pretriggerSamples)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgAnlgEdgeRefTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgAnlgEdgeRefTrig', 'triggerSource', 2);
            validateattributes(triggerSlope, {'int32'}, {'scalar'}, 'DAQmxCfgAnlgEdgeRefTrig', 'triggerSlope', 3);
            validateattributes(triggerLevel, {'double'}, {'scalar'}, 'DAQmxCfgAnlgEdgeRefTrig', 'triggerLevel', 4);
            validateattributes(pretriggerSamples, {'uint32'}, {'scalar'}, 'DAQmxCfgAnlgEdgeRefTrig', 'pretriggerSamples', 5);
                [status]= mexNIDAQmx('DAQmxCfgAnlgEdgeRefTrig', taskHandle, triggerSource, triggerSlope, triggerLevel, pretriggerSamples);
        end

        function [status] = DAQmxCfgAnlgWindowRefTrig(taskHandle, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgAnlgWindowRefTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgAnlgWindowRefTrig', 'triggerSource', 2);
            validateattributes(triggerWhen, {'int32'}, {'scalar'}, 'DAQmxCfgAnlgWindowRefTrig', 'triggerWhen', 3);
            validateattributes(windowTop, {'double'}, {'scalar'}, 'DAQmxCfgAnlgWindowRefTrig', 'windowTop', 4);
            validateattributes(windowBottom, {'double'}, {'scalar'}, 'DAQmxCfgAnlgWindowRefTrig', 'windowBottom', 5);
            validateattributes(pretriggerSamples, {'uint32'}, {'scalar'}, 'DAQmxCfgAnlgWindowRefTrig', 'pretriggerSamples', 6);
                [status]= mexNIDAQmx('DAQmxCfgAnlgWindowRefTrig', taskHandle, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples);
        end

        function [status] = DAQmxCfgDigPatternRefTrig(taskHandle, triggerSource, triggerPattern, triggerWhen, pretriggerSamples)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgDigPatternRefTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgDigPatternRefTrig', 'triggerSource', 2);
            validateattributes(triggerPattern, {'char'}, {'vector'}, 'DAQmxCfgDigPatternRefTrig', 'triggerPattern', 3);
            validateattributes(triggerWhen, {'int32'}, {'scalar'}, 'DAQmxCfgDigPatternRefTrig', 'triggerWhen', 4);
            validateattributes(pretriggerSamples, {'uint32'}, {'scalar'}, 'DAQmxCfgDigPatternRefTrig', 'pretriggerSamples', 5);
                [status]= mexNIDAQmx('DAQmxCfgDigPatternRefTrig', taskHandle, triggerSource, triggerPattern, triggerWhen, pretriggerSamples);
        end

        function [status] = DAQmxDisableAdvTrig(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxDisableAdvTrig', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxDisableAdvTrig', taskHandle);
        end

        function [status] = DAQmxCfgDigEdgeAdvTrig(taskHandle, triggerSource, triggerEdge)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgDigEdgeAdvTrig', 'taskHandle', 1);
            validateattributes(triggerSource, {'char'}, {'vector'}, 'DAQmxCfgDigEdgeAdvTrig', 'triggerSource', 2);
            validateattributes(triggerEdge, {'int32'}, {'scalar'}, 'DAQmxCfgDigEdgeAdvTrig', 'triggerEdge', 3);
                [status]= mexNIDAQmx('DAQmxCfgDigEdgeAdvTrig', taskHandle, triggerSource, triggerEdge);
        end

        function [status] = DAQmxResetTrigAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetTrigAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetTrigAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetTrigAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxSendSoftwareTrigger(taskHandle, triggerID)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSendSoftwareTrigger', 'taskHandle', 1);
            validateattributes(triggerID, {'int32'}, {'scalar'}, 'DAQmxSendSoftwareTrigger', 'triggerID', 2);
                [status]= mexNIDAQmx('DAQmxSendSoftwareTrigger', taskHandle, triggerID);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadAnalogF64(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadAnalogF64', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadAnalogF64', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadAnalogF64', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadAnalogF64', 'fillMode', 4);
            validateattributes(readArray, {'double'}, {'vector'}, 'DAQmxReadAnalogF64', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadAnalogF64', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadAnalogF64', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadAnalogF64', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadAnalogF64', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, value, reserved] = DAQmxReadAnalogScalarF64(taskHandle, timeout, value, reserved)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadAnalogScalarF64', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadAnalogScalarF64', 'timeout', 2);
            validateattributes(value, {'double'}, {'vector'}, 'DAQmxReadAnalogScalarF64', 'value', 3);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadAnalogScalarF64', 'reserved', 4);
                [status, value, reserved]= mexNIDAQmx('DAQmxReadAnalogScalarF64', taskHandle, timeout, value, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadBinaryI16(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadBinaryI16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadBinaryI16', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadBinaryI16', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryI16', 'fillMode', 4);
            validateattributes(readArray, {'int16'}, {'vector'}, 'DAQmxReadBinaryI16', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryI16', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadBinaryI16', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadBinaryI16', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadBinaryI16', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadBinaryU16(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadBinaryU16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadBinaryU16', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadBinaryU16', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryU16', 'fillMode', 4);
            validateattributes(readArray, {'uint16'}, {'vector'}, 'DAQmxReadBinaryU16', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryU16', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadBinaryU16', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadBinaryU16', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadBinaryU16', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadBinaryI32(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadBinaryI32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadBinaryI32', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadBinaryI32', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryI32', 'fillMode', 4);
            validateattributes(readArray, {'int32'}, {'vector'}, 'DAQmxReadBinaryI32', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryI32', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadBinaryI32', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadBinaryI32', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadBinaryI32', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadBinaryU32(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadBinaryU32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadBinaryU32', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadBinaryU32', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryU32', 'fillMode', 4);
            validateattributes(readArray, {'uint32'}, {'vector'}, 'DAQmxReadBinaryU32', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadBinaryU32', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadBinaryU32', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadBinaryU32', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadBinaryU32', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadDigitalU8(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadDigitalU8', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadDigitalU8', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadDigitalU8', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU8', 'fillMode', 4);
            validateattributes(readArray, {'uint8'}, {'vector'}, 'DAQmxReadDigitalU8', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU8', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadDigitalU8', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadDigitalU8', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadDigitalU8', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadDigitalU16(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadDigitalU16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadDigitalU16', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadDigitalU16', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU16', 'fillMode', 4);
            validateattributes(readArray, {'uint16'}, {'vector'}, 'DAQmxReadDigitalU16', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU16', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadDigitalU16', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadDigitalU16', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadDigitalU16', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadDigitalU32(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadDigitalU32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadDigitalU32', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadDigitalU32', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU32', 'fillMode', 4);
            validateattributes(readArray, {'uint32'}, {'vector'}, 'DAQmxReadDigitalU32', 'readArray', 5);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalU32', 'arraySizeInSamps', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadDigitalU32', 'sampsPerChanRead', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadDigitalU32', 'reserved', 8);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadDigitalU32', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, value, reserved] = DAQmxReadDigitalScalarU32(taskHandle, timeout, value, reserved)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadDigitalScalarU32', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadDigitalScalarU32', 'timeout', 2);
            validateattributes(value, {'uint32'}, {'vector'}, 'DAQmxReadDigitalScalarU32', 'value', 3);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadDigitalScalarU32', 'reserved', 4);
                [status, value, reserved]= mexNIDAQmx('DAQmxReadDigitalScalarU32', taskHandle, timeout, value, reserved);
        end

        function [status, readArray, sampsPerChanRead, numBytesPerSamp, reserved] = DAQmxReadDigitalLines(taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(5, 5, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadDigitalLines', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadDigitalLines', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadDigitalLines', 'timeout', 3);
            validateattributes(fillMode, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalLines', 'fillMode', 4);
            validateattributes(readArray, {'uint8'}, {'vector'}, 'DAQmxReadDigitalLines', 'readArray', 5);
            validateattributes(arraySizeInBytes, {'uint32'}, {'scalar'}, 'DAQmxReadDigitalLines', 'arraySizeInBytes', 6);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadDigitalLines', 'sampsPerChanRead', 7);
            validateattributes(numBytesPerSamp, {'int32'}, {'vector'}, 'DAQmxReadDigitalLines', 'numBytesPerSamp', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadDigitalLines', 'reserved', 9);
                [status, readArray, sampsPerChanRead, numBytesPerSamp, reserved]= mexNIDAQmx('DAQmxReadDigitalLines', taskHandle, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadCounterF64(taskHandle, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCounterF64', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadCounterF64', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCounterF64', 'timeout', 3);
            validateattributes(readArray, {'double'}, {'vector'}, 'DAQmxReadCounterF64', 'readArray', 4);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadCounterF64', 'arraySizeInSamps', 5);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadCounterF64', 'sampsPerChanRead', 6);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCounterF64', 'reserved', 7);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadCounterF64', taskHandle, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArray, sampsPerChanRead, reserved] = DAQmxReadCounterU32(taskHandle, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCounterU32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadCounterU32', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCounterU32', 'timeout', 3);
            validateattributes(readArray, {'uint32'}, {'vector'}, 'DAQmxReadCounterU32', 'readArray', 4);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadCounterU32', 'arraySizeInSamps', 5);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadCounterU32', 'sampsPerChanRead', 6);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCounterU32', 'reserved', 7);
                [status, readArray, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadCounterU32', taskHandle, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, value, reserved] = DAQmxReadCounterScalarF64(taskHandle, timeout, value, reserved)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCounterScalarF64', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCounterScalarF64', 'timeout', 2);
            validateattributes(value, {'double'}, {'vector'}, 'DAQmxReadCounterScalarF64', 'value', 3);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCounterScalarF64', 'reserved', 4);
                [status, value, reserved]= mexNIDAQmx('DAQmxReadCounterScalarF64', taskHandle, timeout, value, reserved);
        end

        function [status, value, reserved] = DAQmxReadCounterScalarU32(taskHandle, timeout, value, reserved)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCounterScalarU32', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCounterScalarU32', 'timeout', 2);
            validateattributes(value, {'uint32'}, {'vector'}, 'DAQmxReadCounterScalarU32', 'value', 3);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCounterScalarU32', 'reserved', 4);
                [status, value, reserved]= mexNIDAQmx('DAQmxReadCounterScalarU32', taskHandle, timeout, value, reserved);
        end

        function [status, readArrayFrequency, readArrayDutyCycle, sampsPerChanRead, reserved] = DAQmxReadCtrFreq(taskHandle, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(5, 5, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrFreq', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadCtrFreq', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrFreq', 'timeout', 3);
            validateattributes(interleaved, {'uint32'}, {'scalar'}, 'DAQmxReadCtrFreq', 'interleaved', 4);
            validateattributes(readArrayFrequency, {'double'}, {'vector'}, 'DAQmxReadCtrFreq', 'readArrayFrequency', 5);
            validateattributes(readArrayDutyCycle, {'double'}, {'vector'}, 'DAQmxReadCtrFreq', 'readArrayDutyCycle', 6);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadCtrFreq', 'arraySizeInSamps', 7);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadCtrFreq', 'sampsPerChanRead', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrFreq', 'reserved', 9);
                [status, readArrayFrequency, readArrayDutyCycle, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadCtrFreq', taskHandle, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArrayHighTime, readArrayLowTime, sampsPerChanRead, reserved] = DAQmxReadCtrTime(taskHandle, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(5, 5, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrTime', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadCtrTime', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrTime', 'timeout', 3);
            validateattributes(interleaved, {'uint32'}, {'scalar'}, 'DAQmxReadCtrTime', 'interleaved', 4);
            validateattributes(readArrayHighTime, {'double'}, {'vector'}, 'DAQmxReadCtrTime', 'readArrayHighTime', 5);
            validateattributes(readArrayLowTime, {'double'}, {'vector'}, 'DAQmxReadCtrTime', 'readArrayLowTime', 6);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadCtrTime', 'arraySizeInSamps', 7);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadCtrTime', 'sampsPerChanRead', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrTime', 'reserved', 9);
                [status, readArrayHighTime, readArrayLowTime, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadCtrTime', taskHandle, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, readArrayHighTicks, readArrayLowTicks, sampsPerChanRead, reserved] = DAQmxReadCtrTicks(taskHandle, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(5, 5, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrTicks', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadCtrTicks', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrTicks', 'timeout', 3);
            validateattributes(interleaved, {'uint32'}, {'scalar'}, 'DAQmxReadCtrTicks', 'interleaved', 4);
            validateattributes(readArrayHighTicks, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicks', 'readArrayHighTicks', 5);
            validateattributes(readArrayLowTicks, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicks', 'readArrayLowTicks', 6);
            validateattributes(arraySizeInSamps, {'uint32'}, {'scalar'}, 'DAQmxReadCtrTicks', 'arraySizeInSamps', 7);
            validateattributes(sampsPerChanRead, {'int32'}, {'vector'}, 'DAQmxReadCtrTicks', 'sampsPerChanRead', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicks', 'reserved', 9);
                [status, readArrayHighTicks, readArrayLowTicks, sampsPerChanRead, reserved]= mexNIDAQmx('DAQmxReadCtrTicks', taskHandle, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, reserved);
        end

        function [status, frequency, dutyCycle, reserved] = DAQmxReadCtrFreqScalar(taskHandle, timeout, frequency, dutyCycle, reserved)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrFreqScalar', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrFreqScalar', 'timeout', 2);
            validateattributes(frequency, {'double'}, {'vector'}, 'DAQmxReadCtrFreqScalar', 'frequency', 3);
            validateattributes(dutyCycle, {'double'}, {'vector'}, 'DAQmxReadCtrFreqScalar', 'dutyCycle', 4);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrFreqScalar', 'reserved', 5);
                [status, frequency, dutyCycle, reserved]= mexNIDAQmx('DAQmxReadCtrFreqScalar', taskHandle, timeout, frequency, dutyCycle, reserved);
        end

        function [status, highTime, lowTime, reserved] = DAQmxReadCtrTimeScalar(taskHandle, timeout, highTime, lowTime, reserved)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrTimeScalar', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrTimeScalar', 'timeout', 2);
            validateattributes(highTime, {'double'}, {'vector'}, 'DAQmxReadCtrTimeScalar', 'highTime', 3);
            validateattributes(lowTime, {'double'}, {'vector'}, 'DAQmxReadCtrTimeScalar', 'lowTime', 4);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrTimeScalar', 'reserved', 5);
                [status, highTime, lowTime, reserved]= mexNIDAQmx('DAQmxReadCtrTimeScalar', taskHandle, timeout, highTime, lowTime, reserved);
        end

        function [status, highTicks, lowTicks, reserved] = DAQmxReadCtrTicksScalar(taskHandle, timeout, highTicks, lowTicks, reserved)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadCtrTicksScalar', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadCtrTicksScalar', 'timeout', 2);
            validateattributes(highTicks, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicksScalar', 'highTicks', 3);
            validateattributes(lowTicks, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicksScalar', 'lowTicks', 4);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadCtrTicksScalar', 'reserved', 5);
                [status, highTicks, lowTicks, reserved]= mexNIDAQmx('DAQmxReadCtrTicksScalar', taskHandle, timeout, highTicks, lowTicks, reserved);
        end

        function [status, readArray, sampsRead, numBytesPerSamp, reserved] = DAQmxReadRaw(taskHandle, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(5, 5, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxReadRaw', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxReadRaw', 'numSampsPerChan', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxReadRaw', 'timeout', 3);
            validateattributes(readArray, {'uint32'}, {'vector'}, 'DAQmxReadRaw', 'readArray', 4);
            validateattributes(arraySizeInBytes, {'uint32'}, {'scalar'}, 'DAQmxReadRaw', 'arraySizeInBytes', 5);
            validateattributes(sampsRead, {'int32'}, {'vector'}, 'DAQmxReadRaw', 'sampsRead', 6);
            validateattributes(numBytesPerSamp, {'int32'}, {'vector'}, 'DAQmxReadRaw', 'numBytesPerSamp', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxReadRaw', 'reserved', 8);
                [status, readArray, sampsRead, numBytesPerSamp, reserved]= mexNIDAQmx('DAQmxReadRaw', taskHandle, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, reserved);
        end

        function [status, buffer] = DAQmxGetNthTaskReadChannel(taskHandle, index, buffer, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetNthTaskReadChannel', 'taskHandle', 1);
            validateattributes(index, {'uint32'}, {'scalar'}, 'DAQmxGetNthTaskReadChannel', 'index', 2);
            validateattributes(buffer, {'char'}, {'vector'}, 'DAQmxGetNthTaskReadChannel', 'buffer', 3);
            validateattributes(bufferSize, {'int32'}, {'scalar'}, 'DAQmxGetNthTaskReadChannel', 'bufferSize', 4);
                [status, buffer]= mexNIDAQmx('DAQmxGetNthTaskReadChannel', taskHandle, index, buffer, bufferSize);
        end

        function [status] = DAQmxResetReadAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetReadAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetReadAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxConfigureLogging(taskHandle, filePath, loggingMode, groupName, operation)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxConfigureLogging', 'taskHandle', 1);
            validateattributes(filePath, {'char'}, {'vector'}, 'DAQmxConfigureLogging', 'filePath', 2);
            validateattributes(loggingMode, {'int32'}, {'scalar'}, 'DAQmxConfigureLogging', 'loggingMode', 3);
            validateattributes(groupName, {'char'}, {'vector'}, 'DAQmxConfigureLogging', 'groupName', 4);
            validateattributes(operation, {'int32'}, {'scalar'}, 'DAQmxConfigureLogging', 'operation', 5);
                [status]= mexNIDAQmx('DAQmxConfigureLogging', taskHandle, filePath, loggingMode, groupName, operation);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteAnalogF64(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteAnalogF64', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteAnalogF64', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteAnalogF64', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteAnalogF64', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteAnalogF64', 'dataLayout', 5);
            validateattributes(writeArray, {'double'}, {'vector'}, 'DAQmxWriteAnalogF64', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteAnalogF64', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteAnalogF64', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteAnalogF64', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, reserved] = DAQmxWriteAnalogScalarF64(taskHandle, autoStart, timeout, value, reserved)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteAnalogScalarF64', 'taskHandle', 1);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteAnalogScalarF64', 'autoStart', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteAnalogScalarF64', 'timeout', 3);
            validateattributes(value, {'double'}, {'scalar'}, 'DAQmxWriteAnalogScalarF64', 'value', 4);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteAnalogScalarF64', 'reserved', 5);
                [status, reserved]= mexNIDAQmx('DAQmxWriteAnalogScalarF64', taskHandle, autoStart, timeout, value, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteBinaryI16(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteBinaryI16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteBinaryI16', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryI16', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteBinaryI16', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryI16', 'dataLayout', 5);
            validateattributes(writeArray, {'int16'}, {'vector'}, 'DAQmxWriteBinaryI16', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteBinaryI16', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteBinaryI16', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteBinaryI16', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteBinaryU16(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteBinaryU16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteBinaryU16', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryU16', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteBinaryU16', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryU16', 'dataLayout', 5);
            validateattributes(writeArray, {'uint16'}, {'vector'}, 'DAQmxWriteBinaryU16', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteBinaryU16', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteBinaryU16', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteBinaryU16', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteBinaryI32(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteBinaryI32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteBinaryI32', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryI32', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteBinaryI32', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryI32', 'dataLayout', 5);
            validateattributes(writeArray, {'int32'}, {'vector'}, 'DAQmxWriteBinaryI32', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteBinaryI32', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteBinaryI32', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteBinaryI32', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteBinaryU32(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteBinaryU32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteBinaryU32', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryU32', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteBinaryU32', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteBinaryU32', 'dataLayout', 5);
            validateattributes(writeArray, {'uint32'}, {'vector'}, 'DAQmxWriteBinaryU32', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteBinaryU32', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteBinaryU32', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteBinaryU32', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteDigitalU8(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteDigitalU8', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteDigitalU8', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU8', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteDigitalU8', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU8', 'dataLayout', 5);
            validateattributes(writeArray, {'uint8'}, {'vector'}, 'DAQmxWriteDigitalU8', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteDigitalU8', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalU8', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteDigitalU8', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteDigitalU16(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteDigitalU16', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteDigitalU16', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU16', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteDigitalU16', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU16', 'dataLayout', 5);
            validateattributes(writeArray, {'uint16'}, {'vector'}, 'DAQmxWriteDigitalU16', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteDigitalU16', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalU16', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteDigitalU16', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteDigitalU32(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteDigitalU32', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteDigitalU32', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU32', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteDigitalU32', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalU32', 'dataLayout', 5);
            validateattributes(writeArray, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalU32', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteDigitalU32', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalU32', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteDigitalU32', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, reserved] = DAQmxWriteDigitalScalarU32(taskHandle, autoStart, timeout, value, reserved)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteDigitalScalarU32', 'taskHandle', 1);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalScalarU32', 'autoStart', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteDigitalScalarU32', 'timeout', 3);
            validateattributes(value, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalScalarU32', 'value', 4);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalScalarU32', 'reserved', 5);
                [status, reserved]= mexNIDAQmx('DAQmxWriteDigitalScalarU32', taskHandle, autoStart, timeout, value, reserved);
        end

        function [status, sampsPerChanWritten, reserved] = DAQmxWriteDigitalLines(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(8, 8, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteDigitalLines', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteDigitalLines', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalLines', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteDigitalLines', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteDigitalLines', 'dataLayout', 5);
            validateattributes(writeArray, {'uint8'}, {'vector'}, 'DAQmxWriteDigitalLines', 'writeArray', 6);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteDigitalLines', 'sampsPerChanWritten', 7);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteDigitalLines', 'reserved', 8);
                [status, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteDigitalLines', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status, numSampsPerChanWritten, reserved] = DAQmxWriteCtrFreq(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrFreq', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteCtrFreq', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrFreq', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrFreq', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrFreq', 'dataLayout', 5);
            validateattributes(frequency, {'double'}, {'vector'}, 'DAQmxWriteCtrFreq', 'frequency', 6);
            validateattributes(dutyCycle, {'double'}, {'vector'}, 'DAQmxWriteCtrFreq', 'dutyCycle', 7);
            validateattributes(numSampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteCtrFreq', 'numSampsPerChanWritten', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrFreq', 'reserved', 9);
                [status, numSampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteCtrFreq', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, reserved);
        end

        function [status, reserved] = DAQmxWriteCtrFreqScalar(taskHandle, autoStart, timeout, frequency, dutyCycle, reserved)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrFreqScalar', 'taskHandle', 1);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrFreqScalar', 'autoStart', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrFreqScalar', 'timeout', 3);
            validateattributes(frequency, {'double'}, {'scalar'}, 'DAQmxWriteCtrFreqScalar', 'frequency', 4);
            validateattributes(dutyCycle, {'double'}, {'scalar'}, 'DAQmxWriteCtrFreqScalar', 'dutyCycle', 5);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrFreqScalar', 'reserved', 6);
                [status, reserved]= mexNIDAQmx('DAQmxWriteCtrFreqScalar', taskHandle, autoStart, timeout, frequency, dutyCycle, reserved);
        end

        function [status, numSampsPerChanWritten, reserved] = DAQmxWriteCtrTime(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrTime', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteCtrTime', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTime', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrTime', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTime', 'dataLayout', 5);
            validateattributes(highTime, {'double'}, {'vector'}, 'DAQmxWriteCtrTime', 'highTime', 6);
            validateattributes(lowTime, {'double'}, {'vector'}, 'DAQmxWriteCtrTime', 'lowTime', 7);
            validateattributes(numSampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteCtrTime', 'numSampsPerChanWritten', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTime', 'reserved', 9);
                [status, numSampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteCtrTime', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, reserved);
        end

        function [status, reserved] = DAQmxWriteCtrTimeScalar(taskHandle, autoStart, timeout, highTime, lowTime, reserved)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrTimeScalar', 'taskHandle', 1);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTimeScalar', 'autoStart', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrTimeScalar', 'timeout', 3);
            validateattributes(highTime, {'double'}, {'scalar'}, 'DAQmxWriteCtrTimeScalar', 'highTime', 4);
            validateattributes(lowTime, {'double'}, {'scalar'}, 'DAQmxWriteCtrTimeScalar', 'lowTime', 5);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTimeScalar', 'reserved', 6);
                [status, reserved]= mexNIDAQmx('DAQmxWriteCtrTimeScalar', taskHandle, autoStart, timeout, highTime, lowTime, reserved);
        end

        function [status, numSampsPerChanWritten, reserved] = DAQmxWriteCtrTicks(taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved)
            error(nargchk(9, 9, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrTicks', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'int32'}, {'scalar'}, 'DAQmxWriteCtrTicks', 'numSampsPerChan', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTicks', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrTicks', 'timeout', 4);
            validateattributes(dataLayout, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTicks', 'dataLayout', 5);
            validateattributes(highTicks, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTicks', 'highTicks', 6);
            validateattributes(lowTicks, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTicks', 'lowTicks', 7);
            validateattributes(numSampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteCtrTicks', 'numSampsPerChanWritten', 8);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTicks', 'reserved', 9);
                [status, numSampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteCtrTicks', taskHandle, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, reserved);
        end

        function [status, reserved] = DAQmxWriteCtrTicksScalar(taskHandle, autoStart, timeout, highTicks, lowTicks, reserved)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteCtrTicksScalar', 'taskHandle', 1);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTicksScalar', 'autoStart', 2);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteCtrTicksScalar', 'timeout', 3);
            validateattributes(highTicks, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTicksScalar', 'highTicks', 4);
            validateattributes(lowTicks, {'uint32'}, {'scalar'}, 'DAQmxWriteCtrTicksScalar', 'lowTicks', 5);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteCtrTicksScalar', 'reserved', 6);
                [status, reserved]= mexNIDAQmx('DAQmxWriteCtrTicksScalar', taskHandle, autoStart, timeout, highTicks, lowTicks, reserved);
        end

        function [status, writeArray, sampsPerChanWritten, reserved] = DAQmxWriteRaw(taskHandle, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(4, 4, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWriteRaw', 'taskHandle', 1);
            validateattributes(numSamps, {'int32'}, {'scalar'}, 'DAQmxWriteRaw', 'numSamps', 2);
            validateattributes(autoStart, {'uint32'}, {'scalar'}, 'DAQmxWriteRaw', 'autoStart', 3);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWriteRaw', 'timeout', 4);
            validateattributes(writeArray, {'uint32'}, {'vector'}, 'DAQmxWriteRaw', 'writeArray', 5);
            validateattributes(sampsPerChanWritten, {'int32'}, {'vector'}, 'DAQmxWriteRaw', 'sampsPerChanWritten', 6);
            validateattributes(reserved, {'uint32'}, {'vector'}, 'DAQmxWriteRaw', 'reserved', 7);
                [status, writeArray, sampsPerChanWritten, reserved]= mexNIDAQmx('DAQmxWriteRaw', taskHandle, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, reserved);
        end

        function [status] = DAQmxResetWriteAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetWriteAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetWriteAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxExportSignal(taskHandle, signalID, outputTerminal)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxExportSignal', 'taskHandle', 1);
            validateattributes(signalID, {'int32'}, {'scalar'}, 'DAQmxExportSignal', 'signalID', 2);
            validateattributes(outputTerminal, {'char'}, {'vector'}, 'DAQmxExportSignal', 'outputTerminal', 3);
                [status]= mexNIDAQmx('DAQmxExportSignal', taskHandle, signalID, outputTerminal);
        end

        function [status] = DAQmxResetExportedSignalAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSignalAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetExportedSignalAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetExportedSignalAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxCreateLinScale(name, slope, yIntercept, preScaledUnits, scaledUnits)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(name, {'char'}, {'vector'}, 'DAQmxCreateLinScale', 'name', 1);
            validateattributes(slope, {'double'}, {'scalar'}, 'DAQmxCreateLinScale', 'slope', 2);
            validateattributes(yIntercept, {'double'}, {'scalar'}, 'DAQmxCreateLinScale', 'yIntercept', 3);
            validateattributes(preScaledUnits, {'int32'}, {'scalar'}, 'DAQmxCreateLinScale', 'preScaledUnits', 4);
            validateattributes(scaledUnits, {'char'}, {'vector'}, 'DAQmxCreateLinScale', 'scaledUnits', 5);
                [status]= mexNIDAQmx('DAQmxCreateLinScale', name, slope, yIntercept, preScaledUnits, scaledUnits);
        end

        function [status] = DAQmxCreateMapScale(name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(name, {'char'}, {'vector'}, 'DAQmxCreateMapScale', 'name', 1);
            validateattributes(prescaledMin, {'double'}, {'scalar'}, 'DAQmxCreateMapScale', 'prescaledMin', 2);
            validateattributes(prescaledMax, {'double'}, {'scalar'}, 'DAQmxCreateMapScale', 'prescaledMax', 3);
            validateattributes(scaledMin, {'double'}, {'scalar'}, 'DAQmxCreateMapScale', 'scaledMin', 4);
            validateattributes(scaledMax, {'double'}, {'scalar'}, 'DAQmxCreateMapScale', 'scaledMax', 5);
            validateattributes(preScaledUnits, {'int32'}, {'scalar'}, 'DAQmxCreateMapScale', 'preScaledUnits', 6);
            validateattributes(scaledUnits, {'char'}, {'vector'}, 'DAQmxCreateMapScale', 'scaledUnits', 7);
                [status]= mexNIDAQmx('DAQmxCreateMapScale', name, prescaledMin, prescaledMax, scaledMin, scaledMax, preScaledUnits, scaledUnits);
        end

        function [status] = DAQmxCreatePolynomialScale(name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(name, {'char'}, {'vector'}, 'DAQmxCreatePolynomialScale', 'name', 1);
            validateattributes(forwardCoeffs, {'double'}, {'vector'}, 'DAQmxCreatePolynomialScale', 'forwardCoeffs', 2);
            validateattributes(numForwardCoeffsIn, {'uint32'}, {'scalar'}, 'DAQmxCreatePolynomialScale', 'numForwardCoeffsIn', 3);
            validateattributes(reverseCoeffs, {'double'}, {'vector'}, 'DAQmxCreatePolynomialScale', 'reverseCoeffs', 4);
            validateattributes(numReverseCoeffsIn, {'uint32'}, {'scalar'}, 'DAQmxCreatePolynomialScale', 'numReverseCoeffsIn', 5);
            validateattributes(preScaledUnits, {'int32'}, {'scalar'}, 'DAQmxCreatePolynomialScale', 'preScaledUnits', 6);
            validateattributes(scaledUnits, {'char'}, {'vector'}, 'DAQmxCreatePolynomialScale', 'scaledUnits', 7);
                [status]= mexNIDAQmx('DAQmxCreatePolynomialScale', name, forwardCoeffs, numForwardCoeffsIn, reverseCoeffs, numReverseCoeffsIn, preScaledUnits, scaledUnits);
        end

        function [status] = DAQmxCreateTableScale(name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(name, {'char'}, {'vector'}, 'DAQmxCreateTableScale', 'name', 1);
            validateattributes(prescaledVals, {'double'}, {'vector'}, 'DAQmxCreateTableScale', 'prescaledVals', 2);
            validateattributes(numPrescaledValsIn, {'uint32'}, {'scalar'}, 'DAQmxCreateTableScale', 'numPrescaledValsIn', 3);
            validateattributes(scaledVals, {'double'}, {'vector'}, 'DAQmxCreateTableScale', 'scaledVals', 4);
            validateattributes(numScaledValsIn, {'uint32'}, {'scalar'}, 'DAQmxCreateTableScale', 'numScaledValsIn', 5);
            validateattributes(preScaledUnits, {'int32'}, {'scalar'}, 'DAQmxCreateTableScale', 'preScaledUnits', 6);
            validateattributes(scaledUnits, {'char'}, {'vector'}, 'DAQmxCreateTableScale', 'scaledUnits', 7);
                [status]= mexNIDAQmx('DAQmxCreateTableScale', name, prescaledVals, numPrescaledValsIn, scaledVals, numScaledValsIn, preScaledUnits, scaledUnits);
        end

        function [status, reverseCoeffs] = DAQmxCalculateReversePolyCoeff(forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(forwardCoeffs, {'double'}, {'vector'}, 'DAQmxCalculateReversePolyCoeff', 'forwardCoeffs', 1);
            validateattributes(numForwardCoeffsIn, {'uint32'}, {'scalar'}, 'DAQmxCalculateReversePolyCoeff', 'numForwardCoeffsIn', 2);
            validateattributes(minValX, {'double'}, {'scalar'}, 'DAQmxCalculateReversePolyCoeff', 'minValX', 3);
            validateattributes(maxValX, {'double'}, {'scalar'}, 'DAQmxCalculateReversePolyCoeff', 'maxValX', 4);
            validateattributes(numPointsToCompute, {'int32'}, {'scalar'}, 'DAQmxCalculateReversePolyCoeff', 'numPointsToCompute', 5);
            validateattributes(reversePolyOrder, {'int32'}, {'scalar'}, 'DAQmxCalculateReversePolyCoeff', 'reversePolyOrder', 6);
            validateattributes(reverseCoeffs, {'double'}, {'vector'}, 'DAQmxCalculateReversePolyCoeff', 'reverseCoeffs', 7);
                [status, reverseCoeffs]= mexNIDAQmx('DAQmxCalculateReversePolyCoeff', forwardCoeffs, numForwardCoeffsIn, minValX, maxValX, numPointsToCompute, reversePolyOrder, reverseCoeffs);
        end

        function [status] = DAQmxCfgInputBuffer(taskHandle, numSampsPerChan)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgInputBuffer', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'uint32'}, {'scalar'}, 'DAQmxCfgInputBuffer', 'numSampsPerChan', 2);
                [status]= mexNIDAQmx('DAQmxCfgInputBuffer', taskHandle, numSampsPerChan);
        end

        function [status] = DAQmxCfgOutputBuffer(taskHandle, numSampsPerChan)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxCfgOutputBuffer', 'taskHandle', 1);
            validateattributes(numSampsPerChan, {'uint32'}, {'scalar'}, 'DAQmxCfgOutputBuffer', 'numSampsPerChan', 2);
                [status]= mexNIDAQmx('DAQmxCfgOutputBuffer', taskHandle, numSampsPerChan);
        end

        function [status, value] = DAQmxGetBufferAttribute(taskHandle, attribute, value)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetBufferAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxGetBufferAttribute', 'attribute', 2);
            validateattributes(value, {'uint32'}, {'vector'}, 'DAQmxGetBufferAttribute', 'value', 3);
                [status, value]= mexNIDAQmx('DAQmxGetBufferAttribute', taskHandle, attribute, value);
        end

        function [status] = DAQmxResetBufferAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetBufferAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetBufferAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetBufferAttribute', taskHandle, attribute);
        end

        function [status, taskHandle] = DAQmxSwitchCreateScanList(scanList, taskHandle)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scanList, {'char'}, {'vector'}, 'DAQmxSwitchCreateScanList', 'scanList', 1);
            validateattributes(taskHandle, {'uint64'}, {'vector'}, 'DAQmxSwitchCreateScanList', 'taskHandle', 2);
                [status, taskHandle]= mexNIDAQmx('DAQmxSwitchCreateScanList', scanList, taskHandle);
        end

        function [status] = DAQmxSwitchConnect(switchChannel1, switchChannel2, waitForSettling)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(switchChannel1, {'char'}, {'vector'}, 'DAQmxSwitchConnect', 'switchChannel1', 1);
            validateattributes(switchChannel2, {'char'}, {'vector'}, 'DAQmxSwitchConnect', 'switchChannel2', 2);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchConnect', 'waitForSettling', 3);
                [status]= mexNIDAQmx('DAQmxSwitchConnect', switchChannel1, switchChannel2, waitForSettling);
        end

        function [status] = DAQmxSwitchConnectMulti(connectionList, waitForSettling)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(connectionList, {'char'}, {'vector'}, 'DAQmxSwitchConnectMulti', 'connectionList', 1);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchConnectMulti', 'waitForSettling', 2);
                [status]= mexNIDAQmx('DAQmxSwitchConnectMulti', connectionList, waitForSettling);
        end

        function [status] = DAQmxSwitchDisconnect(switchChannel1, switchChannel2, waitForSettling)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(switchChannel1, {'char'}, {'vector'}, 'DAQmxSwitchDisconnect', 'switchChannel1', 1);
            validateattributes(switchChannel2, {'char'}, {'vector'}, 'DAQmxSwitchDisconnect', 'switchChannel2', 2);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchDisconnect', 'waitForSettling', 3);
                [status]= mexNIDAQmx('DAQmxSwitchDisconnect', switchChannel1, switchChannel2, waitForSettling);
        end

        function [status] = DAQmxSwitchDisconnectMulti(connectionList, waitForSettling)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(connectionList, {'char'}, {'vector'}, 'DAQmxSwitchDisconnectMulti', 'connectionList', 1);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchDisconnectMulti', 'waitForSettling', 2);
                [status]= mexNIDAQmx('DAQmxSwitchDisconnectMulti', connectionList, waitForSettling);
        end

        function [status] = DAQmxSwitchDisconnectAll(deviceName, waitForSettling)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSwitchDisconnectAll', 'deviceName', 1);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchDisconnectAll', 'waitForSettling', 2);
                [status]= mexNIDAQmx('DAQmxSwitchDisconnectAll', deviceName, waitForSettling);
        end

        function [status] = DAQmxSwitchSetTopologyAndReset(deviceName, newTopology)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSwitchSetTopologyAndReset', 'deviceName', 1);
            validateattributes(newTopology, {'char'}, {'vector'}, 'DAQmxSwitchSetTopologyAndReset', 'newTopology', 2);
                [status]= mexNIDAQmx('DAQmxSwitchSetTopologyAndReset', deviceName, newTopology);
        end

        function [status, path, pathStatus] = DAQmxSwitchFindPath(switchChannel1, switchChannel2, path, pathBufferSize, pathStatus)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(switchChannel1, {'char'}, {'vector'}, 'DAQmxSwitchFindPath', 'switchChannel1', 1);
            validateattributes(switchChannel2, {'char'}, {'vector'}, 'DAQmxSwitchFindPath', 'switchChannel2', 2);
            validateattributes(path, {'char'}, {'vector'}, 'DAQmxSwitchFindPath', 'path', 3);
            validateattributes(pathBufferSize, {'uint32'}, {'scalar'}, 'DAQmxSwitchFindPath', 'pathBufferSize', 4);
            validateattributes(pathStatus, {'int32'}, {'vector'}, 'DAQmxSwitchFindPath', 'pathStatus', 5);
                [status, path, pathStatus]= mexNIDAQmx('DAQmxSwitchFindPath', switchChannel1, switchChannel2, path, pathBufferSize, pathStatus);
        end

        function [status] = DAQmxSwitchOpenRelays(relayList, waitForSettling)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(relayList, {'char'}, {'vector'}, 'DAQmxSwitchOpenRelays', 'relayList', 1);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchOpenRelays', 'waitForSettling', 2);
                [status]= mexNIDAQmx('DAQmxSwitchOpenRelays', relayList, waitForSettling);
        end

        function [status] = DAQmxSwitchCloseRelays(relayList, waitForSettling)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(relayList, {'char'}, {'vector'}, 'DAQmxSwitchCloseRelays', 'relayList', 1);
            validateattributes(waitForSettling, {'uint32'}, {'scalar'}, 'DAQmxSwitchCloseRelays', 'waitForSettling', 2);
                [status]= mexNIDAQmx('DAQmxSwitchCloseRelays', relayList, waitForSettling);
        end

        function [status, count] = DAQmxSwitchGetSingleRelayCount(relayName, count)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(relayName, {'char'}, {'vector'}, 'DAQmxSwitchGetSingleRelayCount', 'relayName', 1);
            validateattributes(count, {'uint32'}, {'vector'}, 'DAQmxSwitchGetSingleRelayCount', 'count', 2);
                [status, count]= mexNIDAQmx('DAQmxSwitchGetSingleRelayCount', relayName, count);
        end

        function [status, count, numRelayCountsRead] = DAQmxSwitchGetMultiRelayCount(relayList, count, countArraySize, numRelayCountsRead)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(relayList, {'char'}, {'vector'}, 'DAQmxSwitchGetMultiRelayCount', 'relayList', 1);
            validateattributes(count, {'uint32'}, {'vector'}, 'DAQmxSwitchGetMultiRelayCount', 'count', 2);
            validateattributes(countArraySize, {'uint32'}, {'scalar'}, 'DAQmxSwitchGetMultiRelayCount', 'countArraySize', 3);
            validateattributes(numRelayCountsRead, {'uint32'}, {'vector'}, 'DAQmxSwitchGetMultiRelayCount', 'numRelayCountsRead', 4);
                [status, count, numRelayCountsRead]= mexNIDAQmx('DAQmxSwitchGetMultiRelayCount', relayList, count, countArraySize, numRelayCountsRead);
        end

        function [status, relayPos] = DAQmxSwitchGetSingleRelayPos(relayName, relayPos)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(relayName, {'char'}, {'vector'}, 'DAQmxSwitchGetSingleRelayPos', 'relayName', 1);
            validateattributes(relayPos, {'uint32'}, {'vector'}, 'DAQmxSwitchGetSingleRelayPos', 'relayPos', 2);
                [status, relayPos]= mexNIDAQmx('DAQmxSwitchGetSingleRelayPos', relayName, relayPos);
        end

        function [status, relayPos, numRelayPossRead] = DAQmxSwitchGetMultiRelayPos(relayList, relayPos, relayPosArraySize, numRelayPossRead)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(3, 3, nargout, 'struct'));
            validateattributes(relayList, {'char'}, {'vector'}, 'DAQmxSwitchGetMultiRelayPos', 'relayList', 1);
            validateattributes(relayPos, {'uint32'}, {'vector'}, 'DAQmxSwitchGetMultiRelayPos', 'relayPos', 2);
            validateattributes(relayPosArraySize, {'uint32'}, {'scalar'}, 'DAQmxSwitchGetMultiRelayPos', 'relayPosArraySize', 3);
            validateattributes(numRelayPossRead, {'uint32'}, {'vector'}, 'DAQmxSwitchGetMultiRelayPos', 'numRelayPossRead', 4);
                [status, relayPos, numRelayPossRead]= mexNIDAQmx('DAQmxSwitchGetMultiRelayPos', relayList, relayPos, relayPosArraySize, numRelayPossRead);
        end

        function [status] = DAQmxSwitchWaitForSettling(deviceName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSwitchWaitForSettling', 'deviceName', 1);
                [status]= mexNIDAQmx('DAQmxSwitchWaitForSettling', deviceName);
        end

        function [status, value] = DAQmxGetSwitchChanAttribute(switchChannelName, attribute, value)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanAttribute', 'switchChannelName', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxGetSwitchChanAttribute', 'attribute', 2);
            validateattributes(value, {'uint32'}, {'vector'}, 'DAQmxGetSwitchChanAttribute', 'value', 3);
                [status, value]= mexNIDAQmx('DAQmxGetSwitchChanAttribute', switchChannelName, attribute, value);
        end

        function [status, value] = DAQmxGetSwitchScanAttribute(taskHandle, attribute, value)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSwitchScanAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxGetSwitchScanAttribute', 'attribute', 2);
            validateattributes(value, {'uint32'}, {'vector'}, 'DAQmxGetSwitchScanAttribute', 'value', 3);
                [status, value]= mexNIDAQmx('DAQmxGetSwitchScanAttribute', taskHandle, attribute, value);
        end

        function [status] = DAQmxResetSwitchScanAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSwitchScanAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetSwitchScanAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetSwitchScanAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxConnectTerms(sourceTerminal, destinationTerminal, signalModifiers)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(sourceTerminal, {'char'}, {'vector'}, 'DAQmxConnectTerms', 'sourceTerminal', 1);
            validateattributes(destinationTerminal, {'char'}, {'vector'}, 'DAQmxConnectTerms', 'destinationTerminal', 2);
            validateattributes(signalModifiers, {'int32'}, {'scalar'}, 'DAQmxConnectTerms', 'signalModifiers', 3);
                [status]= mexNIDAQmx('DAQmxConnectTerms', sourceTerminal, destinationTerminal, signalModifiers);
        end

        function [status] = DAQmxDisconnectTerms(sourceTerminal, destinationTerminal)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(sourceTerminal, {'char'}, {'vector'}, 'DAQmxDisconnectTerms', 'sourceTerminal', 1);
            validateattributes(destinationTerminal, {'char'}, {'vector'}, 'DAQmxDisconnectTerms', 'destinationTerminal', 2);
                [status]= mexNIDAQmx('DAQmxDisconnectTerms', sourceTerminal, destinationTerminal);
        end

        function [status] = DAQmxTristateOutputTerm(outputTerminal)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(outputTerminal, {'char'}, {'vector'}, 'DAQmxTristateOutputTerm', 'outputTerminal', 1);
                [status]= mexNIDAQmx('DAQmxTristateOutputTerm', outputTerminal);
        end

        function [status] = DAQmxResetDevice(deviceName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxResetDevice', 'deviceName', 1);
                [status]= mexNIDAQmx('DAQmxResetDevice', deviceName);
        end

        function [status] = DAQmxSelfTestDevice(deviceName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSelfTestDevice', 'deviceName', 1);
                [status]= mexNIDAQmx('DAQmxSelfTestDevice', deviceName);
        end

        function [status] = DAQmxControlWatchdogTask(taskHandle, action)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxControlWatchdogTask', 'taskHandle', 1);
            validateattributes(action, {'int32'}, {'scalar'}, 'DAQmxControlWatchdogTask', 'action', 2);
                [status]= mexNIDAQmx('DAQmxControlWatchdogTask', taskHandle, action);
        end

        function [status] = DAQmxResetWatchdogAttribute(taskHandle, lines, attribute)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWatchdogAttribute', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxResetWatchdogAttribute', 'lines', 2);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetWatchdogAttribute', 'attribute', 3);
                [status]= mexNIDAQmx('DAQmxResetWatchdogAttribute', taskHandle, lines, attribute);
        end

        function [status] = DAQmxSelfCal(deviceName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSelfCal', 'deviceName', 1);
                [status]= mexNIDAQmx('DAQmxSelfCal', deviceName);
        end

        function [status] = DAQmxPerformBridgeOffsetNullingCal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxPerformBridgeOffsetNullingCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxPerformBridgeOffsetNullingCal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxPerformBridgeOffsetNullingCal', taskHandle, channel);
        end

        function [status] = DAQmxPerformBridgeOffsetNullingCalEx(taskHandle, channel, skipUnsupportedChannels)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxPerformBridgeOffsetNullingCalEx', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxPerformBridgeOffsetNullingCalEx', 'channel', 2);
            validateattributes(skipUnsupportedChannels, {'uint32'}, {'scalar'}, 'DAQmxPerformBridgeOffsetNullingCalEx', 'skipUnsupportedChannels', 3);
                [status]= mexNIDAQmx('DAQmxPerformBridgeOffsetNullingCalEx', taskHandle, channel, skipUnsupportedChannels);
        end

        function [status] = DAQmxPerformStrainShuntCal(taskHandle, channel, shuntResistorValue, shuntResistorLocation, skipUnsupportedChannels)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxPerformStrainShuntCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxPerformStrainShuntCal', 'channel', 2);
            validateattributes(shuntResistorValue, {'double'}, {'scalar'}, 'DAQmxPerformStrainShuntCal', 'shuntResistorValue', 3);
            validateattributes(shuntResistorLocation, {'int32'}, {'scalar'}, 'DAQmxPerformStrainShuntCal', 'shuntResistorLocation', 4);
            validateattributes(skipUnsupportedChannels, {'uint32'}, {'scalar'}, 'DAQmxPerformStrainShuntCal', 'skipUnsupportedChannels', 5);
                [status]= mexNIDAQmx('DAQmxPerformStrainShuntCal', taskHandle, channel, shuntResistorValue, shuntResistorLocation, skipUnsupportedChannels);
        end

        function [status] = DAQmxPerformBridgeShuntCal(taskHandle, channel, shuntResistorValue, shuntResistorLocation, bridgeResistance, skipUnsupportedChannels)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxPerformBridgeShuntCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxPerformBridgeShuntCal', 'channel', 2);
            validateattributes(shuntResistorValue, {'double'}, {'scalar'}, 'DAQmxPerformBridgeShuntCal', 'shuntResistorValue', 3);
            validateattributes(shuntResistorLocation, {'int32'}, {'scalar'}, 'DAQmxPerformBridgeShuntCal', 'shuntResistorLocation', 4);
            validateattributes(bridgeResistance, {'double'}, {'scalar'}, 'DAQmxPerformBridgeShuntCal', 'bridgeResistance', 5);
            validateattributes(skipUnsupportedChannels, {'uint32'}, {'scalar'}, 'DAQmxPerformBridgeShuntCal', 'skipUnsupportedChannels', 6);
                [status]= mexNIDAQmx('DAQmxPerformBridgeShuntCal', taskHandle, channel, shuntResistorValue, shuntResistorLocation, bridgeResistance, skipUnsupportedChannels);
        end

        function [status, year, month, day, hour, minute] = DAQmxGetSelfCalLastDateAndTime(deviceName, year, month, day, hour, minute)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(6, 6, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'deviceName', 1);
            validateattributes(year, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'year', 2);
            validateattributes(month, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'month', 3);
            validateattributes(day, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'day', 4);
            validateattributes(hour, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'hour', 5);
            validateattributes(minute, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalLastDateAndTime', 'minute', 6);
                [status, year, month, day, hour, minute]= mexNIDAQmx('DAQmxGetSelfCalLastDateAndTime', deviceName, year, month, day, hour, minute);
        end

        function [status, year, month, day, hour, minute] = DAQmxGetExtCalLastDateAndTime(deviceName, year, month, day, hour, minute)
            error(nargchk(6, 6, nargin, 'struct'));
            error(nargoutchk(6, 6, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'deviceName', 1);
            validateattributes(year, {'uint32'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'year', 2);
            validateattributes(month, {'uint32'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'month', 3);
            validateattributes(day, {'uint32'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'day', 4);
            validateattributes(hour, {'uint32'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'hour', 5);
            validateattributes(minute, {'uint32'}, {'vector'}, 'DAQmxGetExtCalLastDateAndTime', 'minute', 6);
                [status, year, month, day, hour, minute]= mexNIDAQmx('DAQmxGetExtCalLastDateAndTime', deviceName, year, month, day, hour, minute);
        end

        function [status] = DAQmxRestoreLastExtCalConst(deviceName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxRestoreLastExtCalConst', 'deviceName', 1);
                [status]= mexNIDAQmx('DAQmxRestoreLastExtCalConst', deviceName);
        end

        function [status] = DAQmxESeriesCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxESeriesCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxESeriesCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxESeriesCalAdjust', calHandle, referenceVoltage);
        end

        function [status] = DAQmxMSeriesCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxMSeriesCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxMSeriesCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxMSeriesCalAdjust', calHandle, referenceVoltage);
        end

        function [status] = DAQmxSSeriesCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSSeriesCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxSSeriesCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxSSeriesCalAdjust', calHandle, referenceVoltage);
        end

        function [status] = DAQmxSCBaseboardCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSCBaseboardCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxSCBaseboardCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxSCBaseboardCalAdjust', calHandle, referenceVoltage);
        end

        function [status] = DAQmxAOSeriesCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAOSeriesCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxAOSeriesCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxAOSeriesCalAdjust', calHandle, referenceVoltage);
        end

        function [status] = DAQmxXSeriesCalAdjust(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxXSeriesCalAdjust', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxXSeriesCalAdjust', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxXSeriesCalAdjust', calHandle, referenceVoltage);
        end

        function [status, calSupported] = DAQmxDeviceSupportsCal(deviceName, calSupported)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxDeviceSupportsCal', 'deviceName', 1);
            validateattributes(calSupported, {'uint32'}, {'vector'}, 'DAQmxDeviceSupportsCal', 'calSupported', 2);
                [status, calSupported]= mexNIDAQmx('DAQmxDeviceSupportsCal', deviceName, calSupported);
        end

        function [status, calHandle] = DAQmxInitExtCal(deviceName, password, calHandle)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxInitExtCal', 'deviceName', 1);
            validateattributes(password, {'char'}, {'vector'}, 'DAQmxInitExtCal', 'password', 2);
            validateattributes(calHandle, {'uint32'}, {'vector'}, 'DAQmxInitExtCal', 'calHandle', 3);
                [status, calHandle]= mexNIDAQmx('DAQmxInitExtCal', deviceName, password, calHandle);
        end

        function [status] = DAQmxCloseExtCal(calHandle, action)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxCloseExtCal', 'calHandle', 1);
            validateattributes(action, {'int32'}, {'scalar'}, 'DAQmxCloseExtCal', 'action', 2);
                [status]= mexNIDAQmx('DAQmxCloseExtCal', calHandle, action);
        end

        function [status] = DAQmxChangeExtCalPassword(deviceName, password, newPassword)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxChangeExtCalPassword', 'deviceName', 1);
            validateattributes(password, {'char'}, {'vector'}, 'DAQmxChangeExtCalPassword', 'password', 2);
            validateattributes(newPassword, {'char'}, {'vector'}, 'DAQmxChangeExtCalPassword', 'newPassword', 3);
                [status]= mexNIDAQmx('DAQmxChangeExtCalPassword', deviceName, password, newPassword);
        end

        function [status] = DAQmxAdjustDSAAICal(calHandle, referenceVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSAAICal', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAICal', 'referenceVoltage', 2);
                [status]= mexNIDAQmx('DAQmxAdjustDSAAICal', calHandle, referenceVoltage);
        end

        function [status] = DAQmxAdjustDSAAICalEx(calHandle, referenceVoltage, inputsShorted)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSAAICalEx', 'calHandle', 1);
            validateattributes(referenceVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAICalEx', 'referenceVoltage', 2);
            validateattributes(inputsShorted, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSAAICalEx', 'inputsShorted', 3);
                [status]= mexNIDAQmx('DAQmxAdjustDSAAICalEx', calHandle, referenceVoltage, inputsShorted);
        end

        function [status] = DAQmxAdjustDSAAOCal(calHandle, channel, requestedLowVoltage, actualLowVoltage, requestedHighVoltage, actualHighVoltage, gainSetting)
            error(nargchk(7, 7, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'calHandle', 1);
            validateattributes(channel, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'channel', 2);
            validateattributes(requestedLowVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'requestedLowVoltage', 3);
            validateattributes(actualLowVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'actualLowVoltage', 4);
            validateattributes(requestedHighVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'requestedHighVoltage', 5);
            validateattributes(actualHighVoltage, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'actualHighVoltage', 6);
            validateattributes(gainSetting, {'double'}, {'scalar'}, 'DAQmxAdjustDSAAOCal', 'gainSetting', 7);
                [status]= mexNIDAQmx('DAQmxAdjustDSAAOCal', calHandle, channel, requestedLowVoltage, actualLowVoltage, requestedHighVoltage, actualHighVoltage, gainSetting);
        end

        function [status] = DAQmxAdjustDSATimebaseCal(calHandle, referenceFrequency)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjustDSATimebaseCal', 'calHandle', 1);
            validateattributes(referenceFrequency, {'double'}, {'scalar'}, 'DAQmxAdjustDSATimebaseCal', 'referenceFrequency', 2);
                [status]= mexNIDAQmx('DAQmxAdjustDSATimebaseCal', calHandle, referenceFrequency);
        end

        function [status] = DAQmxAdjust4204Cal(calHandle, channelNames, lowPassFreq, trackHoldEnabled, inputVal)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4204Cal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAdjust4204Cal', 'channelNames', 2);
            validateattributes(lowPassFreq, {'double'}, {'scalar'}, 'DAQmxAdjust4204Cal', 'lowPassFreq', 3);
            validateattributes(trackHoldEnabled, {'uint32'}, {'scalar'}, 'DAQmxAdjust4204Cal', 'trackHoldEnabled', 4);
            validateattributes(inputVal, {'double'}, {'scalar'}, 'DAQmxAdjust4204Cal', 'inputVal', 5);
                [status]= mexNIDAQmx('DAQmxAdjust4204Cal', calHandle, channelNames, lowPassFreq, trackHoldEnabled, inputVal);
        end

        function [status] = DAQmxAdjust4220Cal(calHandle, channelNames, gain, inputVal)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4220Cal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAdjust4220Cal', 'channelNames', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxAdjust4220Cal', 'gain', 3);
            validateattributes(inputVal, {'double'}, {'scalar'}, 'DAQmxAdjust4220Cal', 'inputVal', 4);
                [status]= mexNIDAQmx('DAQmxAdjust4220Cal', calHandle, channelNames, gain, inputVal);
        end

        function [status] = DAQmxAdjust4224Cal(calHandle, channelNames, gain, inputVal)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4224Cal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAdjust4224Cal', 'channelNames', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxAdjust4224Cal', 'gain', 3);
            validateattributes(inputVal, {'double'}, {'scalar'}, 'DAQmxAdjust4224Cal', 'inputVal', 4);
                [status]= mexNIDAQmx('DAQmxAdjust4224Cal', calHandle, channelNames, gain, inputVal);
        end

        function [status] = DAQmxAdjust4225Cal(calHandle, channelNames, gain, inputVal)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4225Cal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAdjust4225Cal', 'channelNames', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxAdjust4225Cal', 'gain', 3);
            validateattributes(inputVal, {'double'}, {'scalar'}, 'DAQmxAdjust4225Cal', 'inputVal', 4);
                [status]= mexNIDAQmx('DAQmxAdjust4225Cal', calHandle, channelNames, gain, inputVal);
        end

        function [status] = DAQmxSetup433xCal(calHandle, channelNames, excitationVoltage)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup433xCal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxSetup433xCal', 'channelNames', 2);
            validateattributes(excitationVoltage, {'double'}, {'scalar'}, 'DAQmxSetup433xCal', 'excitationVoltage', 3);
                [status]= mexNIDAQmx('DAQmxSetup433xCal', calHandle, channelNames, excitationVoltage);
        end

        function [status] = DAQmxAdjust433xCal(calHandle, refVoltage, refExcitation, shuntLocation)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust433xCal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust433xCal', 'refVoltage', 2);
            validateattributes(refExcitation, {'double'}, {'scalar'}, 'DAQmxAdjust433xCal', 'refExcitation', 3);
            validateattributes(shuntLocation, {'int32'}, {'scalar'}, 'DAQmxAdjust433xCal', 'shuntLocation', 4);
                [status]= mexNIDAQmx('DAQmxAdjust433xCal', calHandle, refVoltage, refExcitation, shuntLocation);
        end

        function [status] = DAQmxAdjust4300Cal(calHandle, refVoltage)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4300Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust4300Cal', 'refVoltage', 2);
                [status]= mexNIDAQmx('DAQmxAdjust4300Cal', calHandle, refVoltage);
        end

        function [status] = DAQmxAdjust4353Cal(calHandle, channelNames, refVal)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust4353Cal', 'calHandle', 1);
            validateattributes(channelNames, {'char'}, {'vector'}, 'DAQmxAdjust4353Cal', 'channelNames', 2);
            validateattributes(refVal, {'double'}, {'scalar'}, 'DAQmxAdjust4353Cal', 'refVal', 3);
                [status]= mexNIDAQmx('DAQmxAdjust4353Cal', calHandle, channelNames, refVal);
        end

        function [status] = DAQmxSetup1102Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1102Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1102Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1102Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1102Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1102Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1102Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1102Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1102Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1102Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1104Cal(calHandle, channelName)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1104Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1104Cal', 'channelName', 2);
                [status]= mexNIDAQmx('DAQmxSetup1104Cal', calHandle, channelName);
        end

        function [status] = DAQmxAdjust1104Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1104Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1104Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1104Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1104Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1112Cal(calHandle, channelName)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1112Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1112Cal', 'channelName', 2);
                [status]= mexNIDAQmx('DAQmxSetup1112Cal', calHandle, channelName);
        end

        function [status] = DAQmxAdjust1112Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1112Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1112Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1112Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1112Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1122Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1122Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1122Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1122Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1122Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1122Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1122Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1122Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1122Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1122Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1124Cal(calHandle, channelName, range, dacValue)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1124Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1124Cal', 'channelName', 2);
            validateattributes(range, {'int32'}, {'scalar'}, 'DAQmxSetup1124Cal', 'range', 3);
            validateattributes(dacValue, {'uint32'}, {'scalar'}, 'DAQmxSetup1124Cal', 'dacValue', 4);
                [status]= mexNIDAQmx('DAQmxSetup1124Cal', calHandle, channelName, range, dacValue);
        end

        function [status] = DAQmxAdjust1124Cal(calHandle, measOutput)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1124Cal', 'calHandle', 1);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1124Cal', 'measOutput', 2);
                [status]= mexNIDAQmx('DAQmxAdjust1124Cal', calHandle, measOutput);
        end

        function [status] = DAQmxSetup1125Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1125Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1125Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1125Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1125Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1125Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1125Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1125Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1125Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1125Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1126Cal(calHandle, channelName, upperFreqLimit)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1126Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1126Cal', 'channelName', 2);
            validateattributes(upperFreqLimit, {'double'}, {'scalar'}, 'DAQmxSetup1126Cal', 'upperFreqLimit', 3);
                [status]= mexNIDAQmx('DAQmxSetup1126Cal', calHandle, channelName, upperFreqLimit);
        end

        function [status] = DAQmxAdjust1126Cal(calHandle, refFreq, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1126Cal', 'calHandle', 1);
            validateattributes(refFreq, {'double'}, {'scalar'}, 'DAQmxAdjust1126Cal', 'refFreq', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1126Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1126Cal', calHandle, refFreq, measOutput);
        end

        function [status] = DAQmxSetup1141Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1141Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1141Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1141Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1141Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1141Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1141Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1141Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1141Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1141Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1142Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1142Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1142Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1142Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1142Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1142Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1142Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1142Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1142Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1142Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1143Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1143Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1143Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1143Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1143Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1143Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1143Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1143Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1143Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1143Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1502Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1502Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1502Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1502Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1502Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1502Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1502Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1502Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1502Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1502Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1503Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1503Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1503Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1503Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1503Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1503Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1503Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1503Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1503Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1503Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxAdjust1503CurrentCal(calHandle, channelName, measCurrent)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1503CurrentCal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxAdjust1503CurrentCal', 'channelName', 2);
            validateattributes(measCurrent, {'double'}, {'scalar'}, 'DAQmxAdjust1503CurrentCal', 'measCurrent', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1503CurrentCal', calHandle, channelName, measCurrent);
        end

        function [status] = DAQmxSetup1520Cal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1520Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1520Cal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup1520Cal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup1520Cal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust1520Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1520Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1520Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1520Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1520Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1521Cal(calHandle, channelName)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1521Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1521Cal', 'channelName', 2);
                [status]= mexNIDAQmx('DAQmxSetup1521Cal', calHandle, channelName);
        end

        function [status] = DAQmxAdjust1521Cal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1521Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1521Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1521Cal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust1521Cal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup153xCal(calHandle, channelName, gain)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup153xCal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup153xCal', 'channelName', 2);
            validateattributes(gain, {'double'}, {'scalar'}, 'DAQmxSetup153xCal', 'gain', 3);
                [status]= mexNIDAQmx('DAQmxSetup153xCal', calHandle, channelName, gain);
        end

        function [status] = DAQmxAdjust153xCal(calHandle, refVoltage, measOutput)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust153xCal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust153xCal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust153xCal', 'measOutput', 3);
                [status]= mexNIDAQmx('DAQmxAdjust153xCal', calHandle, refVoltage, measOutput);
        end

        function [status] = DAQmxSetup1540Cal(calHandle, channelName, excitationVoltage, excitationFreq)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxSetup1540Cal', 'calHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSetup1540Cal', 'channelName', 2);
            validateattributes(excitationVoltage, {'double'}, {'scalar'}, 'DAQmxSetup1540Cal', 'excitationVoltage', 3);
            validateattributes(excitationFreq, {'double'}, {'scalar'}, 'DAQmxSetup1540Cal', 'excitationFreq', 4);
                [status]= mexNIDAQmx('DAQmxSetup1540Cal', calHandle, channelName, excitationVoltage, excitationFreq);
        end

        function [status] = DAQmxAdjust1540Cal(calHandle, refVoltage, measOutput, inputCalSource)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(calHandle, {'uint32'}, {'scalar'}, 'DAQmxAdjust1540Cal', 'calHandle', 1);
            validateattributes(refVoltage, {'double'}, {'scalar'}, 'DAQmxAdjust1540Cal', 'refVoltage', 2);
            validateattributes(measOutput, {'double'}, {'scalar'}, 'DAQmxAdjust1540Cal', 'measOutput', 3);
            validateattributes(inputCalSource, {'int32'}, {'scalar'}, 'DAQmxAdjust1540Cal', 'inputCalSource', 4);
                [status]= mexNIDAQmx('DAQmxAdjust1540Cal', calHandle, refVoltage, measOutput, inputCalSource);
        end

        function [status] = DAQmxConfigureTEDS(physicalChannel, filePath)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxConfigureTEDS', 'physicalChannel', 1);
            validateattributes(filePath, {'char'}, {'vector'}, 'DAQmxConfigureTEDS', 'filePath', 2);
                [status]= mexNIDAQmx('DAQmxConfigureTEDS', physicalChannel, filePath);
        end

        function [status] = DAQmxClearTEDS(physicalChannel)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxClearTEDS', 'physicalChannel', 1);
                [status]= mexNIDAQmx('DAQmxClearTEDS', physicalChannel);
        end

        function [status] = DAQmxWriteToTEDSFromArray(physicalChannel, bitStream, arraySize, basicTEDSOptions)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxWriteToTEDSFromArray', 'physicalChannel', 1);
            validateattributes(bitStream, {'uint8'}, {'vector'}, 'DAQmxWriteToTEDSFromArray', 'bitStream', 2);
            validateattributes(arraySize, {'uint32'}, {'scalar'}, 'DAQmxWriteToTEDSFromArray', 'arraySize', 3);
            validateattributes(basicTEDSOptions, {'int32'}, {'scalar'}, 'DAQmxWriteToTEDSFromArray', 'basicTEDSOptions', 4);
                [status]= mexNIDAQmx('DAQmxWriteToTEDSFromArray', physicalChannel, bitStream, arraySize, basicTEDSOptions);
        end

        function [status] = DAQmxWriteToTEDSFromFile(physicalChannel, filePath, basicTEDSOptions)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxWriteToTEDSFromFile', 'physicalChannel', 1);
            validateattributes(filePath, {'char'}, {'vector'}, 'DAQmxWriteToTEDSFromFile', 'filePath', 2);
            validateattributes(basicTEDSOptions, {'int32'}, {'scalar'}, 'DAQmxWriteToTEDSFromFile', 'basicTEDSOptions', 3);
                [status]= mexNIDAQmx('DAQmxWriteToTEDSFromFile', physicalChannel, filePath, basicTEDSOptions);
        end

        function [status, isLate] = DAQmxWaitForNextSampleClock(taskHandle, timeout, isLate)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxWaitForNextSampleClock', 'taskHandle', 1);
            validateattributes(timeout, {'double'}, {'scalar'}, 'DAQmxWaitForNextSampleClock', 'timeout', 2);
            validateattributes(isLate, {'uint32'}, {'vector'}, 'DAQmxWaitForNextSampleClock', 'isLate', 3);
                [status, isLate]= mexNIDAQmx('DAQmxWaitForNextSampleClock', taskHandle, timeout, isLate);
        end

        function [status] = DAQmxResetRealTimeAttribute(taskHandle, attribute)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeAttribute', 'taskHandle', 1);
            validateattributes(attribute, {'int32'}, {'scalar'}, 'DAQmxResetRealTimeAttribute', 'attribute', 2);
                [status]= mexNIDAQmx('DAQmxResetRealTimeAttribute', taskHandle, attribute);
        end

        function [status] = DAQmxIsReadOrWriteLate(errorCode)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(errorCode, {'int32'}, {'scalar'}, 'DAQmxIsReadOrWriteLate', 'errorCode', 1);
                [status]= mexNIDAQmx('DAQmxIsReadOrWriteLate', errorCode);
        end

        function [status] = DAQmxSaveTask(taskHandle, saveAs, author, options)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSaveTask', 'taskHandle', 1);
            validateattributes(saveAs, {'char'}, {'vector'}, 'DAQmxSaveTask', 'saveAs', 2);
            validateattributes(author, {'char'}, {'vector'}, 'DAQmxSaveTask', 'author', 3);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxSaveTask', 'options', 4);
                [status]= mexNIDAQmx('DAQmxSaveTask', taskHandle, saveAs, author, options);
        end

        function [status] = DAQmxSaveGlobalChan(taskHandle, channelName, saveAs, author, options)
            error(nargchk(5, 5, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSaveGlobalChan', 'taskHandle', 1);
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxSaveGlobalChan', 'channelName', 2);
            validateattributes(saveAs, {'char'}, {'vector'}, 'DAQmxSaveGlobalChan', 'saveAs', 3);
            validateattributes(author, {'char'}, {'vector'}, 'DAQmxSaveGlobalChan', 'author', 4);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxSaveGlobalChan', 'options', 5);
                [status]= mexNIDAQmx('DAQmxSaveGlobalChan', taskHandle, channelName, saveAs, author, options);
        end

        function [status] = DAQmxSaveScale(scaleName, saveAs, author, options)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSaveScale', 'scaleName', 1);
            validateattributes(saveAs, {'char'}, {'vector'}, 'DAQmxSaveScale', 'saveAs', 2);
            validateattributes(author, {'char'}, {'vector'}, 'DAQmxSaveScale', 'author', 3);
            validateattributes(options, {'uint32'}, {'scalar'}, 'DAQmxSaveScale', 'options', 4);
                [status]= mexNIDAQmx('DAQmxSaveScale', scaleName, saveAs, author, options);
        end

        function [status] = DAQmxDeleteSavedTask(taskName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxDeleteSavedTask', 'taskName', 1);
                [status]= mexNIDAQmx('DAQmxDeleteSavedTask', taskName);
        end

        function [status] = DAQmxDeleteSavedGlobalChan(channelName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(channelName, {'char'}, {'vector'}, 'DAQmxDeleteSavedGlobalChan', 'channelName', 1);
                [status]= mexNIDAQmx('DAQmxDeleteSavedGlobalChan', channelName);
        end

        function [status] = DAQmxDeleteSavedScale(scaleName)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxDeleteSavedScale', 'scaleName', 1);
                [status]= mexNIDAQmx('DAQmxDeleteSavedScale', scaleName);
        end

        function [status] = DAQmxSetDigitalLogicFamilyPowerUpState(deviceName, logicFamily)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSetDigitalLogicFamilyPowerUpState', 'deviceName', 1);
            validateattributes(logicFamily, {'int32'}, {'scalar'}, 'DAQmxSetDigitalLogicFamilyPowerUpState', 'logicFamily', 2);
                [status]= mexNIDAQmx('DAQmxSetDigitalLogicFamilyPowerUpState', deviceName, logicFamily);
        end

        function [status, errorString] = DAQmxGetErrorString(errorCode, errorString, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(errorCode, {'int32'}, {'scalar'}, 'DAQmxGetErrorString', 'errorCode', 1);
            validateattributes(errorString, {'char'}, {'vector'}, 'DAQmxGetErrorString', 'errorString', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetErrorString', 'bufferSize', 3);
                [status, errorString]= mexNIDAQmx('DAQmxGetErrorString', errorCode, errorString, bufferSize);
        end

        function [status, errorString] = DAQmxGetExtendedErrorInfo(errorString, bufferSize)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(errorString, {'char'}, {'vector'}, 'DAQmxGetExtendedErrorInfo', 'errorString', 1);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExtendedErrorInfo', 'bufferSize', 2);
                [status, errorString]= mexNIDAQmx('DAQmxGetExtendedErrorInfo', errorString, bufferSize);
        end

        function [status, data] = DAQmxGetBufInputBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetBufInputBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetBufInputBufSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetBufInputBufSize', taskHandle, data);
        end

        function [status] = DAQmxSetBufInputBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetBufInputBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetBufInputBufSize', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetBufInputBufSize', taskHandle, data);
        end

        function [status] = DAQmxResetBufInputBufSize(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetBufInputBufSize', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetBufInputBufSize', taskHandle);
        end

        function [status, data] = DAQmxGetBufInputOnbrdBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetBufInputOnbrdBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetBufInputOnbrdBufSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetBufInputOnbrdBufSize', taskHandle, data);
        end

        function [status, data] = DAQmxGetBufOutputBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetBufOutputBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetBufOutputBufSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetBufOutputBufSize', taskHandle, data);
        end

        function [status] = DAQmxSetBufOutputBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetBufOutputBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetBufOutputBufSize', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetBufOutputBufSize', taskHandle, data);
        end

        function [status] = DAQmxResetBufOutputBufSize(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetBufOutputBufSize', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetBufOutputBufSize', taskHandle);
        end

        function [status, data] = DAQmxGetBufOutputOnbrdBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetBufOutputOnbrdBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetBufOutputOnbrdBufSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetBufOutputOnbrdBufSize', taskHandle, data);
        end

        function [status] = DAQmxSetBufOutputOnbrdBufSize(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetBufOutputOnbrdBufSize', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetBufOutputOnbrdBufSize', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetBufOutputOnbrdBufSize', taskHandle, data);
        end

        function [status] = DAQmxResetBufOutputOnbrdBufSize(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetBufOutputOnbrdBufSize', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetBufOutputOnbrdBufSize', taskHandle);
        end

        function [status, data] = DAQmxGetSelfCalSupported(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSelfCalSupported', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSelfCalSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSelfCalSupported', deviceName, data);
        end

        function [status, data] = DAQmxGetSelfCalLastTemp(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSelfCalLastTemp', 'deviceName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSelfCalLastTemp', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSelfCalLastTemp', deviceName, data);
        end

        function [status, data] = DAQmxGetExtCalRecommendedInterval(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetExtCalRecommendedInterval', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetExtCalRecommendedInterval', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExtCalRecommendedInterval', deviceName, data);
        end

        function [status, data] = DAQmxGetExtCalLastTemp(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetExtCalLastTemp', 'deviceName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExtCalLastTemp', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExtCalLastTemp', deviceName, data);
        end

        function [status, data] = DAQmxGetCalUserDefinedInfo(deviceName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetCalUserDefinedInfo', 'deviceName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCalUserDefinedInfo', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCalUserDefinedInfo', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCalUserDefinedInfo', deviceName, data, bufferSize);
        end

        function [status, data] = DAQmxSetCalUserDefinedInfo(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSetCalUserDefinedInfo', 'deviceName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCalUserDefinedInfo', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetCalUserDefinedInfo', deviceName, data);
        end

        function [status, data] = DAQmxGetCalUserDefinedInfoMaxSize(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetCalUserDefinedInfoMaxSize', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCalUserDefinedInfoMaxSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetCalUserDefinedInfoMaxSize', deviceName, data);
        end

        function [status, data] = DAQmxGetCalDevTemp(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetCalDevTemp', 'deviceName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCalDevTemp', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetCalDevTemp', deviceName, data);
        end

        function [status, data] = DAQmxGetAIMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIMax', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIMax', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIMax', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIMax', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIMax', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIMax', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIMax(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIMax', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIMax', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIMin', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIMin', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIMin', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIMin', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIMin', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIMin', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIMin(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIMin', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIMin', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAICustomScaleName(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAICustomScaleName', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAICustomScaleName', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAICustomScaleName', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAICustomScaleName(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAICustomScaleName', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAICustomScaleName', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICustomScaleName(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICustomScaleName', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICustomScaleName', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIMeasType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIMeasType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIMeasType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIMeasType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIMeasType', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIVoltageUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIVoltageUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIVoltageUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIVoltageUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIVoltageUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIVoltageUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIVoltageUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIVoltageUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIVoltageUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIVoltageUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIVoltageUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIVoltagedBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIVoltagedBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIVoltagedBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIVoltagedBRef', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIVoltagedBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIVoltagedBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIVoltagedBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIVoltagedBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIVoltagedBRef', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIVoltagedBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIVoltagedBRef(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIVoltagedBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIVoltagedBRef', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIVoltagedBRef', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIVoltageACRMSUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIVoltageACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIVoltageACRMSUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIVoltageACRMSUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIVoltageACRMSUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIVoltageACRMSUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIVoltageACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIVoltageACRMSUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIVoltageACRMSUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIVoltageACRMSUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIVoltageACRMSUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIVoltageACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIVoltageACRMSUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIVoltageACRMSUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAITempUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAITempUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAITempUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAITempUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAITempUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAITempUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAITempUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAITempUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAITempUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAITempUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAITempUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAITempUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAITempUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAITempUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmcplType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmcplType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIThrmcplType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmcplType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmcplType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmcplType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmcplType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIThrmcplType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmcplType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmcplType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmcplType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmcplType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmcplType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmcplScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmcplScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIThrmcplScaleType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmcplScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmcplScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmcplScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmcplScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIThrmcplScaleType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmcplScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmcplScaleType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmcplScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmcplScaleType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmcplScaleType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmcplCJCSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmcplCJCSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplCJCSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIThrmcplCJCSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmcplCJCSrc', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIThrmcplCJCVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmcplCJCVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplCJCVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIThrmcplCJCVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmcplCJCVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmcplCJCVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmcplCJCVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmcplCJCVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIThrmcplCJCVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmcplCJCVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmcplCJCVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmcplCJCVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmcplCJCVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmcplCJCVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmcplCJCChan(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmcplCJCChan', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplCJCChan', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIThrmcplCJCChan', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIThrmcplCJCChan', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmcplCJCChan', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxGetAIRTDType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRTDType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRTDType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIRTDType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRTDType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRTDType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRTDType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRTDType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIRTDType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRTDType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRTDType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRTDType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRTDType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRTDType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRTDR0(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRTDR0', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRTDR0', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRTDR0', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRTDR0', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRTDR0(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRTDR0', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRTDR0', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRTDR0', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRTDR0', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRTDR0(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRTDR0', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRTDR0', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRTDR0', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRTDA(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRTDA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRTDA', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRTDA', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRTDA', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRTDA(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRTDA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRTDA', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRTDA', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRTDA', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRTDA(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRTDA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRTDA', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRTDA', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRTDB(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRTDB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRTDB', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRTDB', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRTDB', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRTDB(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRTDB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRTDB', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRTDB', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRTDB', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRTDB(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRTDB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRTDB', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRTDB', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRTDC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRTDC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRTDC', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRTDC', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRTDC', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRTDC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRTDC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRTDC', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRTDC', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRTDC', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRTDC(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRTDC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRTDC', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRTDC', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmstrA(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmstrA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmstrA', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIThrmstrA', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmstrA', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmstrA(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmstrA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmstrA', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIThrmstrA', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmstrA', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmstrA(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmstrA', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmstrA', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmstrA', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmstrB(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmstrB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmstrB', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIThrmstrB', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmstrB', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmstrB(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmstrB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmstrB', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIThrmstrB', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmstrB', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmstrB(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmstrB', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmstrB', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmstrB', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmstrC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmstrC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmstrC', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIThrmstrC', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmstrC', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmstrC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmstrC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmstrC', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIThrmstrC', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmstrC', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmstrC(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmstrC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmstrC', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmstrC', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIThrmstrR1(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIThrmstrR1', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIThrmstrR1', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIThrmstrR1', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIThrmstrR1', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIThrmstrR1(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIThrmstrR1', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIThrmstrR1', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIThrmstrR1', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIThrmstrR1', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIThrmstrR1(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIThrmstrR1', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIThrmstrR1', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIThrmstrR1', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIForceReadFromChan(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIForceReadFromChan', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIForceReadFromChan', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIForceReadFromChan', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIForceReadFromChan', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIForceReadFromChan(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIForceReadFromChan', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIForceReadFromChan', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIForceReadFromChan', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIForceReadFromChan', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIForceReadFromChan(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIForceReadFromChan', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIForceReadFromChan', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIForceReadFromChan', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAICurrentUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICurrentUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAICurrentUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAICurrentUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAICurrentUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICurrentUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAICurrentUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAICurrentUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICurrentUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICurrentUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICurrentUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAICurrentACRMSUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICurrentACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICurrentACRMSUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAICurrentACRMSUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAICurrentACRMSUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAICurrentACRMSUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICurrentACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICurrentACRMSUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAICurrentACRMSUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAICurrentACRMSUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICurrentACRMSUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICurrentACRMSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICurrentACRMSUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICurrentACRMSUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIStrainUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIStrainUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIStrainUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIStrainUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIStrainUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIStrainUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIStrainUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIStrainUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIStrainUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIStrainUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIStrainUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIStrainUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIStrainUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIStrainUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIStrainGageGageFactor(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIStrainGageGageFactor', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIStrainGageGageFactor', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIStrainGageGageFactor', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIStrainGageGageFactor', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIStrainGageGageFactor(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIStrainGageGageFactor', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIStrainGageGageFactor', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIStrainGageGageFactor', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIStrainGageGageFactor', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIStrainGageGageFactor(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIStrainGageGageFactor', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIStrainGageGageFactor', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIStrainGageGageFactor', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIStrainGagePoissonRatio(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIStrainGagePoissonRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIStrainGagePoissonRatio', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIStrainGagePoissonRatio', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIStrainGagePoissonRatio', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIStrainGagePoissonRatio(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIStrainGagePoissonRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIStrainGagePoissonRatio', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIStrainGagePoissonRatio', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIStrainGagePoissonRatio', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIStrainGagePoissonRatio(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIStrainGagePoissonRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIStrainGagePoissonRatio', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIStrainGagePoissonRatio', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIStrainGageCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIStrainGageCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIStrainGageCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIStrainGageCfg', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIStrainGageCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIStrainGageCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIStrainGageCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIStrainGageCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIStrainGageCfg', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIStrainGageCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIStrainGageCfg(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIStrainGageCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIStrainGageCfg', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIStrainGageCfg', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIResistanceUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIResistanceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIResistanceUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIResistanceUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIResistanceUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIResistanceUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIResistanceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIResistanceUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIResistanceUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIResistanceUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIResistanceUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIResistanceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIResistanceUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIResistanceUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIFreqUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIFreqUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIFreqUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIFreqUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIFreqUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIFreqThreshVoltage(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIFreqThreshVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIFreqThreshVoltage', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIFreqThreshVoltage', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIFreqThreshVoltage', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIFreqThreshVoltage(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIFreqThreshVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIFreqThreshVoltage', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIFreqThreshVoltage', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIFreqThreshVoltage', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIFreqThreshVoltage(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIFreqThreshVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIFreqThreshVoltage', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIFreqThreshVoltage', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIFreqHyst(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIFreqHyst', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIFreqHyst', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIFreqHyst', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIFreqHyst', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIFreqHyst(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIFreqHyst', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIFreqHyst', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIFreqHyst', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIFreqHyst', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIFreqHyst(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIFreqHyst', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIFreqHyst', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIFreqHyst', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILVDTUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILVDTUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAILVDTUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILVDTUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILVDTUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILVDTUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAILVDTUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILVDTUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILVDTUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILVDTUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILVDTUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILVDTSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILVDTSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAILVDTSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILVDTSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILVDTSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILVDTSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAILVDTSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILVDTSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILVDTSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILVDTSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILVDTSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILVDTSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILVDTSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAILVDTSensitivityUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILVDTSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILVDTSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILVDTSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAILVDTSensitivityUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILVDTSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILVDTSensitivityUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILVDTSensitivityUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILVDTSensitivityUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRVDTUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRVDTUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIRVDTUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRVDTUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRVDTUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRVDTUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIRVDTUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRVDTUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRVDTUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRVDTUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRVDTUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRVDTUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRVDTSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRVDTSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRVDTSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRVDTSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRVDTSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRVDTSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRVDTSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRVDTSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRVDTSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRVDTSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRVDTSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRVDTSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRVDTSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRVDTSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIRVDTSensitivityUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRVDTSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRVDTSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRVDTSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIRVDTSensitivityUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRVDTSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRVDTSensitivityUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRVDTSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRVDTSensitivityUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRVDTSensitivityUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIEddyCurrentProxProbeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIEddyCurrentProxProbeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIEddyCurrentProxProbeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIEddyCurrentProxProbeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIEddyCurrentProxProbeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIEddyCurrentProxProbeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIEddyCurrentProxProbeUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIEddyCurrentProxProbeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIEddyCurrentProxProbeUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIEddyCurrentProxProbeUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIEddyCurrentProxProbeSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIEddyCurrentProxProbeSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIEddyCurrentProxProbeSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIEddyCurrentProxProbeSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIEddyCurrentProxProbeSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIEddyCurrentProxProbeSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIEddyCurrentProxProbeSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIEddyCurrentProxProbeSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIEddyCurrentProxProbeSensitivityUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIEddyCurrentProxProbeSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIEddyCurrentProxProbeSensitivityUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIEddyCurrentProxProbeSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIEddyCurrentProxProbeSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIEddyCurrentProxProbeSensitivityUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIEddyCurrentProxProbeSensitivityUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAISoundPressureMaxSoundPressureLvl(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAISoundPressureMaxSoundPressureLvl', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAISoundPressureMaxSoundPressureLvl', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAISoundPressureMaxSoundPressureLvl', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAISoundPressureMaxSoundPressureLvl', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAISoundPressureMaxSoundPressureLvl(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAISoundPressureMaxSoundPressureLvl', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAISoundPressureMaxSoundPressureLvl', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAISoundPressureMaxSoundPressureLvl', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAISoundPressureMaxSoundPressureLvl', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAISoundPressureMaxSoundPressureLvl(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAISoundPressureMaxSoundPressureLvl', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAISoundPressureMaxSoundPressureLvl', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAISoundPressureMaxSoundPressureLvl', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAISoundPressureUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAISoundPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAISoundPressureUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAISoundPressureUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAISoundPressureUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAISoundPressureUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAISoundPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAISoundPressureUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAISoundPressureUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAISoundPressureUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAISoundPressureUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAISoundPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAISoundPressureUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAISoundPressureUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAISoundPressuredBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAISoundPressuredBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAISoundPressuredBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAISoundPressuredBRef', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAISoundPressuredBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAISoundPressuredBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAISoundPressuredBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAISoundPressuredBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAISoundPressuredBRef', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAISoundPressuredBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAISoundPressuredBRef(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAISoundPressuredBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAISoundPressuredBRef', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAISoundPressuredBRef', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIMicrophoneSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIMicrophoneSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIMicrophoneSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIMicrophoneSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIMicrophoneSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIMicrophoneSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIMicrophoneSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIMicrophoneSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIMicrophoneSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIMicrophoneSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIMicrophoneSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIMicrophoneSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIMicrophoneSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIMicrophoneSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAccelUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAccelUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAccelUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIAccelUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAccelUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAccelUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAccelUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAccelUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIAccelUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAccelUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAccelUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAccelUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAccelUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAccelUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAcceldBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAcceldBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAcceldBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIAcceldBRef', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAcceldBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAcceldBRef(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAcceldBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAcceldBRef', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIAcceldBRef', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAcceldBRef', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAcceldBRef(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAcceldBRef', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAcceldBRef', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAcceldBRef', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAccelSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAccelSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAccelSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIAccelSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAccelSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAccelSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAccelSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAccelSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIAccelSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAccelSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAccelSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAccelSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAccelSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAccelSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAccelSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAccelSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAccelSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIAccelSensitivityUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAccelSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAccelSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAccelSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAccelSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIAccelSensitivityUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAccelSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAccelSensitivityUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAccelSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAccelSensitivityUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAccelSensitivityUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIForceUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIForceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIForceUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIForceUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIForceUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIForceUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIForceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIForceUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIForceUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIForceUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIForceUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIForceUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIForceUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIForceUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIForceIEPESensorSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIForceIEPESensorSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIForceIEPESensorSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIForceIEPESensorSensitivity', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIForceIEPESensorSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIForceIEPESensorSensitivity(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIForceIEPESensorSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIForceIEPESensorSensitivity', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIForceIEPESensorSensitivity', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIForceIEPESensorSensitivity', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIForceIEPESensorSensitivity(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIForceIEPESensorSensitivity', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIForceIEPESensorSensitivity', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIForceIEPESensorSensitivity', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIForceIEPESensorSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIForceIEPESensorSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIForceIEPESensorSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIForceIEPESensorSensitivityUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIForceIEPESensorSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIForceIEPESensorSensitivityUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIForceIEPESensorSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIForceIEPESensorSensitivityUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIForceIEPESensorSensitivityUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIForceIEPESensorSensitivityUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIForceIEPESensorSensitivityUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIForceIEPESensorSensitivityUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIForceIEPESensorSensitivityUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIForceIEPESensorSensitivityUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIPressureUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIPressureUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIPressureUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIPressureUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIPressureUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIPressureUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIPressureUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIPressureUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIPressureUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIPressureUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIPressureUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIPressureUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAITorqueUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAITorqueUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAITorqueUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAITorqueUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAITorqueUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAITorqueUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAITorqueUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAITorqueUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAITorqueUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAITorqueUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAITorqueUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAITorqueUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAITorqueUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAITorqueUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeElectricalUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeElectricalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeElectricalUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeElectricalUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeElectricalUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeElectricalUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeElectricalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeElectricalUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeElectricalUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeElectricalUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeElectricalUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeElectricalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeElectricalUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeElectricalUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgePhysicalUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgePhysicalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgePhysicalUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgePhysicalUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgePhysicalUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgePhysicalUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgePhysicalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgePhysicalUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgePhysicalUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgePhysicalUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgePhysicalUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgePhysicalUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgePhysicalUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgePhysicalUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeScaleType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeScaleType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeScaleType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeScaleType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeScaleType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTwoPointLinFirstElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinFirstElectricalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinFirstElectricalVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTwoPointLinFirstElectricalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinFirstElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTwoPointLinFirstElectricalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinFirstElectricalVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeTwoPointLinFirstElectricalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTwoPointLinFirstElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTwoPointLinFirstElectricalVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTwoPointLinFirstElectricalVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTwoPointLinSecondElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinSecondElectricalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinSecondElectricalVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTwoPointLinSecondElectricalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinSecondElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTwoPointLinSecondElectricalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinSecondElectricalVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeTwoPointLinSecondElectricalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTwoPointLinSecondElectricalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTwoPointLinSecondElectricalVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTwoPointLinSecondElectricalVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTableElectricalVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTableElectricalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTableElectricalVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTableElectricalVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIBridgeTableElectricalVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTableElectricalVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIBridgeTableElectricalVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTableElectricalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTableElectricalVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIBridgeTableElectricalVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIBridgeTableElectricalVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIBridgeTableElectricalVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIBridgeTableElectricalVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTableElectricalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTableElectricalVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTableElectricalVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeTablePhysicalVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeTablePhysicalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeTablePhysicalVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeTablePhysicalVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIBridgeTablePhysicalVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeTablePhysicalVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIBridgeTablePhysicalVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeTablePhysicalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeTablePhysicalVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIBridgeTablePhysicalVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIBridgeTablePhysicalVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIBridgeTablePhysicalVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIBridgeTablePhysicalVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeTablePhysicalVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeTablePhysicalVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeTablePhysicalVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgePolyForwardCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgePolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgePolyForwardCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgePolyForwardCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIBridgePolyForwardCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgePolyForwardCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIBridgePolyForwardCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgePolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgePolyForwardCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIBridgePolyForwardCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIBridgePolyForwardCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIBridgePolyForwardCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIBridgePolyForwardCoeff(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgePolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgePolyForwardCoeff', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgePolyForwardCoeff', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgePolyReverseCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgePolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgePolyReverseCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgePolyReverseCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIBridgePolyReverseCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgePolyReverseCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIBridgePolyReverseCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgePolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgePolyReverseCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIBridgePolyReverseCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIBridgePolyReverseCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIBridgePolyReverseCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIBridgePolyReverseCoeff(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgePolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgePolyReverseCoeff', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgePolyReverseCoeff', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIIsTEDS(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIIsTEDS', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIIsTEDS', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIIsTEDS', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIIsTEDS', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAITEDSUnits(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAITEDSUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAITEDSUnits', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAITEDSUnits', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAITEDSUnits', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAITEDSUnits', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxGetAICoupling(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICoupling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICoupling', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAICoupling', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAICoupling', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAICoupling(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICoupling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICoupling', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAICoupling', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAICoupling', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICoupling(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICoupling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICoupling', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICoupling', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIImpedance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIImpedance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIImpedance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIImpedance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIImpedance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAITermCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAITermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAITermCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAITermCfg', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAITermCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAITermCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAITermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAITermCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAITermCfg', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAITermCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAITermCfg(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAITermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAITermCfg', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAITermCfg', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIInputSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIInputSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIInputSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIInputSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIInputSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIInputSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIInputSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIInputSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIInputSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIInputSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAIInputSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIInputSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIInputSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIInputSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIInputSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIResistanceCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIResistanceCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIResistanceCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIResistanceCfg', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIResistanceCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIResistanceCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIResistanceCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIResistanceCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIResistanceCfg', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIResistanceCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIResistanceCfg(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIResistanceCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIResistanceCfg', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIResistanceCfg', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILeadWireResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILeadWireResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILeadWireResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAILeadWireResistance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILeadWireResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILeadWireResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILeadWireResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILeadWireResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAILeadWireResistance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILeadWireResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILeadWireResistance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILeadWireResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILeadWireResistance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILeadWireResistance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeCfg', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeCfg', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeCfg(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeCfg', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeCfg', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeNomResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeNomResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeNomResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeNomResistance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeNomResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeNomResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeNomResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeNomResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeNomResistance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeNomResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeNomResistance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeNomResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeNomResistance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeNomResistance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeInitialVoltage(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeInitialVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeInitialVoltage', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeInitialVoltage', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeInitialVoltage', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeInitialVoltage(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeInitialVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeInitialVoltage', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeInitialVoltage', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeInitialVoltage', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeInitialVoltage(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeInitialVoltage', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeInitialVoltage', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeInitialVoltage', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeInitialRatio(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeInitialRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeInitialRatio', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeInitialRatio', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeInitialRatio', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeInitialRatio(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeInitialRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeInitialRatio', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeInitialRatio', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeInitialRatio', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeInitialRatio(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeInitialRatio', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeInitialRatio', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeInitialRatio', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeShuntCalEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeShuntCalEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeShuntCalEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeShuntCalEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeShuntCalEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeShuntCalEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeShuntCalEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeShuntCalEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeShuntCalEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeShuntCalEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeShuntCalSelect(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeShuntCalSelect', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalSelect', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalSelect', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeShuntCalSelect', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeShuntCalSelect(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalSelect', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeShuntCalSelect', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalSelect', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeShuntCalSelect', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeShuntCalSelect(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeShuntCalSelect', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeShuntCalSelect', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeShuntCalSelect', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeShuntCalGainAdjust(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeShuntCalGainAdjust', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalGainAdjust', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalGainAdjust', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeShuntCalGainAdjust', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeShuntCalGainAdjust(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalGainAdjust', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeShuntCalGainAdjust', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalGainAdjust', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeShuntCalGainAdjust', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeShuntCalGainAdjust(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeShuntCalGainAdjust', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeShuntCalGainAdjust', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeShuntCalGainAdjust', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeShuntCalShuntCalAResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeShuntCalShuntCalAResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalShuntCalAResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalShuntCalAResistance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeShuntCalShuntCalAResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeShuntCalShuntCalAResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalShuntCalAResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeShuntCalShuntCalAResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalShuntCalAResistance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeShuntCalShuntCalAResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeShuntCalShuntCalAResistance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeShuntCalShuntCalAResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeShuntCalShuntCalAResistance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeShuntCalShuntCalAResistance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeShuntCalShuntCalAActualResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalShuntCalAActualResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIBridgeShuntCalShuntCalAActualResistance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeShuntCalShuntCalAActualResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalShuntCalAActualResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeShuntCalShuntCalAActualResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIBridgeShuntCalShuntCalAActualResistance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeShuntCalShuntCalAActualResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeShuntCalShuntCalAActualResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeShuntCalShuntCalAActualResistance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeShuntCalShuntCalAActualResistance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeBalanceCoarsePot(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeBalanceCoarsePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeBalanceCoarsePot', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeBalanceCoarsePot', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeBalanceCoarsePot', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeBalanceCoarsePot(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeBalanceCoarsePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeBalanceCoarsePot', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeBalanceCoarsePot', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeBalanceCoarsePot', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeBalanceCoarsePot(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeBalanceCoarsePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeBalanceCoarsePot', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeBalanceCoarsePot', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIBridgeBalanceFinePot(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIBridgeBalanceFinePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIBridgeBalanceFinePot', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIBridgeBalanceFinePot', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIBridgeBalanceFinePot', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIBridgeBalanceFinePot(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIBridgeBalanceFinePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIBridgeBalanceFinePot', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIBridgeBalanceFinePot', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIBridgeBalanceFinePot', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIBridgeBalanceFinePot(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIBridgeBalanceFinePot', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIBridgeBalanceFinePot', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIBridgeBalanceFinePot', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAICurrentShuntLoc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICurrentShuntLoc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICurrentShuntLoc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAICurrentShuntLoc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAICurrentShuntLoc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAICurrentShuntLoc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICurrentShuntLoc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICurrentShuntLoc', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAICurrentShuntLoc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAICurrentShuntLoc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICurrentShuntLoc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICurrentShuntLoc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICurrentShuntLoc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICurrentShuntLoc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAICurrentShuntResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAICurrentShuntResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAICurrentShuntResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAICurrentShuntResistance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAICurrentShuntResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAICurrentShuntResistance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAICurrentShuntResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAICurrentShuntResistance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAICurrentShuntResistance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAICurrentShuntResistance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAICurrentShuntResistance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAICurrentShuntResistance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAICurrentShuntResistance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAICurrentShuntResistance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIExcitSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIExcitSrc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIExcitVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIExcitVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitUseForScaling(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitUseForScaling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitUseForScaling', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIExcitUseForScaling', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitUseForScaling', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitUseForScaling(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitUseForScaling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitUseForScaling', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIExcitUseForScaling', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitUseForScaling', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitUseForScaling(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitUseForScaling', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitUseForScaling', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitUseForScaling', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitUseMultiplexed(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitUseMultiplexed', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitUseMultiplexed', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIExcitUseMultiplexed', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitUseMultiplexed', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitUseMultiplexed(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitUseMultiplexed', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitUseMultiplexed', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIExcitUseMultiplexed', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitUseMultiplexed', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitUseMultiplexed(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitUseMultiplexed', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitUseMultiplexed', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitUseMultiplexed', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitActualVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitActualVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitActualVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIExcitActualVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitActualVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitActualVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitActualVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitActualVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIExcitActualVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitActualVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitActualVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitActualVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitActualVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitActualVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitDCorAC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitDCorAC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitDCorAC', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIExcitDCorAC', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitDCorAC', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitDCorAC(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitDCorAC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitDCorAC', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIExcitDCorAC', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitDCorAC', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitDCorAC(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitDCorAC', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitDCorAC', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitDCorAC', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIExcitVoltageOrCurrent(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIExcitVoltageOrCurrent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIExcitVoltageOrCurrent', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIExcitVoltageOrCurrent', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIExcitVoltageOrCurrent', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIExcitVoltageOrCurrent(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIExcitVoltageOrCurrent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIExcitVoltageOrCurrent', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIExcitVoltageOrCurrent', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIExcitVoltageOrCurrent', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIExcitVoltageOrCurrent(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIExcitVoltageOrCurrent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIExcitVoltageOrCurrent', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIExcitVoltageOrCurrent', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIACExcitFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIACExcitFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIACExcitFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIACExcitFreq', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIACExcitFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIACExcitFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIACExcitFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIACExcitFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIACExcitFreq', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIACExcitFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIACExcitFreq(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIACExcitFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIACExcitFreq', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIACExcitFreq', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIACExcitSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIACExcitSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIACExcitSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIACExcitSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIACExcitSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIACExcitSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIACExcitSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIACExcitSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIACExcitSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIACExcitSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIACExcitSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIACExcitSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIACExcitSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIACExcitSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIACExcitWireMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIACExcitWireMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIACExcitWireMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIACExcitWireMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIACExcitWireMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIACExcitWireMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIACExcitWireMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIACExcitWireMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIACExcitWireMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIACExcitWireMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIACExcitWireMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIACExcitWireMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIACExcitWireMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIACExcitWireMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAtten(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAtten', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIAtten', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAtten', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAtten(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAtten', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIAtten', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAtten', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAtten(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAtten', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAtten', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIProbeAtten(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIProbeAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIProbeAtten', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIProbeAtten', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIProbeAtten', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIProbeAtten(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIProbeAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIProbeAtten', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIProbeAtten', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIProbeAtten', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIProbeAtten(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIProbeAtten', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIProbeAtten', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIProbeAtten', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIOpenThrmcplDetectEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIOpenThrmcplDetectEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIOpenThrmcplDetectEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIOpenThrmcplDetectEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIOpenThrmcplDetectEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIOpenThrmcplDetectEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIOpenThrmcplDetectEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIOpenThrmcplDetectEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIOpenThrmcplDetectEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIOpenThrmcplDetectEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIOpenThrmcplDetectEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIOpenThrmcplDetectEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIOpenThrmcplDetectEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIOpenThrmcplDetectEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAILowpassEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAILowpassEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassCutoffFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassCutoffFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassCutoffFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAILowpassCutoffFreq', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassCutoffFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassCutoffFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassCutoffFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassCutoffFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAILowpassCutoffFreq', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassCutoffFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassCutoffFreq(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassCutoffFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassCutoffFreq', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassCutoffFreq', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassSwitchCapClkSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassSwitchCapClkSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapClkSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapClkSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassSwitchCapClkSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassSwitchCapClkSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapClkSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassSwitchCapClkSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapClkSrc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassSwitchCapClkSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassSwitchCapClkSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassSwitchCapClkSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassSwitchCapClkSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassSwitchCapClkSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassSwitchCapExtClkFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassSwitchCapExtClkFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapExtClkFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapExtClkFreq', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassSwitchCapExtClkFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassSwitchCapExtClkFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapExtClkFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassSwitchCapExtClkFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapExtClkFreq', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassSwitchCapExtClkFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassSwitchCapExtClkFreq(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassSwitchCapExtClkFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassSwitchCapExtClkFreq', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassSwitchCapExtClkFreq', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassSwitchCapExtClkDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassSwitchCapExtClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapExtClkDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapExtClkDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassSwitchCapExtClkDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassSwitchCapExtClkDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapExtClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassSwitchCapExtClkDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapExtClkDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassSwitchCapExtClkDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassSwitchCapExtClkDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassSwitchCapExtClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassSwitchCapExtClkDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassSwitchCapExtClkDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILowpassSwitchCapOutClkDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILowpassSwitchCapOutClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapOutClkDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAILowpassSwitchCapOutClkDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILowpassSwitchCapOutClkDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILowpassSwitchCapOutClkDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapOutClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILowpassSwitchCapOutClkDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAILowpassSwitchCapOutClkDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILowpassSwitchCapOutClkDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILowpassSwitchCapOutClkDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILowpassSwitchCapOutClkDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILowpassSwitchCapOutClkDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILowpassSwitchCapOutClkDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIResolutionUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIResolutionUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIResolutionUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIResolutionUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIResolutionUnits', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIResolution(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIResolution', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIResolution', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIResolution', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIResolution', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIRawSampSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRawSampSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRawSampSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIRawSampSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRawSampSize', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIRawSampJustification(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRawSampJustification', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRawSampJustification', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIRawSampJustification', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRawSampJustification', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIADCTimingMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIADCTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIADCTimingMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIADCTimingMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIADCTimingMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIADCTimingMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIADCTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIADCTimingMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIADCTimingMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIADCTimingMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIADCTimingMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIADCTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIADCTimingMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIADCTimingMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIADCCustomTimingMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIADCCustomTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIADCCustomTimingMode', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIADCCustomTimingMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIADCCustomTimingMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIADCCustomTimingMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIADCCustomTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIADCCustomTimingMode', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIADCCustomTimingMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIADCCustomTimingMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIADCCustomTimingMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIADCCustomTimingMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIADCCustomTimingMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIADCCustomTimingMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDitherEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDitherEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDitherEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIDitherEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIDitherEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIDitherEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIDitherEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIDitherEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIDitherEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIDitherEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIDitherEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIDitherEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIDitherEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIDitherEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalHasValidCalInfo(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalHasValidCalInfo', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalHasValidCalInfo', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalHasValidCalInfo', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalHasValidCalInfo', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAIChanCalEnableCal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalEnableCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalEnableCal', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalEnableCal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalEnableCal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIChanCalEnableCal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalEnableCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalEnableCal', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalEnableCal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIChanCalEnableCal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIChanCalEnableCal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalEnableCal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalEnableCal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalEnableCal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalApplyCalIfExp(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalApplyCalIfExp', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalApplyCalIfExp', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIChanCalApplyCalIfExp', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalApplyCalIfExp', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIChanCalApplyCalIfExp(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalApplyCalIfExp', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalApplyCalIfExp', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalApplyCalIfExp', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIChanCalApplyCalIfExp', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIChanCalApplyCalIfExp(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalApplyCalIfExp', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalApplyCalIfExp', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalApplyCalIfExp', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIChanCalScaleType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIChanCalScaleType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalScaleType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIChanCalScaleType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIChanCalScaleType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIChanCalScaleType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalScaleType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalScaleType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalScaleType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalTablePreScaledVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalTablePreScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalTablePreScaledVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalTablePreScaledVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalTablePreScaledVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalTablePreScaledVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalTablePreScaledVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalTablePreScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalTablePreScaledVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalTablePreScaledVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalTablePreScaledVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalTablePreScaledVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalTablePreScaledVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalTablePreScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalTablePreScaledVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalTablePreScaledVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalTableScaledVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalTableScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalTableScaledVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalTableScaledVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalTableScaledVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalTableScaledVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalTableScaledVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalTableScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalTableScaledVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalTableScaledVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalTableScaledVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalTableScaledVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalTableScaledVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalTableScaledVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalTableScaledVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalTableScaledVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalPolyForwardCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalPolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalPolyForwardCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalPolyForwardCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalPolyForwardCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalPolyForwardCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalPolyForwardCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalPolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalPolyForwardCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalPolyForwardCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalPolyForwardCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalPolyForwardCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalPolyForwardCoeff(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalPolyForwardCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalPolyForwardCoeff', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalPolyForwardCoeff', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalPolyReverseCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalPolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalPolyReverseCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalPolyReverseCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalPolyReverseCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalPolyReverseCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalPolyReverseCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalPolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalPolyReverseCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalPolyReverseCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalPolyReverseCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalPolyReverseCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalPolyReverseCoeff(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalPolyReverseCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalPolyReverseCoeff', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalPolyReverseCoeff', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalOperatorName(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalOperatorName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalOperatorName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIChanCalOperatorName', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalOperatorName', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalOperatorName', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIChanCalOperatorName(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalOperatorName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalOperatorName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIChanCalOperatorName', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalOperatorName', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIChanCalOperatorName(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalOperatorName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalOperatorName', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalOperatorName', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalDesc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalDesc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalDesc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIChanCalDesc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalDesc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalDesc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIChanCalDesc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalDesc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalDesc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIChanCalDesc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalDesc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIChanCalDesc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalDesc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalDesc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalDesc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalVerifRefVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalVerifRefVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalVerifRefVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalVerifRefVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalVerifRefVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalVerifRefVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalVerifRefVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalVerifRefVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalVerifRefVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalVerifRefVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalVerifRefVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalVerifRefVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalVerifRefVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalVerifRefVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalVerifRefVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalVerifRefVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIChanCalVerifAcqVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIChanCalVerifAcqVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIChanCalVerifAcqVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIChanCalVerifAcqVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIChanCalVerifAcqVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIChanCalVerifAcqVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetAIChanCalVerifAcqVals(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIChanCalVerifAcqVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIChanCalVerifAcqVals', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetAIChanCalVerifAcqVals', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetAIChanCalVerifAcqVals', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxSetAIChanCalVerifAcqVals', taskHandle, channel, data, arraySizeInElements);
        end

        function [status] = DAQmxResetAIChanCalVerifAcqVals(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIChanCalVerifAcqVals', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIChanCalVerifAcqVals', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIChanCalVerifAcqVals', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRngHigh(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRngHigh', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRngHigh', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRngHigh', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRngHigh(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRngHigh', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRngHigh', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRngHigh', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRngHigh(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRngHigh', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRngHigh', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRngLow(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRngLow', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIRngLow', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRngLow', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRngLow(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRngLow', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIRngLow', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRngLow', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRngLow(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRngLow', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRngLow', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDCOffset(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDCOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDCOffset', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIDCOffset', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIDCOffset', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIDCOffset(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIDCOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIDCOffset', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIDCOffset', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIDCOffset', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIDCOffset(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIDCOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIDCOffset', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIDCOffset', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIGain(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIGain', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIGain', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIGain', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIGain(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIGain', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIGain', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIGain', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIGain(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIGain', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIGain', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAISampAndHoldEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAISampAndHoldEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAISampAndHoldEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAISampAndHoldEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAISampAndHoldEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAISampAndHoldEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAISampAndHoldEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAISampAndHoldEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAISampAndHoldEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAISampAndHoldEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAISampAndHoldEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAISampAndHoldEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAISampAndHoldEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAISampAndHoldEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIAutoZeroMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIAutoZeroMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIAutoZeroMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIAutoZeroMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIAutoZeroMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIAutoZeroMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIAutoZeroMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIAutoZeroMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIAutoZeroMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIAutoZeroMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIAutoZeroMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIAutoZeroMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIAutoZeroMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIAutoZeroMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIDataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIDataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIDataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIDataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIDataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIDataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIDataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIDataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIDataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIDataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDataXferCustomThreshold(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDataXferCustomThreshold', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDataXferCustomThreshold', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIDataXferCustomThreshold', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIDataXferCustomThreshold', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIDataXferCustomThreshold(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIDataXferCustomThreshold', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIDataXferCustomThreshold', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIDataXferCustomThreshold', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIDataXferCustomThreshold', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIDataXferCustomThreshold(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIDataXferCustomThreshold', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIDataXferCustomThreshold', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIDataXferCustomThreshold', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIRawDataCompressionType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIRawDataCompressionType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIRawDataCompressionType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIRawDataCompressionType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIRawDataCompressionType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIRawDataCompressionType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIRawDataCompressionType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIRawDataCompressionType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIRawDataCompressionType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIRawDataCompressionType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIRawDataCompressionType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIRawDataCompressionType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIRawDataCompressionType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIRawDataCompressionType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAILossyLSBRemovalCompressedSampSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAILossyLSBRemovalCompressedSampSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAILossyLSBRemovalCompressedSampSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAILossyLSBRemovalCompressedSampSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAILossyLSBRemovalCompressedSampSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAILossyLSBRemovalCompressedSampSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAILossyLSBRemovalCompressedSampSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAILossyLSBRemovalCompressedSampSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAILossyLSBRemovalCompressedSampSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAILossyLSBRemovalCompressedSampSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAILossyLSBRemovalCompressedSampSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAILossyLSBRemovalCompressedSampSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAILossyLSBRemovalCompressedSampSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAILossyLSBRemovalCompressedSampSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAIDevScalingCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIDevScalingCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIDevScalingCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIDevScalingCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAIDevScalingCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIDevScalingCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetAIEnhancedAliasRejectionEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIEnhancedAliasRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAIEnhancedAliasRejectionEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIEnhancedAliasRejectionEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIEnhancedAliasRejectionEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAIEnhancedAliasRejectionEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIEnhancedAliasRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAIEnhancedAliasRejectionEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIEnhancedAliasRejectionEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIEnhancedAliasRejectionEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAIEnhancedAliasRejectionEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIEnhancedAliasRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAIEnhancedAliasRejectionEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAIEnhancedAliasRejectionEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOMax', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOMax', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOMax', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOMax', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOMax', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOMax', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOMax(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOMax', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOMax', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOMin', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOMin', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOMin', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOMin', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOMin', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOMin', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOMin(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOMin', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOMin', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOCustomScaleName(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOCustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOCustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAOCustomScaleName', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAOCustomScaleName', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAOCustomScaleName', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAOCustomScaleName(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOCustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOCustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAOCustomScaleName', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAOCustomScaleName', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOCustomScaleName(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOCustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOCustomScaleName', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOCustomScaleName', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOOutputType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOOutputType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOOutputType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOOutputType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOOutputType', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAOVoltageUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOVoltageUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOVoltageUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOVoltageUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOVoltageUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOVoltageUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOVoltageUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOVoltageUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOVoltageUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOVoltageUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOVoltageUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOVoltageUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOVoltageCurrentLimit(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOVoltageCurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOVoltageCurrentLimit', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOVoltageCurrentLimit', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOVoltageCurrentLimit', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOVoltageCurrentLimit(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOVoltageCurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOVoltageCurrentLimit', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOVoltageCurrentLimit', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOVoltageCurrentLimit', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOVoltageCurrentLimit(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOVoltageCurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOVoltageCurrentLimit', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOVoltageCurrentLimit', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOCurrentUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOCurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOCurrentUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOCurrentUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOCurrentUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOCurrentUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOCurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOCurrentUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOCurrentUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOCurrentUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOCurrentUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOCurrentUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOCurrentUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOCurrentUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOFuncGenType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOFuncGenType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOFuncGenFreq', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOFuncGenFreq', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenFreq(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenFreq', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenFreq', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenAmplitude(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenAmplitude', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenAmplitude', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOFuncGenAmplitude', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenAmplitude', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenAmplitude(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenAmplitude', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenAmplitude', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOFuncGenAmplitude', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenAmplitude', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenAmplitude(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenAmplitude', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenAmplitude', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenAmplitude', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenOffset(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenOffset', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOFuncGenOffset', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenOffset', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenOffset(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenOffset', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOFuncGenOffset', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenOffset', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenOffset(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenOffset', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenOffset', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenOffset', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenSquareDutyCycle(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenSquareDutyCycle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenSquareDutyCycle', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOFuncGenSquareDutyCycle', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenSquareDutyCycle', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenSquareDutyCycle(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenSquareDutyCycle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenSquareDutyCycle', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOFuncGenSquareDutyCycle', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenSquareDutyCycle', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenSquareDutyCycle(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenSquareDutyCycle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenSquareDutyCycle', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenSquareDutyCycle', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenModulationType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenModulationType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenModulationType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOFuncGenModulationType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenModulationType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenModulationType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenModulationType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenModulationType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOFuncGenModulationType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenModulationType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenModulationType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenModulationType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenModulationType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenModulationType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOFuncGenFMDeviation(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOFuncGenFMDeviation', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOFuncGenFMDeviation', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOFuncGenFMDeviation', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOFuncGenFMDeviation', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOFuncGenFMDeviation(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOFuncGenFMDeviation', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOFuncGenFMDeviation', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOFuncGenFMDeviation', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOFuncGenFMDeviation', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOFuncGenFMDeviation(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOFuncGenFMDeviation', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOFuncGenFMDeviation', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOFuncGenFMDeviation', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOOutputImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOOutputImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOOutputImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOOutputImpedance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOOutputImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOOutputImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOOutputImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOOutputImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOOutputImpedance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOOutputImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOOutputImpedance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOOutputImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOOutputImpedance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOOutputImpedance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOLoadImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOLoadImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOLoadImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOLoadImpedance', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOLoadImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOLoadImpedance(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOLoadImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOLoadImpedance', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOLoadImpedance', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOLoadImpedance', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOLoadImpedance(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOLoadImpedance', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOLoadImpedance', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOLoadImpedance', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOIdleOutputBehavior(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOIdleOutputBehavior', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOIdleOutputBehavior', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOIdleOutputBehavior', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOIdleOutputBehavior', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOIdleOutputBehavior(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOIdleOutputBehavior', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOIdleOutputBehavior', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOIdleOutputBehavior', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOIdleOutputBehavior', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOIdleOutputBehavior(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOIdleOutputBehavior', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOIdleOutputBehavior', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOIdleOutputBehavior', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOTermCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOTermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOTermCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOTermCfg', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOTermCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOTermCfg(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOTermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOTermCfg', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOTermCfg', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOTermCfg', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOTermCfg(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOTermCfg', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOTermCfg', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOTermCfg', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOResolutionUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOResolutionUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOResolutionUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAOResolutionUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOResolutionUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOResolutionUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOResolutionUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOResolutionUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAOResolutionUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOResolutionUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOResolutionUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOResolutionUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOResolutionUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOResolutionUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOResolution(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOResolution', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOResolution', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOResolution', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOResolution', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetAODACRngHigh(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRngHigh', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAODACRngHigh', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRngHigh', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRngHigh(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRngHigh', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAODACRngHigh', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRngHigh', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRngHigh(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRngHigh', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRngHigh', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRngHigh', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRngLow(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRngLow', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAODACRngLow', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRngLow', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRngLow(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRngLow', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAODACRngLow', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRngLow', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRngLow(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRngLow', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRngLow', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRngLow', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRefConnToGnd(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRefConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRefConnToGnd', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAODACRefConnToGnd', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRefConnToGnd', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRefConnToGnd(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRefConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRefConnToGnd', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAODACRefConnToGnd', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRefConnToGnd', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRefConnToGnd(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRefConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRefConnToGnd', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRefConnToGnd', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRefAllowConnToGnd(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRefAllowConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRefAllowConnToGnd', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAODACRefAllowConnToGnd', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRefAllowConnToGnd', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRefAllowConnToGnd(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRefAllowConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRefAllowConnToGnd', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAODACRefAllowConnToGnd', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRefAllowConnToGnd', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRefAllowConnToGnd(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRefAllowConnToGnd', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRefAllowConnToGnd', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRefAllowConnToGnd', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRefSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRefSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRefSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAODACRefSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRefSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRefSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRefSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRefSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAODACRefSrc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRefSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRefSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRefSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRefSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRefSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRefExtSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRefExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRefExtSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAODACRefExtSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAODACRefExtSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRefExtSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAODACRefExtSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRefExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRefExtSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAODACRefExtSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAODACRefExtSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRefExtSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRefExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRefExtSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRefExtSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACRefVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACRefVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACRefVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAODACRefVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACRefVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACRefVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACRefVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACRefVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAODACRefVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACRefVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACRefVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACRefVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACRefVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACRefVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACOffsetSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACOffsetSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACOffsetSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAODACOffsetSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACOffsetSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACOffsetSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACOffsetSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACOffsetSrc', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAODACOffsetSrc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACOffsetSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACOffsetSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACOffsetSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACOffsetSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACOffsetSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACOffsetExtSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACOffsetExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACOffsetExtSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAODACOffsetExtSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAODACOffsetExtSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAODACOffsetExtSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetAODACOffsetExtSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACOffsetExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACOffsetExtSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAODACOffsetExtSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAODACOffsetExtSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACOffsetExtSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACOffsetExtSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACOffsetExtSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACOffsetExtSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODACOffsetVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODACOffsetVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODACOffsetVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAODACOffsetVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODACOffsetVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODACOffsetVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODACOffsetVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODACOffsetVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAODACOffsetVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODACOffsetVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODACOffsetVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODACOffsetVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODACOffsetVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODACOffsetVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOReglitchEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOReglitchEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOReglitchEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAOReglitchEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOReglitchEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOReglitchEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOReglitchEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOReglitchEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAOReglitchEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOReglitchEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOReglitchEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOReglitchEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOReglitchEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOReglitchEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOGain(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOGain', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAOGain', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOGain', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOGain(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOGain', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAOGain', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOGain', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOGain(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOGain', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOGain', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOGain', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAOUseOnlyOnBrdMem', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAOUseOnlyOnBrdMem', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOUseOnlyOnBrdMem(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOUseOnlyOnBrdMem', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOUseOnlyOnBrdMem', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAODataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAODataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAODataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAODataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAODataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAODataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAODataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAOUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAOUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAOMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAOMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetAODevScalingCoeff(taskHandle, channel, data, arraySizeInElements)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAODevScalingCoeff', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAODevScalingCoeff', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAODevScalingCoeff', 'data', 3);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetAODevScalingCoeff', 'arraySizeInElements', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAODevScalingCoeff', taskHandle, channel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetAOEnhancedImageRejectionEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAOEnhancedImageRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetAOEnhancedImageRejectionEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAOEnhancedImageRejectionEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAOEnhancedImageRejectionEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetAOEnhancedImageRejectionEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAOEnhancedImageRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetAOEnhancedImageRejectionEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAOEnhancedImageRejectionEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAOEnhancedImageRejectionEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetAOEnhancedImageRejectionEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAOEnhancedImageRejectionEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetAOEnhancedImageRejectionEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetAOEnhancedImageRejectionEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIInvertLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIInvertLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIInvertLines', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIInvertLines', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIInvertLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIInvertLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIInvertLines', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIInvertLines', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIInvertLines(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIInvertLines', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIInvertLines', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDINumLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDINumLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDINumLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDINumLines', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDINumLines', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetDIDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDIDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDIDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDigFltrEnableBusMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigFltrEnableBusMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrEnableBusMode', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIDigFltrEnableBusMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigFltrEnableBusMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDigFltrEnableBusMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigFltrEnableBusMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrEnableBusMode', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIDigFltrEnableBusMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDigFltrEnableBusMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigFltrEnableBusMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigFltrEnableBusMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigFltrEnableBusMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigFltrEnableBusMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDIDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetDIDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetDIDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDIDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDIDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDITristate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDITristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDITristate', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDITristate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDITristate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDITristate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDITristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDITristate', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDITristate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDITristate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDITristate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDITristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDITristate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDITristate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDILogicFamily(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDILogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDILogicFamily', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDILogicFamily', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDILogicFamily', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDILogicFamily(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDILogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDILogicFamily', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDILogicFamily', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDILogicFamily', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDILogicFamily(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDILogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDILogicFamily', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDILogicFamily', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDIDataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDIDataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDIDataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDIDataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIDataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIDataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIDataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDIMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDIMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDIAcquireOn(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDIAcquireOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDIAcquireOn', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDIAcquireOn', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDIAcquireOn', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDIAcquireOn(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDIAcquireOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDIAcquireOn', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDIAcquireOn', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDIAcquireOn', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDIAcquireOn(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDIAcquireOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDIAcquireOn', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDIAcquireOn', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOOutputDriveType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOOutputDriveType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOOutputDriveType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOOutputDriveType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOOutputDriveType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOOutputDriveType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOOutputDriveType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOOutputDriveType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOOutputDriveType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOOutputDriveType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOOutputDriveType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOOutputDriveType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOOutputDriveType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOOutputDriveType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOInvertLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOInvertLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOInvertLines', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOInvertLines', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOInvertLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOInvertLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOInvertLines', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOInvertLines', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOInvertLines(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOInvertLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOInvertLines', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOInvertLines', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDONumLines(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDONumLines', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDONumLines', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDONumLines', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDONumLines', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetDOTristate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOTristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOTristate', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOTristate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOTristate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOTristate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOTristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOTristate', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOTristate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOTristate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOTristate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOTristate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOTristate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOTristate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOLineStatesStartState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOLineStatesStartState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOLineStatesStartState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOLineStatesStartState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOLineStatesStartState', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOLineStatesStartState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOLineStatesStartState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOLineStatesStartState', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOLineStatesStartState', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOLineStatesStartState', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOLineStatesStartState(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOLineStatesStartState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOLineStatesStartState', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOLineStatesStartState', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOLineStatesPausedState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOLineStatesPausedState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOLineStatesPausedState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOLineStatesPausedState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOLineStatesPausedState', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOLineStatesPausedState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOLineStatesPausedState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOLineStatesPausedState', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOLineStatesPausedState', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOLineStatesPausedState', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOLineStatesPausedState(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOLineStatesPausedState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOLineStatesPausedState', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOLineStatesPausedState', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOLineStatesDoneState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOLineStatesDoneState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOLineStatesDoneState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOLineStatesDoneState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOLineStatesDoneState', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOLineStatesDoneState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOLineStatesDoneState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOLineStatesDoneState', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOLineStatesDoneState', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOLineStatesDoneState', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOLineStatesDoneState(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOLineStatesDoneState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOLineStatesDoneState', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOLineStatesDoneState', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOLogicFamily(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOLogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOLogicFamily', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOLogicFamily', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOLogicFamily', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOLogicFamily(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOLogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOLogicFamily', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOLogicFamily', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOLogicFamily', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOLogicFamily(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOLogicFamily', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOLogicFamily', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOLogicFamily', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOOvercurrentLimit(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOOvercurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOOvercurrentLimit', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDOOvercurrentLimit', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOOvercurrentLimit', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOOvercurrentLimit(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOOvercurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOOvercurrentLimit', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDOOvercurrentLimit', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOOvercurrentLimit', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOOvercurrentLimit(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOOvercurrentLimit', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOOvercurrentLimit', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOOvercurrentLimit', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOOvercurrentAutoReenable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOOvercurrentAutoReenable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOOvercurrentAutoReenable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOOvercurrentAutoReenable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOOvercurrentAutoReenable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOOvercurrentAutoReenable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOOvercurrentAutoReenable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOOvercurrentAutoReenable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOOvercurrentAutoReenable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOOvercurrentAutoReenable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOOvercurrentAutoReenable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOOvercurrentAutoReenable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOOvercurrentAutoReenable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOOvercurrentAutoReenable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOOvercurrentReenablePeriod(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOOvercurrentReenablePeriod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOOvercurrentReenablePeriod', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDOOvercurrentReenablePeriod', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOOvercurrentReenablePeriod', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOOvercurrentReenablePeriod(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOOvercurrentReenablePeriod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOOvercurrentReenablePeriod', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDOOvercurrentReenablePeriod', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOOvercurrentReenablePeriod', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOOvercurrentReenablePeriod(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOOvercurrentReenablePeriod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOOvercurrentReenablePeriod', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOOvercurrentReenablePeriod', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOUseOnlyOnBrdMem', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOUseOnlyOnBrdMem', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOUseOnlyOnBrdMem(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOUseOnlyOnBrdMem', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOUseOnlyOnBrdMem', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDODataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDODataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDODataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDODataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDODataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDODataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDODataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDODataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDODataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDODataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDOMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDOMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetDOGenerateOn(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDOGenerateOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetDOGenerateOn', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDOGenerateOn', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDOGenerateOn', taskHandle, channel, data);
        end

        function [status] = DAQmxSetDOGenerateOn(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDOGenerateOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetDOGenerateOn', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDOGenerateOn', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDOGenerateOn', taskHandle, channel, data);
        end

        function [status] = DAQmxResetDOGenerateOn(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDOGenerateOn', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetDOGenerateOn', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetDOGenerateOn', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIMax', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIMax', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIMax', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIMax(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIMax', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIMax', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIMax', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIMax(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIMax', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIMax', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIMax', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIMin', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIMin', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIMin', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIMin(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIMin', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIMin', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIMin', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIMin(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIMin', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIMin', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIMin', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICustomScaleName(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICustomScaleName', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICustomScaleName', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICustomScaleName', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICustomScaleName(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICustomScaleName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICustomScaleName', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICustomScaleName', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICustomScaleName(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICustomScaleName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICustomScaleName', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICustomScaleName', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIMeasType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIMeasType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIMeasType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIMeasType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIMeasType', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCIFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIFreqUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIFreqUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIFreqTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIFreqTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIFreqTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIFreqTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIFreqTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIFreqStartingEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIFreqStartingEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqStartingEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqStartingEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqStartingEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqMeasMeth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqMeasMeth', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIFreqMeasMeth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqMeasMeth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqMeasMeth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqMeasMeth', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIFreqMeasMeth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqMeasMeth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqMeasMeth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqMeasMeth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqMeasMeth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqEnableAveraging(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqEnableAveraging', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIFreqEnableAveraging', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqEnableAveraging', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqEnableAveraging(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqEnableAveraging', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIFreqEnableAveraging', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqEnableAveraging', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqEnableAveraging(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqEnableAveraging', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqEnableAveraging', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqMeasTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqMeasTime', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIFreqMeasTime', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqMeasTime', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqMeasTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqMeasTime', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIFreqMeasTime', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqMeasTime', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqMeasTime(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqMeasTime', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqMeasTime', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIFreqDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIFreqDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIFreqDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIFreqDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIFreqDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIFreqDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIFreqDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIFreqDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIFreqDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIFreqDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIFreqDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIFreqDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIFreqDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIFreqDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIFreqDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIFreqDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIFreqDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIFreqDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIFreqDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIFreqDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPeriodUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPeriodUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPeriodTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPeriodTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPeriodTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPeriodTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPeriodTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPeriodStartingEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPeriodStartingEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodStartingEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodStartingEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodStartingEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodMeasMeth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodMeasMeth', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPeriodMeasMeth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodMeasMeth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodMeasMeth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodMeasMeth', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPeriodMeasMeth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodMeasMeth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodMeasMeth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodMeasMeth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodMeasMeth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodMeasMeth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodEnableAveraging(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodEnableAveraging', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPeriodEnableAveraging', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodEnableAveraging', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodEnableAveraging(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodEnableAveraging', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPeriodEnableAveraging', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodEnableAveraging', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodEnableAveraging(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodEnableAveraging', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodEnableAveraging', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodEnableAveraging', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodMeasTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodMeasTime', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPeriodMeasTime', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodMeasTime', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodMeasTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodMeasTime', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPeriodMeasTime', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodMeasTime', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodMeasTime(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodMeasTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodMeasTime', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodMeasTime', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPeriodDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPeriodDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPeriodDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPeriodDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPeriodDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPeriodDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPeriodDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPeriodDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPeriodDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPeriodDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPeriodDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPeriodDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPeriodDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPeriodDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPeriodDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPeriodDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPeriodDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPeriodDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICountEdgesTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICountEdgesTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICountEdgesTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDir(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDir', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDir', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCICountEdgesDir', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDir', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesDir(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDir', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDir', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCICountEdgesDir', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesDir', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDir(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDir', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDir', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDir', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDirTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDirTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDirTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDirTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICountEdgesDirTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDirTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICountEdgesDirTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDirTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDirTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDirTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICountEdgesDirTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDirTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDirTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDirTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDirTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesCountDirDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesCountDirDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesCountDirDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesCountDirDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesCountDirDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesCountDirDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesCountDirDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesCountDirDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesCountDirDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesCountDirDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICountEdgesCountDirDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesCountDirDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesCountDirDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesCountDirDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICountEdgesCountDirDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesCountDirDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesCountDirDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesCountDirDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesCountDirDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesCountDirDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesInitialCnt(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesInitialCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesInitialCnt', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICountEdgesInitialCnt', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesInitialCnt', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesInitialCnt(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesInitialCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesInitialCnt', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICountEdgesInitialCnt', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesInitialCnt', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesInitialCnt(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesInitialCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesInitialCnt', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesInitialCnt', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCICountEdgesActiveEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCICountEdgesActiveEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesActiveEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesActiveEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesActiveEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICountEdgesDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICountEdgesDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICountEdgesDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICountEdgesDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICountEdgesDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICountEdgesDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICountEdgesDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICountEdgesDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICountEdgesDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICountEdgesDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICountEdgesDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICountEdgesDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICountEdgesDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICountEdgesDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICountEdgesDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICountEdgesDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICountEdgesDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICountEdgesDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICountEdgesDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIAngEncoderUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIAngEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIAngEncoderUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIAngEncoderUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIAngEncoderUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIAngEncoderUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIAngEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIAngEncoderUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIAngEncoderUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIAngEncoderUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIAngEncoderUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIAngEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIAngEncoderUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIAngEncoderUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIAngEncoderPulsesPerRev(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIAngEncoderPulsesPerRev', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIAngEncoderPulsesPerRev', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIAngEncoderPulsesPerRev', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIAngEncoderPulsesPerRev', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIAngEncoderPulsesPerRev(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIAngEncoderPulsesPerRev', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIAngEncoderPulsesPerRev', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIAngEncoderPulsesPerRev', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIAngEncoderPulsesPerRev', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIAngEncoderPulsesPerRev(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIAngEncoderPulsesPerRev', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIAngEncoderPulsesPerRev', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIAngEncoderPulsesPerRev', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIAngEncoderInitialAngle(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIAngEncoderInitialAngle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIAngEncoderInitialAngle', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIAngEncoderInitialAngle', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIAngEncoderInitialAngle', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIAngEncoderInitialAngle(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIAngEncoderInitialAngle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIAngEncoderInitialAngle', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIAngEncoderInitialAngle', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIAngEncoderInitialAngle', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIAngEncoderInitialAngle(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIAngEncoderInitialAngle', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIAngEncoderInitialAngle', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIAngEncoderInitialAngle', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCILinEncoderUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCILinEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCILinEncoderUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCILinEncoderUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCILinEncoderUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCILinEncoderUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCILinEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCILinEncoderUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCILinEncoderUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCILinEncoderUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCILinEncoderUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCILinEncoderUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCILinEncoderUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCILinEncoderUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCILinEncoderDistPerPulse(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCILinEncoderDistPerPulse', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCILinEncoderDistPerPulse', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCILinEncoderDistPerPulse', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCILinEncoderDistPerPulse', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCILinEncoderDistPerPulse(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCILinEncoderDistPerPulse', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCILinEncoderDistPerPulse', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCILinEncoderDistPerPulse', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCILinEncoderDistPerPulse', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCILinEncoderDistPerPulse(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCILinEncoderDistPerPulse', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCILinEncoderDistPerPulse', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCILinEncoderDistPerPulse', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCILinEncoderInitialPos(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCILinEncoderInitialPos', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCILinEncoderInitialPos', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCILinEncoderInitialPos', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCILinEncoderInitialPos', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCILinEncoderInitialPos(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCILinEncoderInitialPos', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCILinEncoderInitialPos', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCILinEncoderInitialPos', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCILinEncoderInitialPos', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCILinEncoderInitialPos(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCILinEncoderInitialPos', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCILinEncoderInitialPos', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCILinEncoderInitialPos', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderDecodingType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderDecodingType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderDecodingType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIEncoderDecodingType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderDecodingType', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderDecodingType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderDecodingType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderDecodingType', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIEncoderDecodingType', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderDecodingType', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderDecodingType(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderDecodingType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderDecodingType', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderDecodingType', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderAInputTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderAInputTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderAInputTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderAInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderAInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderAInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderAInputDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderAInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderAInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderAInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderAInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderAInputDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderAInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderAInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderAInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderAInputDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderAInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderAInputDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderAInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderAInputDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderAInputDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderBInputTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderBInputTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderBInputTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderBInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderBInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderBInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderBInputDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderBInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderBInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderBInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderBInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderBInputDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderBInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderBInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderBInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderBInputDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderBInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderBInputDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderBInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderBInputDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderBInputDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderZInputTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderZInputTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderZInputTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZInputDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZInputDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZInputDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIEncoderZInputDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZInputDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZInputDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderZInputDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZInputDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZInputDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderZInputDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZInputDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZInputDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZInputDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZInputDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZInputDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZIndexEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZIndexEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZIndexEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIEncoderZIndexEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZIndexEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZIndexEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZIndexEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZIndexEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZIndexEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZIndexEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZIndexEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZIndexEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZIndexVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZIndexVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZIndexVal', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIEncoderZIndexVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZIndexVal', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZIndexVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZIndexVal', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexVal', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZIndexVal', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZIndexVal(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZIndexVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZIndexVal', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZIndexVal', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIEncoderZIndexPhase(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIEncoderZIndexPhase', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIEncoderZIndexPhase', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIEncoderZIndexPhase', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIEncoderZIndexPhase', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIEncoderZIndexPhase(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexPhase', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIEncoderZIndexPhase', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIEncoderZIndexPhase', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIEncoderZIndexPhase', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIEncoderZIndexPhase(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIEncoderZIndexPhase', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIEncoderZIndexPhase', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIEncoderZIndexPhase', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseWidthUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseWidthUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseWidthTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseWidthTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseWidthTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseWidthStartingEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseWidthStartingEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthStartingEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthStartingEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthStartingEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseWidthDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseWidthDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseWidthDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseWidthDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseWidthDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseWidthDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseWidthDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseWidthDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseWidthDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseWidthDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseWidthDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseWidthDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseWidthDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseWidthDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseWidthDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseWidthDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCITwoEdgeSepFirstTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepFirstEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepFirstDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepFirstDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepFirstDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepFirstDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepFirstDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepFirstDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepFirstDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepFirstDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepFirstDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepFirstDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepFirstDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepFirstDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepFirstDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCITwoEdgeSepSecondTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepSecondEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepSecondDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITwoEdgeSepSecondDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITwoEdgeSepSecondDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITwoEdgeSepSecondDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITwoEdgeSepSecondDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITwoEdgeSepSecondDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITwoEdgeSepSecondDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCITwoEdgeSepSecondDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITwoEdgeSepSecondDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITwoEdgeSepSecondDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITwoEdgeSepSecondDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITwoEdgeSepSecondDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITwoEdgeSepSecondDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCISemiPeriodUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCISemiPeriodUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCISemiPeriodTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCISemiPeriodTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCISemiPeriodTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCISemiPeriodStartingEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodStartingEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodStartingEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCISemiPeriodStartingEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodStartingEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodStartingEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodStartingEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodStartingEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodStartingEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCISemiPeriodDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCISemiPeriodDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCISemiPeriodDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCISemiPeriodDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCISemiPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCISemiPeriodDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCISemiPeriodDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCISemiPeriodDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCISemiPeriodDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCISemiPeriodDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCISemiPeriodDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCISemiPeriodDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCISemiPeriodDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCISemiPeriodDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCISemiPeriodDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCISemiPeriodDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseFreqUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseFreqUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseFreqTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseFreqTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseFreqTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseFreqStartEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseFreqStartEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqStartEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqStartEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqStartEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseFreqDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseFreqDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseFreqDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseFreqDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseFreqDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseFreqDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseFreqDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseFreqDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseFreqDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseFreqDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseFreqDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseFreqDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseFreqDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseFreqDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseFreqDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseTimeUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseTimeUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseTimeTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseTimeTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseTimeTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseTimeStartEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseTimeStartEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeStartEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeStartEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeStartEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseTimeDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseTimeDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseTimeDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTimeDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTimeDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTimeDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseTimeDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTimeDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTimeDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTimeDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseTimeDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTimeDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTimeDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTimeDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTimeDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTimeDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseTicksTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseTicksTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseTicksTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIPulseTicksStartEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTicksStartEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksStartEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIPulseTicksStartEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTicksStartEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksStartEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksStartEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksStartEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksStartEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTicksDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTicksDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTicksDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTicksDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIPulseTicksDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIPulseTicksDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCIPulseTicksDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTicksDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTicksDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPulseTicksDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPulseTicksDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPulseTicksDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPulseTicksDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPulseTicksDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPulseTicksDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPulseTicksDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPulseTicksDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPulseTicksDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPulseTicksDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPulseTicksDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPulseTicksDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPulseTicksDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITimestampUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITimestampUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITimestampUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCITimestampUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITimestampUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITimestampUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITimestampUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITimestampUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCITimestampUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITimestampUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITimestampUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITimestampUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITimestampUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITimestampUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCITimestampInitialSeconds(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITimestampInitialSeconds', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITimestampInitialSeconds', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITimestampInitialSeconds', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITimestampInitialSeconds', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCITimestampInitialSeconds(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCITimestampInitialSeconds', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCITimestampInitialSeconds', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCITimestampInitialSeconds', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCITimestampInitialSeconds', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCITimestampInitialSeconds(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCITimestampInitialSeconds', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCITimestampInitialSeconds', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCITimestampInitialSeconds', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIGPSSyncMethod(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIGPSSyncMethod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIGPSSyncMethod', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIGPSSyncMethod', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIGPSSyncMethod', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIGPSSyncMethod(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIGPSSyncMethod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIGPSSyncMethod', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIGPSSyncMethod', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIGPSSyncMethod', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIGPSSyncMethod(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIGPSSyncMethod', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIGPSSyncMethod', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIGPSSyncMethod', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIGPSSyncSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIGPSSyncSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIGPSSyncSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCIGPSSyncSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCIGPSSyncSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCIGPSSyncSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCIGPSSyncSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIGPSSyncSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIGPSSyncSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCIGPSSyncSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCIGPSSyncSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIGPSSyncSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIGPSSyncSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIGPSSyncSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIGPSSyncSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICtrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICtrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICtrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICtrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICtrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCICtrTimebaseActiveEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCICtrTimebaseActiveEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseActiveEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseActiveEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseActiveEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCICtrTimebaseDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICtrTimebaseDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICtrTimebaseDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICtrTimebaseDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCICount(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICount', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICount', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICount', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICount', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCIOutputState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIOutputState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIOutputState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIOutputState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIOutputState', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCITCReached(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCITCReached', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCITCReached', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCITCReached', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCITCReached', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCICtrTimebaseMasterTimebaseDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCICtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCICtrTimebaseMasterTimebaseDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCICtrTimebaseMasterTimebaseDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCICtrTimebaseMasterTimebaseDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCICtrTimebaseMasterTimebaseDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCICtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCICtrTimebaseMasterTimebaseDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCICtrTimebaseMasterTimebaseDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCICtrTimebaseMasterTimebaseDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCICtrTimebaseMasterTimebaseDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCICtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCICtrTimebaseMasterTimebaseDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCICtrTimebaseMasterTimebaseDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIDataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIDataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIDataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIDataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIDataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIDataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIDataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIDataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIDataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCIDataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIDataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIDataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCIDataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIDataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIDataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIDataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIDataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIDataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCINumPossiblyInvalidSamps(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCINumPossiblyInvalidSamps', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCINumPossiblyInvalidSamps', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCINumPossiblyInvalidSamps', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCINumPossiblyInvalidSamps', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCIDupCountPrevent(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIDupCountPrevent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIDupCountPrevent', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIDupCountPrevent', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIDupCountPrevent', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIDupCountPrevent(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIDupCountPrevent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIDupCountPrevent', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIDupCountPrevent', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIDupCountPrevent', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIDupCountPrevent(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIDupCountPrevent', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIDupCountPrevent', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIDupCountPrevent', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCIPrescaler(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCIPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCIPrescaler', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCIPrescaler', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCIPrescaler', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCIPrescaler(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCIPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCIPrescaler', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCIPrescaler', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCIPrescaler', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCIPrescaler(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCIPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCIPrescaler', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCIPrescaler', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOOutputType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOOutputType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOOutputType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOOutputType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOOutputType', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCOPulseIdleState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseIdleState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseIdleState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOPulseIdleState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseIdleState', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseIdleState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseIdleState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseIdleState', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCOPulseIdleState', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseIdleState', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseIdleState(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseIdleState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseIdleState', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseIdleState', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseTerm(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCOPulseTerm', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCOPulseTerm', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseTerm', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCOPulseTerm(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseTerm', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCOPulseTerm', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCOPulseTerm', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseTerm(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseTerm', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseTerm', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseTerm', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseTimeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseTimeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOPulseTimeUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseTimeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseTimeUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseTimeUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCOPulseTimeUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseTimeUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseTimeUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseTimeUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseTimeUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseTimeUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseHighTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseHighTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseHighTime', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseHighTime', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseHighTime', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseHighTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseHighTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseHighTime', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseHighTime', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseHighTime', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseHighTime(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseHighTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseHighTime', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseHighTime', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseLowTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseLowTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseLowTime', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseLowTime', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseLowTime', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseLowTime(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseLowTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseLowTime', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseLowTime', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseLowTime', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseLowTime(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseLowTime', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseLowTime', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseLowTime', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseTimeInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseTimeInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseTimeInitialDelay', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseTimeInitialDelay', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseTimeInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseTimeInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseTimeInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseTimeInitialDelay', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseTimeInitialDelay', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseTimeInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseTimeInitialDelay(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseTimeInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseTimeInitialDelay', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseTimeInitialDelay', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseDutyCyc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseDutyCyc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseDutyCyc', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseDutyCyc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseDutyCyc', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseDutyCyc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseDutyCyc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseDutyCyc', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseDutyCyc', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseDutyCyc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseDutyCyc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseDutyCyc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseDutyCyc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseDutyCyc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOPulseFreqUnits', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseFreqUnits(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseFreqUnits', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCOPulseFreqUnits', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseFreqUnits', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseFreqUnits(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseFreqUnits', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseFreqUnits', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseFreqUnits', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseFreq', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseFreq(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseFreq', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseFreq', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseFreq', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseFreq(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseFreq', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseFreq', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseFreq', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseFreqInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseFreqInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseFreqInitialDelay', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOPulseFreqInitialDelay', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseFreqInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseFreqInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseFreqInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseFreqInitialDelay', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOPulseFreqInitialDelay', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseFreqInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseFreqInitialDelay(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseFreqInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseFreqInitialDelay', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseFreqInitialDelay', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseHighTicks(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseHighTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseHighTicks', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOPulseHighTicks', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseHighTicks', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseHighTicks(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseHighTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseHighTicks', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOPulseHighTicks', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseHighTicks', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseHighTicks(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseHighTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseHighTicks', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseHighTicks', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseLowTicks(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseLowTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseLowTicks', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOPulseLowTicks', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseLowTicks', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseLowTicks(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseLowTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseLowTicks', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOPulseLowTicks', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseLowTicks', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseLowTicks(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseLowTicks', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseLowTicks', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseLowTicks', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseTicksInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseTicksInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseTicksInitialDelay', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOPulseTicksInitialDelay', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseTicksInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPulseTicksInitialDelay(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPulseTicksInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPulseTicksInitialDelay', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOPulseTicksInitialDelay', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPulseTicksInitialDelay', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPulseTicksInitialDelay(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPulseTicksInitialDelay', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPulseTicksInitialDelay', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPulseTicksInitialDelay', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCOCtrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCOCtrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOCtrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOCtrTimebaseActiveEdge', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseActiveEdge(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseActiveEdge', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseActiveEdge', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseActiveEdge', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseActiveEdge(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseActiveEdge', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseActiveEdge', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseDigFltrEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigFltrEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseDigFltrEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseDigFltrEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseDigFltrEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseDigFltrEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseDigFltrEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigFltrTimebaseRate', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseRate', 'channel', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigFltrTimebaseRate', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseDigFltrTimebaseRate', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseDigFltrTimebaseRate', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseDigFltrTimebaseRate', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOCtrTimebaseDigSyncEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseDigSyncEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseDigSyncEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseDigSyncEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseDigSyncEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseDigSyncEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseDigSyncEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseDigSyncEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseDigSyncEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCount(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCount', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCount', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOCount', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCount', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCOOutputState(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOOutputState', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOOutputState', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOOutputState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOOutputState', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCOAutoIncrCnt(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOAutoIncrCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOAutoIncrCnt', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOAutoIncrCnt', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOAutoIncrCnt', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOAutoIncrCnt(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOAutoIncrCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOAutoIncrCnt', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOAutoIncrCnt', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOAutoIncrCnt', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOAutoIncrCnt(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOAutoIncrCnt', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOAutoIncrCnt', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOAutoIncrCnt', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOCtrTimebaseMasterTimebaseDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOCtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOCtrTimebaseMasterTimebaseDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOCtrTimebaseMasterTimebaseDiv', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOCtrTimebaseMasterTimebaseDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOCtrTimebaseMasterTimebaseDiv(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOCtrTimebaseMasterTimebaseDiv', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOCtrTimebaseMasterTimebaseDiv', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOCtrTimebaseMasterTimebaseDiv', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOCtrTimebaseMasterTimebaseDiv(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOCtrTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOCtrTimebaseMasterTimebaseDiv', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOCtrTimebaseMasterTimebaseDiv', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPulseDone(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPulseDone', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPulseDone', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOPulseDone', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPulseDone', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetCOEnableInitialDelayOnRetrigger(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOEnableInitialDelayOnRetrigger', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOEnableInitialDelayOnRetrigger', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOEnableInitialDelayOnRetrigger', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOEnableInitialDelayOnRetrigger', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOEnableInitialDelayOnRetrigger(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOEnableInitialDelayOnRetrigger', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOEnableInitialDelayOnRetrigger', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOEnableInitialDelayOnRetrigger', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOEnableInitialDelayOnRetrigger', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOEnableInitialDelayOnRetrigger(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOEnableInitialDelayOnRetrigger', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOEnableInitialDelayOnRetrigger', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOEnableInitialDelayOnRetrigger', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOConstrainedGenMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOConstrainedGenMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOConstrainedGenMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCOConstrainedGenMode', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOConstrainedGenMode', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOConstrainedGenMode(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOConstrainedGenMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOConstrainedGenMode', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCOConstrainedGenMode', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOConstrainedGenMode', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOConstrainedGenMode(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOConstrainedGenMode', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOConstrainedGenMode', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOConstrainedGenMode', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOUseOnlyOnBrdMem', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOUseOnlyOnBrdMem(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOUseOnlyOnBrdMem', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOUseOnlyOnBrdMem', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOUseOnlyOnBrdMem', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOUseOnlyOnBrdMem(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOUseOnlyOnBrdMem', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOUseOnlyOnBrdMem', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOUseOnlyOnBrdMem', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCODataXferMech', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCODataXferMech(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCODataXferMech', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCODataXferMech', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCODataXferMech', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCODataXferMech(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCODataXferMech', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCODataXferMech', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCODataXferMech', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetCODataXferReqCond', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCODataXferReqCond(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCODataXferReqCond', 'channel', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetCODataXferReqCond', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCODataXferReqCond', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCODataXferReqCond(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCODataXferReqCond', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCODataXferReqCond', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCODataXferReqCond', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOUsbXferReqSize', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOUsbXferReqSize(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOUsbXferReqSize', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOUsbXferReqSize', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOUsbXferReqSize', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOUsbXferReqSize(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOUsbXferReqSize', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOUsbXferReqSize', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOUsbXferReqSize', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOMemMapEnable', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOMemMapEnable(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOMemMapEnable', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOMemMapEnable', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOMemMapEnable', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOMemMapEnable(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOMemMapEnable', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOMemMapEnable', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOMemMapEnable', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCOPrescaler(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCOPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCOPrescaler', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCOPrescaler', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCOPrescaler', taskHandle, channel, data);
        end

        function [status] = DAQmxSetCOPrescaler(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetCOPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetCOPrescaler', 'channel', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetCOPrescaler', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetCOPrescaler', taskHandle, channel, data);
        end

        function [status] = DAQmxResetCOPrescaler(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetCOPrescaler', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetCOPrescaler', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetCOPrescaler', taskHandle, channel);
        end

        function [status, data] = DAQmxGetCORdyForNewVal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetCORdyForNewVal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetCORdyForNewVal', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCORdyForNewVal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetCORdyForNewVal', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetChanType(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChanType', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetChanType', 'channel', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetChanType', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetChanType', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanName(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetPhysicalChanName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanName', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPhysicalChanName', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanName', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetPhysicalChanName(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetPhysicalChanName', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetPhysicalChanName', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetPhysicalChanName', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetPhysicalChanName', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetChanDescr(taskHandle, channel, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChanDescr', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetChanDescr', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetChanDescr', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetChanDescr', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetChanDescr', taskHandle, channel, data, bufferSize);
        end

        function [status, data] = DAQmxSetChanDescr(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetChanDescr', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxSetChanDescr', 'channel', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetChanDescr', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetChanDescr', taskHandle, channel, data);
        end

        function [status] = DAQmxResetChanDescr(taskHandle, channel)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetChanDescr', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxResetChanDescr', 'channel', 2);
                [status]= mexNIDAQmx('DAQmxResetChanDescr', taskHandle, channel);
        end

        function [status, data] = DAQmxGetChanIsGlobal(taskHandle, channel, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChanIsGlobal', 'taskHandle', 1);
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetChanIsGlobal', 'channel', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetChanIsGlobal', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetChanIsGlobal', taskHandle, channel, data);
        end

        function [status, data] = DAQmxGetExportedAIConvClkOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAIConvClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedAIConvClkOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedAIConvClkOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAIConvClkOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedAIConvClkOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAIConvClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedAIConvClkOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedAIConvClkOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAIConvClkOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAIConvClkOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAIConvClkOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAIConvClkPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAIConvClkPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedAIConvClkPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAIConvClkPulsePolarity', taskHandle, data);
        end

        function [status, data] = DAQmxGetExported10MHzRefClkOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExported10MHzRefClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExported10MHzRefClkOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExported10MHzRefClkOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExported10MHzRefClkOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExported10MHzRefClkOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExported10MHzRefClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExported10MHzRefClkOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExported10MHzRefClkOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExported10MHzRefClkOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExported10MHzRefClkOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExported10MHzRefClkOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExported20MHzTimebaseOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExported20MHzTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExported20MHzTimebaseOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExported20MHzTimebaseOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExported20MHzTimebaseOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExported20MHzTimebaseOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExported20MHzTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExported20MHzTimebaseOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExported20MHzTimebaseOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExported20MHzTimebaseOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExported20MHzTimebaseOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExported20MHzTimebaseOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSampClkOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSampClkOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedSampClkOutputBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSampClkOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetExportedSampClkOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSampClkOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedSampClkOutputBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedSampClkOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSampClkOutputBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSampClkOutputBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSampClkOutputBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSampClkOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSampClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedSampClkOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedSampClkOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSampClkOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedSampClkOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSampClkOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedSampClkOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedSampClkOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSampClkOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSampClkOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSampClkOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSampClkDelayOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSampClkDelayOffset', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedSampClkDelayOffset', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSampClkDelayOffset', taskHandle, data);
        end

        function [status] = DAQmxSetExportedSampClkDelayOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSampClkDelayOffset', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedSampClkDelayOffset', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedSampClkDelayOffset', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSampClkDelayOffset(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSampClkDelayOffset', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSampClkDelayOffset', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSampClkPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSampClkPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedSampClkPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSampClkPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedSampClkPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSampClkPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedSampClkPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedSampClkPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSampClkPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSampClkPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSampClkPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSampClkTimebaseOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSampClkTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedSampClkTimebaseOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedSampClkTimebaseOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSampClkTimebaseOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedSampClkTimebaseOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSampClkTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedSampClkTimebaseOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedSampClkTimebaseOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSampClkTimebaseOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSampClkTimebaseOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSampClkTimebaseOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedDividedSampClkTimebaseOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedDividedSampClkTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedDividedSampClkTimebaseOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedDividedSampClkTimebaseOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedDividedSampClkTimebaseOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedDividedSampClkTimebaseOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedDividedSampClkTimebaseOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedDividedSampClkTimebaseOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedDividedSampClkTimebaseOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedDividedSampClkTimebaseOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedDividedSampClkTimebaseOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedDividedSampClkTimebaseOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvTrigOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedAdvTrigOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedAdvTrigOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvTrigOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedAdvTrigOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedAdvTrigOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedAdvTrigOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvTrigOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvTrigOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvTrigOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvTrigPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvTrigPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedAdvTrigPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvTrigPulsePolarity', taskHandle, data);
        end

        function [status, data] = DAQmxGetExportedAdvTrigPulseWidthUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvTrigPulseWidthUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedAdvTrigPulseWidthUnits', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvTrigPulseWidthUnits', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAdvTrigPulseWidthUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvTrigPulseWidthUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedAdvTrigPulseWidthUnits', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAdvTrigPulseWidthUnits', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvTrigPulseWidthUnits(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvTrigPulseWidthUnits', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvTrigPulseWidthUnits', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvTrigPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvTrigPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedAdvTrigPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvTrigPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAdvTrigPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvTrigPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedAdvTrigPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAdvTrigPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvTrigPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvTrigPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvTrigPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetExportedPauseTrigOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedPauseTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedPauseTrigOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedPauseTrigOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedPauseTrigOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedPauseTrigOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedPauseTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedPauseTrigOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedPauseTrigOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedPauseTrigOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedPauseTrigOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedPauseTrigOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedPauseTrigLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedPauseTrigLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedPauseTrigLvlActiveLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedPauseTrigLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxSetExportedPauseTrigLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedPauseTrigLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedPauseTrigLvlActiveLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedPauseTrigLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxResetExportedPauseTrigLvlActiveLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedPauseTrigLvlActiveLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedPauseTrigLvlActiveLvl', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRefTrigOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRefTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedRefTrigOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedRefTrigOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRefTrigOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedRefTrigOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRefTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedRefTrigOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedRefTrigOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRefTrigOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRefTrigOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRefTrigOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRefTrigPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRefTrigPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedRefTrigPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRefTrigPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedRefTrigPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRefTrigPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedRefTrigPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedRefTrigPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRefTrigPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRefTrigPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRefTrigPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedStartTrigOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedStartTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedStartTrigOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedStartTrigOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedStartTrigOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedStartTrigOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedStartTrigOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedStartTrigOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedStartTrigOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedStartTrigOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedStartTrigOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedStartTrigOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedStartTrigPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedStartTrigPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedStartTrigPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedStartTrigPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedStartTrigPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedStartTrigPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedStartTrigPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedStartTrigPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedStartTrigPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedStartTrigPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedStartTrigPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvCmpltEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvCmpltEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedAdvCmpltEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedAdvCmpltEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvCmpltEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedAdvCmpltEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedAdvCmpltEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedAdvCmpltEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvCmpltEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvCmpltEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvCmpltEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvCmpltEventDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvCmpltEventDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedAdvCmpltEventDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvCmpltEventDelay', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAdvCmpltEventDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAdvCmpltEventDelay', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvCmpltEventDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvCmpltEventDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvCmpltEventDelay', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvCmpltEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvCmpltEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedAdvCmpltEventPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvCmpltEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAdvCmpltEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAdvCmpltEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvCmpltEventPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvCmpltEventPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvCmpltEventPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAdvCmpltEventPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAdvCmpltEventPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedAdvCmpltEventPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAdvCmpltEventPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAdvCmpltEventPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedAdvCmpltEventPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAdvCmpltEventPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAdvCmpltEventPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAdvCmpltEventPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAdvCmpltEventPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAIHoldCmpltEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAIHoldCmpltEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedAIHoldCmpltEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedAIHoldCmpltEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAIHoldCmpltEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedAIHoldCmpltEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAIHoldCmpltEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedAIHoldCmpltEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedAIHoldCmpltEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAIHoldCmpltEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAIHoldCmpltEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAIHoldCmpltEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedAIHoldCmpltEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedAIHoldCmpltEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedAIHoldCmpltEventPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedAIHoldCmpltEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedAIHoldCmpltEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedAIHoldCmpltEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedAIHoldCmpltEventPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedAIHoldCmpltEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedAIHoldCmpltEventPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedAIHoldCmpltEventPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedAIHoldCmpltEventPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedChangeDetectEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedChangeDetectEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedChangeDetectEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedChangeDetectEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedChangeDetectEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedChangeDetectEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedChangeDetectEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedChangeDetectEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedChangeDetectEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedChangeDetectEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedChangeDetectEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedChangeDetectEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedChangeDetectEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedChangeDetectEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedChangeDetectEventPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedChangeDetectEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedChangeDetectEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedChangeDetectEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedChangeDetectEventPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedChangeDetectEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedChangeDetectEventPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedChangeDetectEventPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedChangeDetectEventPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedCtrOutEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedCtrOutEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedCtrOutEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedCtrOutEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedCtrOutEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedCtrOutEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedCtrOutEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedCtrOutEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedCtrOutEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedCtrOutEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedCtrOutEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedCtrOutEventOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedCtrOutEventOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedCtrOutEventOutputBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedCtrOutEventOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetExportedCtrOutEventOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventOutputBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedCtrOutEventOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetExportedCtrOutEventOutputBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedCtrOutEventOutputBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedCtrOutEventOutputBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetExportedCtrOutEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedCtrOutEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedCtrOutEventPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedCtrOutEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedCtrOutEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedCtrOutEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedCtrOutEventPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedCtrOutEventPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedCtrOutEventPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedCtrOutEventToggleIdleState(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedCtrOutEventToggleIdleState', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedCtrOutEventToggleIdleState', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedCtrOutEventToggleIdleState', taskHandle, data);
        end

        function [status] = DAQmxSetExportedCtrOutEventToggleIdleState(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventToggleIdleState', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedCtrOutEventToggleIdleState', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedCtrOutEventToggleIdleState', taskHandle, data);
        end

        function [status] = DAQmxResetExportedCtrOutEventToggleIdleState(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedCtrOutEventToggleIdleState', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedCtrOutEventToggleIdleState', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedHshkEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedHshkEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedHshkEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedHshkEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedHshkEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedHshkEventOutputBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventOutputBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventOutputBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedHshkEventOutputBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventOutputBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventOutputBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventOutputBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventOutputBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedHshkEventDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventDelay', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedHshkEventDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventDelay', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventDelay', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventInterlockedAssertedLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventInterlockedAssertedLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedHshkEventInterlockedAssertedLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventInterlockedAssertedLvl', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventInterlockedAssertedLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedAssertedLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedAssertedLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventInterlockedAssertedLvl', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventInterlockedAssertedLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventInterlockedAssertedLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventInterlockedAssertedLvl', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventInterlockedAssertOnStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventInterlockedAssertOnStart', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetExportedHshkEventInterlockedAssertOnStart', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventInterlockedAssertOnStart', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventInterlockedAssertOnStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedAssertOnStart', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedAssertOnStart', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventInterlockedAssertOnStart', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventInterlockedAssertOnStart(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventInterlockedAssertOnStart', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventInterlockedAssertOnStart', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventInterlockedDeassertDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventInterlockedDeassertDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedHshkEventInterlockedDeassertDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventInterlockedDeassertDelay', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventInterlockedDeassertDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedDeassertDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedHshkEventInterlockedDeassertDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventInterlockedDeassertDelay', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventInterlockedDeassertDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventInterlockedDeassertDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventInterlockedDeassertDelay', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedHshkEventPulsePolarity', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventPulsePolarity(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventPulsePolarity', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedHshkEventPulsePolarity', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventPulsePolarity', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventPulsePolarity(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventPulsePolarity', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventPulsePolarity', taskHandle);
        end

        function [status, data] = DAQmxGetExportedHshkEventPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedHshkEventPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetExportedHshkEventPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedHshkEventPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetExportedHshkEventPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedHshkEventPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetExportedHshkEventPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedHshkEventPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetExportedHshkEventPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedHshkEventPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedHshkEventPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForXferEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForXferEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedRdyForXferEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedRdyForXferEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForXferEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedRdyForXferEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedRdyForXferEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedRdyForXferEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForXferEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForXferEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForXferEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForXferEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForXferEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedRdyForXferEventLvlActiveLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForXferEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxSetExportedRdyForXferEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventLvlActiveLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedRdyForXferEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForXferEventLvlActiveLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForXferEventLvlActiveLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForXferEventLvlActiveLvl', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForXferEventDeassertCond(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForXferEventDeassertCond', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedRdyForXferEventDeassertCond', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForXferEventDeassertCond', taskHandle, data);
        end

        function [status] = DAQmxSetExportedRdyForXferEventDeassertCond(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventDeassertCond', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventDeassertCond', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedRdyForXferEventDeassertCond', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForXferEventDeassertCond(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForXferEventDeassertCond', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForXferEventDeassertCond', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold', taskHandle, data);
        end

        function [status] = DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold', taskHandle);
        end

        function [status, data] = DAQmxGetExportedDataActiveEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedDataActiveEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedDataActiveEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedDataActiveEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedDataActiveEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedDataActiveEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedDataActiveEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedDataActiveEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedDataActiveEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedDataActiveEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedDataActiveEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedDataActiveEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedDataActiveEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedDataActiveEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedDataActiveEventLvlActiveLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedDataActiveEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxSetExportedDataActiveEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedDataActiveEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedDataActiveEventLvlActiveLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedDataActiveEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxResetExportedDataActiveEventLvlActiveLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedDataActiveEventLvlActiveLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedDataActiveEventLvlActiveLvl', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForStartEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForStartEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedRdyForStartEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedRdyForStartEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForStartEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedRdyForStartEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForStartEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedRdyForStartEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedRdyForStartEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForStartEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForStartEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForStartEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedRdyForStartEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedRdyForStartEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetExportedRdyForStartEventLvlActiveLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetExportedRdyForStartEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxSetExportedRdyForStartEventLvlActiveLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedRdyForStartEventLvlActiveLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetExportedRdyForStartEventLvlActiveLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetExportedRdyForStartEventLvlActiveLvl', taskHandle, data);
        end

        function [status] = DAQmxResetExportedRdyForStartEventLvlActiveLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedRdyForStartEventLvlActiveLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedRdyForStartEventLvlActiveLvl', taskHandle);
        end

        function [status, data] = DAQmxGetExportedSyncPulseEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedSyncPulseEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedSyncPulseEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedSyncPulseEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedSyncPulseEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedSyncPulseEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedSyncPulseEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedSyncPulseEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedSyncPulseEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedSyncPulseEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedSyncPulseEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedSyncPulseEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetExportedWatchdogExpiredEventOutputTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetExportedWatchdogExpiredEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetExportedWatchdogExpiredEventOutputTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetExportedWatchdogExpiredEventOutputTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetExportedWatchdogExpiredEventOutputTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetExportedWatchdogExpiredEventOutputTerm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetExportedWatchdogExpiredEventOutputTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetExportedWatchdogExpiredEventOutputTerm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetExportedWatchdogExpiredEventOutputTerm', taskHandle, data);
        end

        function [status] = DAQmxResetExportedWatchdogExpiredEventOutputTerm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetExportedWatchdogExpiredEventOutputTerm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetExportedWatchdogExpiredEventOutputTerm', taskHandle);
        end

        function [status, data] = DAQmxGetDevIsSimulated(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevIsSimulated', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevIsSimulated', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevIsSimulated', device, data);
        end

        function [status, data] = DAQmxGetDevProductCategory(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevProductCategory', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevProductCategory', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevProductCategory', device, data);
        end

        function [status, data] = DAQmxGetDevProductType(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevProductType', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevProductType', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevProductType', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevProductType', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevProductNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevProductNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevProductNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevProductNum', device, data);
        end

        function [status, data] = DAQmxGetDevSerialNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevSerialNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevSerialNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevSerialNum', device, data);
        end

        function [status, data] = DAQmxGetDevAccessoryProductTypes(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAccessoryProductTypes', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevAccessoryProductTypes', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevAccessoryProductTypes', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAccessoryProductTypes', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevAccessoryProductNums(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAccessoryProductNums', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevAccessoryProductNums', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAccessoryProductNums', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAccessoryProductNums', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAccessorySerialNums(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAccessorySerialNums', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevAccessorySerialNums', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAccessorySerialNums', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAccessorySerialNums', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetCarrierSerialNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetCarrierSerialNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetCarrierSerialNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetCarrierSerialNum', device, data);
        end

        function [status, data] = DAQmxGetDevChassisModuleDevNames(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevChassisModuleDevNames', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevChassisModuleDevNames', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevChassisModuleDevNames', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevChassisModuleDevNames', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevAnlgTrigSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAnlgTrigSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevAnlgTrigSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAnlgTrigSupported', device, data);
        end

        function [status, data] = DAQmxGetDevDigTrigSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDigTrigSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevDigTrigSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevDigTrigSupported', device, data);
        end

        function [status, data] = DAQmxGetDevAIPhysicalChans(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIPhysicalChans', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevAIPhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIPhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIPhysicalChans', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevAIMaxSingleChanRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIMaxSingleChanRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIMaxSingleChanRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIMaxSingleChanRate', device, data);
        end

        function [status, data] = DAQmxGetDevAIMaxMultiChanRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIMaxMultiChanRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIMaxMultiChanRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIMaxMultiChanRate', device, data);
        end

        function [status, data] = DAQmxGetDevAIMinRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIMinRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIMinRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIMinRate', device, data);
        end

        function [status, data] = DAQmxGetDevAISimultaneousSamplingSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAISimultaneousSamplingSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevAISimultaneousSamplingSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAISimultaneousSamplingSupported', device, data);
        end

        function [status, data] = DAQmxGetDevAITrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAITrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevAITrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAITrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevAIVoltageRngs(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIVoltageRngs', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIVoltageRngs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIVoltageRngs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIVoltageRngs', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAIVoltageIntExcitDiscreteVals(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIVoltageIntExcitDiscreteVals', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIVoltageIntExcitDiscreteVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIVoltageIntExcitDiscreteVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIVoltageIntExcitDiscreteVals', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAIVoltageIntExcitRangeVals(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIVoltageIntExcitRangeVals', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIVoltageIntExcitRangeVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIVoltageIntExcitRangeVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIVoltageIntExcitRangeVals', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAICurrentRngs(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAICurrentRngs', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAICurrentRngs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAICurrentRngs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAICurrentRngs', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAICurrentIntExcitDiscreteVals(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAICurrentIntExcitDiscreteVals', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAICurrentIntExcitDiscreteVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAICurrentIntExcitDiscreteVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAICurrentIntExcitDiscreteVals', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAIFreqRngs(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIFreqRngs', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIFreqRngs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIFreqRngs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIFreqRngs', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAIGains(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAIGains', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAIGains', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAIGains', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAIGains', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAICouplings(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAICouplings', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevAICouplings', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAICouplings', device, data);
        end

        function [status, data] = DAQmxGetDevAILowpassCutoffFreqDiscreteVals(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAILowpassCutoffFreqDiscreteVals', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAILowpassCutoffFreqDiscreteVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAILowpassCutoffFreqDiscreteVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAILowpassCutoffFreqDiscreteVals', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAILowpassCutoffFreqRangeVals(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAILowpassCutoffFreqRangeVals', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAILowpassCutoffFreqRangeVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAILowpassCutoffFreqRangeVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAILowpassCutoffFreqRangeVals', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAOPhysicalChans(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOPhysicalChans', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevAOPhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevAOPhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOPhysicalChans', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevAOSampClkSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOSampClkSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevAOSampClkSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOSampClkSupported', device, data);
        end

        function [status, data] = DAQmxGetDevAOMaxRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOMaxRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAOMaxRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOMaxRate', device, data);
        end

        function [status, data] = DAQmxGetDevAOMinRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOMinRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAOMinRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOMinRate', device, data);
        end

        function [status, data] = DAQmxGetDevAOTrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOTrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevAOTrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOTrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevAOVoltageRngs(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOVoltageRngs', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAOVoltageRngs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAOVoltageRngs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOVoltageRngs', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAOCurrentRngs(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOCurrentRngs', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAOCurrentRngs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAOCurrentRngs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOCurrentRngs', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevAOGains(device, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevAOGains', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevAOGains', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetDevAOGains', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevAOGains', device, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetDevDILines(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDILines', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevDILines', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevDILines', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevDILines', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevDIPorts(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDIPorts', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevDIPorts', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevDIPorts', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevDIPorts', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevDIMaxRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDIMaxRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevDIMaxRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevDIMaxRate', device, data);
        end

        function [status, data] = DAQmxGetDevDITrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDITrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevDITrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevDITrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevDOLines(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDOLines', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevDOLines', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevDOLines', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevDOLines', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevDOPorts(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDOPorts', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevDOPorts', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevDOPorts', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevDOPorts', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevDOMaxRate(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDOMaxRate', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevDOMaxRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevDOMaxRate', device, data);
        end

        function [status, data] = DAQmxGetDevDOTrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevDOTrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevDOTrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevDOTrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevCIPhysicalChans(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCIPhysicalChans', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevCIPhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevCIPhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevCIPhysicalChans', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevCITrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCITrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevCITrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCITrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevCISampClkSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCISampClkSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevCISampClkSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCISampClkSupported', device, data);
        end

        function [status, data] = DAQmxGetDevCIMaxSize(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCIMaxSize', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevCIMaxSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCIMaxSize', device, data);
        end

        function [status, data] = DAQmxGetDevCIMaxTimebase(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCIMaxTimebase', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevCIMaxTimebase', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCIMaxTimebase', device, data);
        end

        function [status, data] = DAQmxGetDevCOPhysicalChans(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCOPhysicalChans', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevCOPhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevCOPhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevCOPhysicalChans', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevCOSampClkSupported(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCOSampClkSupported', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevCOSampClkSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCOSampClkSupported', device, data);
        end

        function [status, data] = DAQmxGetDevCOTrigUsage(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCOTrigUsage', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevCOTrigUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCOTrigUsage', device, data);
        end

        function [status, data] = DAQmxGetDevCOMaxSize(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCOMaxSize', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevCOMaxSize', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCOMaxSize', device, data);
        end

        function [status, data] = DAQmxGetDevCOMaxTimebase(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCOMaxTimebase', 'device', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDevCOMaxTimebase', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCOMaxTimebase', device, data);
        end

        function [status, data] = DAQmxGetDevNumDMAChans(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevNumDMAChans', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevNumDMAChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevNumDMAChans', device, data);
        end

        function [status, data] = DAQmxGetDevBusType(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevBusType', 'device', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDevBusType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevBusType', device, data);
        end

        function [status, data] = DAQmxGetDevPCIBusNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevPCIBusNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevPCIBusNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevPCIBusNum', device, data);
        end

        function [status, data] = DAQmxGetDevPCIDevNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevPCIDevNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevPCIDevNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevPCIDevNum', device, data);
        end

        function [status, data] = DAQmxGetDevPXIChassisNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevPXIChassisNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevPXIChassisNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevPXIChassisNum', device, data);
        end

        function [status, data] = DAQmxGetDevPXISlotNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevPXISlotNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevPXISlotNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevPXISlotNum', device, data);
        end

        function [status, data] = DAQmxGetDevCompactDAQChassisDevName(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCompactDAQChassisDevName', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevCompactDAQChassisDevName', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevCompactDAQChassisDevName', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevCompactDAQChassisDevName', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevCompactDAQSlotNum(device, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevCompactDAQSlotNum', 'device', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDevCompactDAQSlotNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDevCompactDAQSlotNum', device, data);
        end

        function [status, data] = DAQmxGetDevTCPIPHostname(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPHostname', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPHostname', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevTCPIPHostname', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevTCPIPHostname', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevTCPIPEthernetIP(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPEthernetIP', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPEthernetIP', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevTCPIPEthernetIP', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevTCPIPEthernetIP', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevTCPIPWirelessIP(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPWirelessIP', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevTCPIPWirelessIP', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevTCPIPWirelessIP', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevTCPIPWirelessIP', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetDevTerminals(device, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(device, {'char'}, {'vector'}, 'DAQmxGetDevTerminals', 'device', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDevTerminals', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDevTerminals', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDevTerminals', device, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadRelativeTo(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadRelativeTo', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetReadRelativeTo', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadRelativeTo', taskHandle, data);
        end

        function [status] = DAQmxSetReadRelativeTo(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadRelativeTo', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetReadRelativeTo', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadRelativeTo', taskHandle, data);
        end

        function [status] = DAQmxResetReadRelativeTo(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadRelativeTo', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadRelativeTo', taskHandle);
        end

        function [status, data] = DAQmxGetReadOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOffset', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetReadOffset', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOffset', taskHandle, data);
        end

        function [status] = DAQmxSetReadOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadOffset', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetReadOffset', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadOffset', taskHandle, data);
        end

        function [status] = DAQmxResetReadOffset(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadOffset', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadOffset', taskHandle);
        end

        function [status, data] = DAQmxGetReadChannelsToRead(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadChannelsToRead', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadChannelsToRead', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadChannelsToRead', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadChannelsToRead', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetReadChannelsToRead(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadChannelsToRead', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetReadChannelsToRead', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetReadChannelsToRead', taskHandle, data);
        end

        function [status] = DAQmxResetReadChannelsToRead(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadChannelsToRead', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadChannelsToRead', taskHandle);
        end

        function [status, data] = DAQmxGetReadReadAllAvailSamp(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadReadAllAvailSamp', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadReadAllAvailSamp', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadReadAllAvailSamp', taskHandle, data);
        end

        function [status] = DAQmxSetReadReadAllAvailSamp(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadReadAllAvailSamp', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetReadReadAllAvailSamp', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadReadAllAvailSamp', taskHandle, data);
        end

        function [status] = DAQmxResetReadReadAllAvailSamp(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadReadAllAvailSamp', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadReadAllAvailSamp', taskHandle);
        end

        function [status, data] = DAQmxGetReadAutoStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadAutoStart', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadAutoStart', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadAutoStart', taskHandle, data);
        end

        function [status] = DAQmxSetReadAutoStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadAutoStart', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetReadAutoStart', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadAutoStart', taskHandle, data);
        end

        function [status] = DAQmxResetReadAutoStart(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadAutoStart', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadAutoStart', taskHandle);
        end

        function [status, data] = DAQmxGetReadOverWrite(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOverWrite', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetReadOverWrite', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOverWrite', taskHandle, data);
        end

        function [status] = DAQmxSetReadOverWrite(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadOverWrite', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetReadOverWrite', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadOverWrite', taskHandle, data);
        end

        function [status] = DAQmxResetReadOverWrite(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadOverWrite', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadOverWrite', taskHandle);
        end

        function [status, data] = DAQmxGetReadCurrReadPos(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadCurrReadPos', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'vector'}, 'DAQmxGetReadCurrReadPos', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadCurrReadPos', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadAvailSampPerChan(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadAvailSampPerChan', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadAvailSampPerChan', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadAvailSampPerChan', taskHandle, data);
        end

        function [status, data] = DAQmxGetLoggingFilePath(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetLoggingFilePath', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetLoggingFilePath', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetLoggingFilePath', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetLoggingFilePath', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetLoggingFilePath(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetLoggingFilePath', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetLoggingFilePath', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetLoggingFilePath', taskHandle, data);
        end

        function [status] = DAQmxResetLoggingFilePath(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetLoggingFilePath', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetLoggingFilePath', taskHandle);
        end

        function [status, data] = DAQmxGetLoggingMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetLoggingMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetLoggingMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetLoggingMode', taskHandle, data);
        end

        function [status] = DAQmxSetLoggingMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetLoggingMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetLoggingMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetLoggingMode', taskHandle, data);
        end

        function [status] = DAQmxResetLoggingMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetLoggingMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetLoggingMode', taskHandle);
        end

        function [status, data] = DAQmxGetLoggingTDMSGroupName(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetLoggingTDMSGroupName', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetLoggingTDMSGroupName', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetLoggingTDMSGroupName', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetLoggingTDMSGroupName', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetLoggingTDMSGroupName(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetLoggingTDMSGroupName', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetLoggingTDMSGroupName', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetLoggingTDMSGroupName', taskHandle, data);
        end

        function [status] = DAQmxResetLoggingTDMSGroupName(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetLoggingTDMSGroupName', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetLoggingTDMSGroupName', taskHandle);
        end

        function [status, data] = DAQmxGetLoggingTDMSOperation(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetLoggingTDMSOperation', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetLoggingTDMSOperation', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetLoggingTDMSOperation', taskHandle, data);
        end

        function [status] = DAQmxSetLoggingTDMSOperation(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetLoggingTDMSOperation', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetLoggingTDMSOperation', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetLoggingTDMSOperation', taskHandle, data);
        end

        function [status] = DAQmxResetLoggingTDMSOperation(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetLoggingTDMSOperation', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetLoggingTDMSOperation', taskHandle);
        end

        function [status, data] = DAQmxGetReadTotalSampPerChanAcquired(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadTotalSampPerChanAcquired', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'vector'}, 'DAQmxGetReadTotalSampPerChanAcquired', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadTotalSampPerChanAcquired', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadCommonModeRangeErrorChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadCommonModeRangeErrorChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadCommonModeRangeErrorChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadCommonModeRangeErrorChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadCommonModeRangeErrorChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadCommonModeRangeErrorChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadCommonModeRangeErrorChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadCommonModeRangeErrorChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadCommonModeRangeErrorChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadOvercurrentChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOvercurrentChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadOvercurrentChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOvercurrentChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadOvercurrentChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOvercurrentChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadOvercurrentChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadOvercurrentChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadOvercurrentChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadOpenCurrentLoopChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOpenCurrentLoopChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadOpenCurrentLoopChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOpenCurrentLoopChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadOpenCurrentLoopChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOpenCurrentLoopChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadOpenCurrentLoopChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadOpenCurrentLoopChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadOpenCurrentLoopChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadOpenThrmcplChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOpenThrmcplChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadOpenThrmcplChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOpenThrmcplChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadOpenThrmcplChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOpenThrmcplChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadOpenThrmcplChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadOpenThrmcplChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadOpenThrmcplChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadOverloadedChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOverloadedChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadOverloadedChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadOverloadedChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadOverloadedChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadOverloadedChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadOverloadedChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadOverloadedChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadOverloadedChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadAccessoryInsertionOrRemovalDetected(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadAccessoryInsertionOrRemovalDetected', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadAccessoryInsertionOrRemovalDetected', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadAccessoryInsertionOrRemovalDetected', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadDevsWithInsertedOrRemovedAccessories(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadDevsWithInsertedOrRemovedAccessories', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetReadDevsWithInsertedOrRemovedAccessories', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetReadDevsWithInsertedOrRemovedAccessories', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetReadDevsWithInsertedOrRemovedAccessories', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetReadChangeDetectHasOverflowed(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadChangeDetectHasOverflowed', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadChangeDetectHasOverflowed', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadChangeDetectHasOverflowed', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadRawDataWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadRawDataWidth', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadRawDataWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadRawDataWidth', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadNumChans(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadNumChans', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadNumChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadNumChans', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadDigitalLinesBytesPerChan(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadDigitalLinesBytesPerChan', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetReadDigitalLinesBytesPerChan', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadDigitalLinesBytesPerChan', taskHandle, data);
        end

        function [status, data] = DAQmxGetReadWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetReadWaitMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadWaitMode', taskHandle, data);
        end

        function [status] = DAQmxSetReadWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetReadWaitMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadWaitMode', taskHandle, data);
        end

        function [status] = DAQmxResetReadWaitMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadWaitMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadWaitMode', taskHandle);
        end

        function [status, data] = DAQmxGetReadSleepTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetReadSleepTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetReadSleepTime', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetReadSleepTime', taskHandle, data);
        end

        function [status] = DAQmxSetReadSleepTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetReadSleepTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetReadSleepTime', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetReadSleepTime', taskHandle, data);
        end

        function [status] = DAQmxResetReadSleepTime(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetReadSleepTime', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetReadSleepTime', taskHandle);
        end

        function [status, data] = DAQmxGetRealTimeConvLateErrorsToWarnings(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRealTimeConvLateErrorsToWarnings', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRealTimeConvLateErrorsToWarnings', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRealTimeConvLateErrorsToWarnings', taskHandle, data);
        end

        function [status] = DAQmxSetRealTimeConvLateErrorsToWarnings(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRealTimeConvLateErrorsToWarnings', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetRealTimeConvLateErrorsToWarnings', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRealTimeConvLateErrorsToWarnings', taskHandle, data);
        end

        function [status] = DAQmxResetRealTimeConvLateErrorsToWarnings(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeConvLateErrorsToWarnings', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRealTimeConvLateErrorsToWarnings', taskHandle);
        end

        function [status, data] = DAQmxGetRealTimeNumOfWarmupIters(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRealTimeNumOfWarmupIters', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRealTimeNumOfWarmupIters', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRealTimeNumOfWarmupIters', taskHandle, data);
        end

        function [status] = DAQmxSetRealTimeNumOfWarmupIters(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRealTimeNumOfWarmupIters', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetRealTimeNumOfWarmupIters', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRealTimeNumOfWarmupIters', taskHandle, data);
        end

        function [status] = DAQmxResetRealTimeNumOfWarmupIters(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeNumOfWarmupIters', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRealTimeNumOfWarmupIters', taskHandle);
        end

        function [status, data] = DAQmxGetRealTimeWaitForNextSampClkWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRealTimeWaitForNextSampClkWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetRealTimeWaitForNextSampClkWaitMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRealTimeWaitForNextSampClkWaitMode', taskHandle, data);
        end

        function [status] = DAQmxSetRealTimeWaitForNextSampClkWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRealTimeWaitForNextSampClkWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetRealTimeWaitForNextSampClkWaitMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRealTimeWaitForNextSampClkWaitMode', taskHandle, data);
        end

        function [status] = DAQmxResetRealTimeWaitForNextSampClkWaitMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeWaitForNextSampClkWaitMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRealTimeWaitForNextSampClkWaitMode', taskHandle);
        end

        function [status, data] = DAQmxGetRealTimeReportMissedSamp(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRealTimeReportMissedSamp', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRealTimeReportMissedSamp', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRealTimeReportMissedSamp', taskHandle, data);
        end

        function [status] = DAQmxSetRealTimeReportMissedSamp(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRealTimeReportMissedSamp', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetRealTimeReportMissedSamp', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRealTimeReportMissedSamp', taskHandle, data);
        end

        function [status] = DAQmxResetRealTimeReportMissedSamp(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeReportMissedSamp', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRealTimeReportMissedSamp', taskHandle);
        end

        function [status, data] = DAQmxGetRealTimeWriteRecoveryMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRealTimeWriteRecoveryMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetRealTimeWriteRecoveryMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRealTimeWriteRecoveryMode', taskHandle, data);
        end

        function [status] = DAQmxSetRealTimeWriteRecoveryMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRealTimeWriteRecoveryMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetRealTimeWriteRecoveryMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRealTimeWriteRecoveryMode', taskHandle, data);
        end

        function [status] = DAQmxResetRealTimeWriteRecoveryMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRealTimeWriteRecoveryMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRealTimeWriteRecoveryMode', taskHandle);
        end

        function [status, data] = DAQmxGetSwitchChanUsage(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanUsage', 'switchChannelName', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSwitchChanUsage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanUsage', switchChannelName, data);
        end

        function [status] = DAQmxSetSwitchChanUsage(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxSetSwitchChanUsage', 'switchChannelName', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSwitchChanUsage', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchChanUsage', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanAnlgBusSharingEnable(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanAnlgBusSharingEnable', 'switchChannelName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchChanAnlgBusSharingEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanAnlgBusSharingEnable', switchChannelName, data);
        end

        function [status] = DAQmxSetSwitchChanAnlgBusSharingEnable(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxSetSwitchChanAnlgBusSharingEnable', 'switchChannelName', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSwitchChanAnlgBusSharingEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchChanAnlgBusSharingEnable', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxACCarryCurrent(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxACCarryCurrent', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxACCarryCurrent', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxACCarryCurrent', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxACSwitchCurrent(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxACSwitchCurrent', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxACSwitchCurrent', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxACSwitchCurrent', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxACCarryPwr(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxACCarryPwr', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxACCarryPwr', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxACCarryPwr', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxACSwitchPwr(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxACSwitchPwr', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxACSwitchPwr', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxACSwitchPwr', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxDCCarryCurrent(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCCarryCurrent', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCCarryCurrent', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxDCCarryCurrent', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxDCSwitchCurrent(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCSwitchCurrent', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCSwitchCurrent', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxDCSwitchCurrent', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxDCCarryPwr(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCCarryPwr', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCCarryPwr', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxDCCarryPwr', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxDCSwitchPwr(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCSwitchPwr', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCSwitchPwr', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxDCSwitchPwr', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxACVoltage(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxACVoltage', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxACVoltage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxACVoltage', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanMaxDCVoltage(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCVoltage', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanMaxDCVoltage', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanMaxDCVoltage', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanWireMode(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanWireMode', 'switchChannelName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchChanWireMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanWireMode', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanBandwidth(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanBandwidth', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanBandwidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanBandwidth', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchChanImpedance(switchChannelName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(switchChannelName, {'char'}, {'vector'}, 'DAQmxGetSwitchChanImpedance', 'switchChannelName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchChanImpedance', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchChanImpedance', switchChannelName, data);
        end

        function [status, data] = DAQmxGetSwitchDevSettlingTime(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevSettlingTime', 'deviceName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSwitchDevSettlingTime', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevSettlingTime', deviceName, data);
        end

        function [status] = DAQmxSetSwitchDevSettlingTime(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSetSwitchDevSettlingTime', 'deviceName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSwitchDevSettlingTime', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchDevSettlingTime', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevAutoConnAnlgBus(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevAutoConnAnlgBus', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevAutoConnAnlgBus', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevAutoConnAnlgBus', deviceName, data);
        end

        function [status] = DAQmxSetSwitchDevAutoConnAnlgBus(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSetSwitchDevAutoConnAnlgBus', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSwitchDevAutoConnAnlgBus', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchDevAutoConnAnlgBus', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling', deviceName, data);
        end

        function [status] = DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevSettled(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevSettled', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevSettled', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevSettled', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevRelayList(deviceName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevRelayList', 'deviceName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSwitchDevRelayList', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSwitchDevRelayList', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevRelayList', deviceName, data, bufferSize);
        end

        function [status, data] = DAQmxGetSwitchDevNumRelays(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevNumRelays', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevNumRelays', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevNumRelays', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevSwitchChanList(deviceName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevSwitchChanList', 'deviceName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSwitchDevSwitchChanList', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSwitchDevSwitchChanList', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevSwitchChanList', deviceName, data, bufferSize);
        end

        function [status, data] = DAQmxGetSwitchDevNumSwitchChans(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevNumSwitchChans', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevNumSwitchChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevNumSwitchChans', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevNumRows(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevNumRows', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevNumRows', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevNumRows', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevNumColumns(deviceName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevNumColumns', 'deviceName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchDevNumColumns', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevNumColumns', deviceName, data);
        end

        function [status, data] = DAQmxGetSwitchDevTopology(deviceName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(deviceName, {'char'}, {'vector'}, 'DAQmxGetSwitchDevTopology', 'deviceName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSwitchDevTopology', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSwitchDevTopology', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchDevTopology', deviceName, data, bufferSize);
        end

        function [status, data] = DAQmxGetSwitchScanBreakMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSwitchScanBreakMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSwitchScanBreakMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchScanBreakMode', taskHandle, data);
        end

        function [status] = DAQmxSetSwitchScanBreakMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSwitchScanBreakMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSwitchScanBreakMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchScanBreakMode', taskHandle, data);
        end

        function [status] = DAQmxResetSwitchScanBreakMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSwitchScanBreakMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSwitchScanBreakMode', taskHandle);
        end

        function [status, data] = DAQmxGetSwitchScanRepeatMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSwitchScanRepeatMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSwitchScanRepeatMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchScanRepeatMode', taskHandle, data);
        end

        function [status] = DAQmxSetSwitchScanRepeatMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSwitchScanRepeatMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSwitchScanRepeatMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSwitchScanRepeatMode', taskHandle, data);
        end

        function [status] = DAQmxResetSwitchScanRepeatMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSwitchScanRepeatMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSwitchScanRepeatMode', taskHandle);
        end

        function [status, data] = DAQmxGetSwitchScanWaitingForAdv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSwitchScanWaitingForAdv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSwitchScanWaitingForAdv', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSwitchScanWaitingForAdv', taskHandle, data);
        end

        function [status, data] = DAQmxGetScaleDescr(scaleName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleDescr', 'scaleName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetScaleDescr', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetScaleDescr', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScaleDescr', scaleName, data, bufferSize);
        end

        function [status, data] = DAQmxSetScaleDescr(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleDescr', 'scaleName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetScaleDescr', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetScaleDescr', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleScaledUnits(scaleName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleScaledUnits', 'scaleName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetScaleScaledUnits', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetScaleScaledUnits', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScaleScaledUnits', scaleName, data, bufferSize);
        end

        function [status, data] = DAQmxSetScaleScaledUnits(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleScaledUnits', 'scaleName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetScaleScaledUnits', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetScaleScaledUnits', scaleName, data);
        end

        function [status, data] = DAQmxGetScalePreScaledUnits(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScalePreScaledUnits', 'scaleName', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetScalePreScaledUnits', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScalePreScaledUnits', scaleName, data);
        end

        function [status] = DAQmxSetScalePreScaledUnits(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScalePreScaledUnits', 'scaleName', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetScalePreScaledUnits', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScalePreScaledUnits', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleType(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleType', 'scaleName', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetScaleType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleType', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleLinSlope(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleLinSlope', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleLinSlope', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleLinSlope', scaleName, data);
        end

        function [status] = DAQmxSetScaleLinSlope(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleLinSlope', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleLinSlope', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleLinSlope', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleLinYIntercept(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleLinYIntercept', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleLinYIntercept', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleLinYIntercept', scaleName, data);
        end

        function [status] = DAQmxSetScaleLinYIntercept(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleLinYIntercept', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleLinYIntercept', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleLinYIntercept', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleMapScaledMax(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleMapScaledMax', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleMapScaledMax', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleMapScaledMax', scaleName, data);
        end

        function [status] = DAQmxSetScaleMapScaledMax(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleMapScaledMax', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleMapScaledMax', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleMapScaledMax', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleMapPreScaledMax(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleMapPreScaledMax', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleMapPreScaledMax', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleMapPreScaledMax', scaleName, data);
        end

        function [status] = DAQmxSetScaleMapPreScaledMax(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleMapPreScaledMax', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleMapPreScaledMax', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleMapPreScaledMax', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleMapScaledMin(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleMapScaledMin', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleMapScaledMin', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleMapScaledMin', scaleName, data);
        end

        function [status] = DAQmxSetScaleMapScaledMin(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleMapScaledMin', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleMapScaledMin', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleMapScaledMin', scaleName, data);
        end

        function [status, data] = DAQmxGetScaleMapPreScaledMin(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleMapPreScaledMin', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleMapPreScaledMin', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetScaleMapPreScaledMin', scaleName, data);
        end

        function [status] = DAQmxSetScaleMapPreScaledMin(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleMapPreScaledMin', 'scaleName', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetScaleMapPreScaledMin', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetScaleMapPreScaledMin', scaleName, data);
        end

        function [status, data] = DAQmxGetScalePolyForwardCoeff(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScalePolyForwardCoeff', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScalePolyForwardCoeff', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetScalePolyForwardCoeff', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScalePolyForwardCoeff', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetScalePolyForwardCoeff(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScalePolyForwardCoeff', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetScalePolyForwardCoeff', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetScalePolyForwardCoeff', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxSetScalePolyForwardCoeff', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetScalePolyReverseCoeff(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScalePolyReverseCoeff', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScalePolyReverseCoeff', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetScalePolyReverseCoeff', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScalePolyReverseCoeff', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetScalePolyReverseCoeff(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScalePolyReverseCoeff', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetScalePolyReverseCoeff', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetScalePolyReverseCoeff', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxSetScalePolyReverseCoeff', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetScaleTableScaledVals(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleTableScaledVals', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleTableScaledVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetScaleTableScaledVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScaleTableScaledVals', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetScaleTableScaledVals(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleTableScaledVals', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetScaleTableScaledVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetScaleTableScaledVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxSetScaleTableScaledVals', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetScaleTablePreScaledVals(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetScaleTablePreScaledVals', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetScaleTablePreScaledVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetScaleTablePreScaledVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetScaleTablePreScaledVals', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxSetScaleTablePreScaledVals(scaleName, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxSetScaleTablePreScaledVals', 'scaleName', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxSetScaleTablePreScaledVals', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxSetScaleTablePreScaledVals', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxSetScaleTablePreScaledVals', scaleName, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetSysGlobalChans(data, bufferSize)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSysGlobalChans', 'data', 1);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSysGlobalChans', 'bufferSize', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSysGlobalChans', data, bufferSize);
        end

        function [status, data] = DAQmxGetSysScales(data, bufferSize)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSysScales', 'data', 1);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSysScales', 'bufferSize', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSysScales', data, bufferSize);
        end

        function [status, data] = DAQmxGetSysTasks(data, bufferSize)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSysTasks', 'data', 1);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSysTasks', 'bufferSize', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSysTasks', data, bufferSize);
        end

        function [status, data] = DAQmxGetSysDevNames(data, bufferSize)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSysDevNames', 'data', 1);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSysDevNames', 'bufferSize', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSysDevNames', data, bufferSize);
        end

        function [status, data] = DAQmxGetSysNIDAQMajorVersion(data)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSysNIDAQMajorVersion', 'data', 1);
                [status, data]= mexNIDAQmx('DAQmxGetSysNIDAQMajorVersion', data);
        end

        function [status, data] = DAQmxGetSysNIDAQMinorVersion(data)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSysNIDAQMinorVersion', 'data', 1);
                [status, data]= mexNIDAQmx('DAQmxGetSysNIDAQMinorVersion', data);
        end

        function [status, data] = DAQmxGetSysNIDAQUpdateVersion(data)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSysNIDAQUpdateVersion', 'data', 1);
                [status, data]= mexNIDAQmx('DAQmxGetSysNIDAQUpdateVersion', data);
        end

        function [status, data] = DAQmxGetTaskName(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskName', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetTaskName', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetTaskName', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetTaskName', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetTaskChannels(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskChannels', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetTaskChannels', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetTaskChannels', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetTaskChannels', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetTaskNumChans(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskNumChans', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetTaskNumChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetTaskNumChans', taskHandle, data);
        end

        function [status, data] = DAQmxGetTaskDevices(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskDevices', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetTaskDevices', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetTaskDevices', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetTaskDevices', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetTaskNumDevices(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskNumDevices', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetTaskNumDevices', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetTaskNumDevices', taskHandle, data);
        end

        function [status, data] = DAQmxGetTaskComplete(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTaskComplete', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetTaskComplete', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetTaskComplete', taskHandle, data);
        end

        function [status, data] = DAQmxGetSampQuantSampMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampQuantSampMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampQuantSampMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampQuantSampMode', taskHandle, data);
        end

        function [status] = DAQmxSetSampQuantSampMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampQuantSampMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampQuantSampMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampQuantSampMode', taskHandle, data);
        end

        function [status] = DAQmxResetSampQuantSampMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampQuantSampMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampQuantSampMode', taskHandle);
        end

        function [status, data] = DAQmxGetSampQuantSampPerChan(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampQuantSampPerChan', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'vector'}, 'DAQmxGetSampQuantSampPerChan', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampQuantSampPerChan', taskHandle, data);
        end

        function [status] = DAQmxSetSampQuantSampPerChan(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampQuantSampPerChan', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'scalar'}, 'DAQmxSetSampQuantSampPerChan', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampQuantSampPerChan', taskHandle, data);
        end

        function [status] = DAQmxResetSampQuantSampPerChan(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampQuantSampPerChan', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampQuantSampPerChan', taskHandle);
        end

        function [status, data] = DAQmxGetSampTimingType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampTimingType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampTimingType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampTimingType', taskHandle, data);
        end

        function [status] = DAQmxSetSampTimingType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampTimingType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampTimingType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampTimingType', taskHandle, data);
        end

        function [status] = DAQmxResetSampTimingType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampTimingType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampTimingType', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSampClkRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkRate', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSampClkRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkRate', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkRate', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkMaxRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkMaxRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSampClkMaxRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkMaxRate', taskHandle, data);
        end

        function [status, data] = DAQmxGetSampClkSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSampClkSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSampClkSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetSampClkSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetSampClkSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetSampClkSrc', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkSrc', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampClkActiveEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampClkActiveEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkActiveEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkActiveEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkActiveEdge', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkOverrunBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkOverrunBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampClkOverrunBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkOverrunBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkOverrunBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkOverrunBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampClkOverrunBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkOverrunBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkOverrunBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkOverrunBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkOverrunBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkUnderflowBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkUnderflowBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampClkUnderflowBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkUnderflowBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkUnderflowBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkUnderflowBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampClkUnderflowBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkUnderflowBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkUnderflowBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkUnderflowBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkUnderflowBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSampClkTimebaseDiv', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSampClkTimebaseDiv', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimebaseDiv(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimebaseDiv', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimebaseDiv', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSampClkTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSampClkTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetSampClkTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSampClkTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSampClkTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSampClkTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSampClkTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetSampClkTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetSampClkTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetSampClkTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTimebaseActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampClkTimebaseActiveEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkTimebaseActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimebaseActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampClkTimebaseActiveEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkTimebaseActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimebaseActiveEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimebaseActiveEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimebaseActiveEdge', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTimebaseMasterTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSampClkTimebaseMasterTimebaseDiv', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseMasterTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkTimebaseMasterTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimebaseMasterTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSampClkTimebaseMasterTimebaseDiv', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkTimebaseMasterTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimebaseMasterTimebaseDiv(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimebaseMasterTimebaseDiv', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimebaseMasterTimebaseDiv', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkTimebaseTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimebaseTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSampClkTimebaseTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSampClkTimebaseTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimebaseTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetSampClkDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSampClkDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSampClkDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSampClkDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSampClkDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSampClkDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSampClkDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetSampClkDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetSampClkDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetSampClkDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSampClkDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSampClkDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetSampClkDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSampClkDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSampClkDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetHshkDelayAfterXfer(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetHshkDelayAfterXfer', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetHshkDelayAfterXfer', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetHshkDelayAfterXfer', taskHandle, data);
        end

        function [status] = DAQmxSetHshkDelayAfterXfer(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetHshkDelayAfterXfer', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetHshkDelayAfterXfer', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetHshkDelayAfterXfer', taskHandle, data);
        end

        function [status] = DAQmxResetHshkDelayAfterXfer(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetHshkDelayAfterXfer', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetHshkDelayAfterXfer', taskHandle);
        end

        function [status, data] = DAQmxGetHshkStartCond(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetHshkStartCond', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetHshkStartCond', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetHshkStartCond', taskHandle, data);
        end

        function [status] = DAQmxSetHshkStartCond(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetHshkStartCond', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetHshkStartCond', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetHshkStartCond', taskHandle, data);
        end

        function [status] = DAQmxResetHshkStartCond(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetHshkStartCond', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetHshkStartCond', taskHandle);
        end

        function [status, data] = DAQmxGetHshkSampleInputDataWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetHshkSampleInputDataWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetHshkSampleInputDataWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetHshkSampleInputDataWhen', taskHandle, data);
        end

        function [status] = DAQmxSetHshkSampleInputDataWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetHshkSampleInputDataWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetHshkSampleInputDataWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetHshkSampleInputDataWhen', taskHandle, data);
        end

        function [status] = DAQmxResetHshkSampleInputDataWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetHshkSampleInputDataWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetHshkSampleInputDataWhen', taskHandle);
        end

        function [status, data] = DAQmxGetChangeDetectDIRisingEdgePhysicalChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChangeDetectDIRisingEdgePhysicalChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetChangeDetectDIRisingEdgePhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetChangeDetectDIRisingEdgePhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetChangeDetectDIRisingEdgePhysicalChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetChangeDetectDIRisingEdgePhysicalChans(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetChangeDetectDIRisingEdgePhysicalChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetChangeDetectDIRisingEdgePhysicalChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetChangeDetectDIRisingEdgePhysicalChans', taskHandle, data);
        end

        function [status] = DAQmxResetChangeDetectDIRisingEdgePhysicalChans(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetChangeDetectDIRisingEdgePhysicalChans', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetChangeDetectDIRisingEdgePhysicalChans', taskHandle);
        end

        function [status, data] = DAQmxGetChangeDetectDIFallingEdgePhysicalChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChangeDetectDIFallingEdgePhysicalChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetChangeDetectDIFallingEdgePhysicalChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetChangeDetectDIFallingEdgePhysicalChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetChangeDetectDIFallingEdgePhysicalChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetChangeDetectDIFallingEdgePhysicalChans(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetChangeDetectDIFallingEdgePhysicalChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetChangeDetectDIFallingEdgePhysicalChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetChangeDetectDIFallingEdgePhysicalChans', taskHandle, data);
        end

        function [status] = DAQmxResetChangeDetectDIFallingEdgePhysicalChans(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetChangeDetectDIFallingEdgePhysicalChans', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetChangeDetectDIFallingEdgePhysicalChans', taskHandle);
        end

        function [status, data] = DAQmxGetChangeDetectDITristate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetChangeDetectDITristate', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetChangeDetectDITristate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetChangeDetectDITristate', taskHandle, data);
        end

        function [status] = DAQmxSetChangeDetectDITristate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetChangeDetectDITristate', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetChangeDetectDITristate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetChangeDetectDITristate', taskHandle, data);
        end

        function [status] = DAQmxResetChangeDetectDITristate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetChangeDetectDITristate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetChangeDetectDITristate', taskHandle);
        end

        function [status, data] = DAQmxGetOnDemandSimultaneousAOEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetOnDemandSimultaneousAOEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetOnDemandSimultaneousAOEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetOnDemandSimultaneousAOEnable', taskHandle, data);
        end

        function [status] = DAQmxSetOnDemandSimultaneousAOEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetOnDemandSimultaneousAOEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetOnDemandSimultaneousAOEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetOnDemandSimultaneousAOEnable', taskHandle, data);
        end

        function [status] = DAQmxResetOnDemandSimultaneousAOEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetOnDemandSimultaneousAOEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetOnDemandSimultaneousAOEnable', taskHandle);
        end

        function [status, data] = DAQmxGetImplicitUnderflowBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetImplicitUnderflowBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetImplicitUnderflowBehavior', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetImplicitUnderflowBehavior', taskHandle, data);
        end

        function [status] = DAQmxSetImplicitUnderflowBehavior(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetImplicitUnderflowBehavior', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetImplicitUnderflowBehavior', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetImplicitUnderflowBehavior', taskHandle, data);
        end

        function [status] = DAQmxResetImplicitUnderflowBehavior(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetImplicitUnderflowBehavior', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetImplicitUnderflowBehavior', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvRate', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvRate', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvRate', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvRateEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvRateEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvRateEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvRateEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvRateEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvRateEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvRateEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvRateEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvRateEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvRateEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvRateEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvMaxRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvMaxRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvMaxRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvMaxRate', taskHandle, data);
        end

        function [status, data] = DAQmxGetAIConvMaxRateEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvMaxRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvMaxRateEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvMaxRateEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvMaxRateEx', taskHandle, deviceNames, data);
        end

        function [status, data] = DAQmxGetAIConvSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIConvSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIConvSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIConvSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIConvSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAIConvSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvSrcEx(taskHandle, deviceNames, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvSrcEx', 'deviceNames', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIConvSrcEx', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIConvSrcEx', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvSrcEx', taskHandle, deviceNames, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIConvSrcEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvSrcEx', 'deviceNames', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIConvSrcEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAIConvSrcEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvSrcEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvSrcEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvSrcEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIConvActiveEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvActiveEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvActiveEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIConvActiveEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvActiveEdge', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvActiveEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvActiveEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvActiveEdge', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvActiveEdgeEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvActiveEdgeEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvActiveEdgeEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIConvActiveEdgeEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvActiveEdgeEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvActiveEdgeEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvActiveEdgeEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvActiveEdgeEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIConvActiveEdgeEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvActiveEdgeEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvActiveEdgeEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvActiveEdgeEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvActiveEdgeEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvActiveEdgeEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvTimebaseDiv', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvTimebaseDiv(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvTimebaseDiv', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvTimebaseDiv', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvTimebaseDiv', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvTimebaseDiv(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvTimebaseDiv', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvTimebaseDiv', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvTimebaseDivEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvTimebaseDivEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvTimebaseDivEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvTimebaseDivEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvTimebaseDivEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvTimebaseDivEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvTimebaseDivEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvTimebaseDivEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvTimebaseDivEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvTimebaseDivEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvTimebaseDivEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvTimebaseDivEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvTimebaseDivEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvTimebaseDivEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIConvTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIConvTimebaseSrc', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvTimebaseSrcEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvTimebaseSrcEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAIConvTimebaseSrcEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvTimebaseSrcEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvTimebaseSrcEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvTimebaseSrcEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAIConvTimebaseSrcEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvTimebaseSrcEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvTimebaseSrcEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvTimebaseSrcEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvTimebaseSrcEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetDelayFromSampClkDelayUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDelayFromSampClkDelayUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelayUnits', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDelayFromSampClkDelayUnits', taskHandle, data);
        end

        function [status] = DAQmxSetDelayFromSampClkDelayUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayUnits', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDelayFromSampClkDelayUnits', taskHandle, data);
        end

        function [status] = DAQmxResetDelayFromSampClkDelayUnits(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDelayFromSampClkDelayUnits', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDelayFromSampClkDelayUnits', taskHandle);
        end

        function [status, data] = DAQmxGetDelayFromSampClkDelayUnitsEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDelayFromSampClkDelayUnitsEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelayUnitsEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelayUnitsEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDelayFromSampClkDelayUnitsEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetDelayFromSampClkDelayUnitsEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayUnitsEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetDelayFromSampClkDelayUnitsEx', 'deviceNames', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayUnitsEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDelayFromSampClkDelayUnitsEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetDelayFromSampClkDelayUnitsEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDelayFromSampClkDelayUnitsEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetDelayFromSampClkDelayUnitsEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetDelayFromSampClkDelayUnitsEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetDelayFromSampClkDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDelayFromSampClkDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDelayFromSampClkDelay', taskHandle, data);
        end

        function [status] = DAQmxSetDelayFromSampClkDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDelayFromSampClkDelay', taskHandle, data);
        end

        function [status] = DAQmxResetDelayFromSampClkDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDelayFromSampClkDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDelayFromSampClkDelay', taskHandle);
        end

        function [status, data] = DAQmxGetDelayFromSampClkDelayEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDelayFromSampClkDelayEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelayEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDelayFromSampClkDelayEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDelayFromSampClkDelayEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetDelayFromSampClkDelayEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetDelayFromSampClkDelayEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDelayFromSampClkDelayEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetDelayFromSampClkDelayEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetDelayFromSampClkDelayEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDelayFromSampClkDelayEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetDelayFromSampClkDelayEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetDelayFromSampClkDelayEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvDigFltrEnableEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrEnableEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvDigFltrEnableEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrEnableEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvDigFltrEnableEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrEnableEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvDigFltrEnableEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrEnableEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvDigFltrEnableEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvDigFltrEnableEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrEnableEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvDigFltrMinPulseWidthEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrMinPulseWidthEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrMinPulseWidthEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvDigFltrMinPulseWidthEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrMinPulseWidthEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvDigFltrMinPulseWidthEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrMinPulseWidthEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrMinPulseWidthEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvDigFltrMinPulseWidthEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrMinPulseWidthEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvDigFltrMinPulseWidthEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrMinPulseWidthEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvDigFltrMinPulseWidthEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrMinPulseWidthEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIConvDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAIConvDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvDigFltrTimebaseSrcEx(taskHandle, deviceNames, data, bufferSize)
            error(nargchk(4, 4, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseSrcEx', 'deviceNames', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseSrcEx', 'data', 3);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseSrcEx', 'bufferSize', 4);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrTimebaseSrcEx', taskHandle, deviceNames, data, bufferSize);
        end

        function [status, data] = DAQmxSetAIConvDigFltrTimebaseSrcEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrTimebaseSrcEx', 'deviceNames', 2);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrTimebaseSrcEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxSetAIConvDigFltrTimebaseSrcEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvDigFltrTimebaseSrcEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrTimebaseSrcEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvDigFltrTimebaseSrcEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrTimebaseSrcEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvDigFltrTimebaseRateEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigFltrTimebaseRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseRateEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAIConvDigFltrTimebaseRateEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigFltrTimebaseRateEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvDigFltrTimebaseRateEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvDigFltrTimebaseRateEx', 'deviceNames', 2);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAIConvDigFltrTimebaseRateEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigFltrTimebaseRateEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvDigFltrTimebaseRateEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigFltrTimebaseRateEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvDigFltrTimebaseRateEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigFltrTimebaseRateEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetAIConvDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAIConvDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAIConvDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAIConvDigSyncEnableEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAIConvDigSyncEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxGetAIConvDigSyncEnableEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAIConvDigSyncEnableEx', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAIConvDigSyncEnableEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxSetAIConvDigSyncEnableEx(taskHandle, deviceNames, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAIConvDigSyncEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxSetAIConvDigSyncEnableEx', 'deviceNames', 2);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAIConvDigSyncEnableEx', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetAIConvDigSyncEnableEx', taskHandle, deviceNames, data);
        end

        function [status] = DAQmxResetAIConvDigSyncEnableEx(taskHandle, deviceNames)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAIConvDigSyncEnableEx', 'taskHandle', 1);
            validateattributes(deviceNames, {'char'}, {'vector'}, 'DAQmxResetAIConvDigSyncEnableEx', 'deviceNames', 2);
                [status]= mexNIDAQmx('DAQmxResetAIConvDigSyncEnableEx', taskHandle, deviceNames);
        end

        function [status, data] = DAQmxGetMasterTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetMasterTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetMasterTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetMasterTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetMasterTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetMasterTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetMasterTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetMasterTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetMasterTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetMasterTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetMasterTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetMasterTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetMasterTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetMasterTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetMasterTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetMasterTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetMasterTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetMasterTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetMasterTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetMasterTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetMasterTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetMasterTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetMasterTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetRefClkRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefClkRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetRefClkRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefClkRate', taskHandle, data);
        end

        function [status] = DAQmxSetRefClkRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefClkRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetRefClkRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRefClkRate', taskHandle, data);
        end

        function [status] = DAQmxResetRefClkRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefClkRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefClkRate', taskHandle);
        end

        function [status, data] = DAQmxGetRefClkSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefClkSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetRefClkSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetRefClkSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetRefClkSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetRefClkSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefClkSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetRefClkSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetRefClkSrc', taskHandle, data);
        end

        function [status] = DAQmxResetRefClkSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefClkSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefClkSrc', taskHandle);
        end

        function [status, data] = DAQmxGetSyncPulseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSyncPulseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSyncPulseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetSyncPulseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSyncPulseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetSyncPulseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetSyncPulseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetSyncPulseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSyncPulseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSyncPulseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetSyncPulseSyncTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseSyncTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSyncPulseSyncTime', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseSyncTime', taskHandle, data);
        end

        function [status, data] = DAQmxGetSyncPulseMinDelayToStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseMinDelayToStart', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSyncPulseMinDelayToStart', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseMinDelayToStart', taskHandle, data);
        end

        function [status] = DAQmxSetSyncPulseMinDelayToStart(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSyncPulseMinDelayToStart', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSyncPulseMinDelayToStart', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSyncPulseMinDelayToStart', taskHandle, data);
        end

        function [status] = DAQmxResetSyncPulseMinDelayToStart(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSyncPulseMinDelayToStart', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSyncPulseMinDelayToStart', taskHandle);
        end

        function [status, data] = DAQmxGetSyncPulseResetTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseResetTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSyncPulseResetTime', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseResetTime', taskHandle, data);
        end

        function [status, data] = DAQmxGetSyncPulseResetDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseResetDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetSyncPulseResetDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseResetDelay', taskHandle, data);
        end

        function [status] = DAQmxSetSyncPulseResetDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSyncPulseResetDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetSyncPulseResetDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSyncPulseResetDelay', taskHandle, data);
        end

        function [status] = DAQmxResetSyncPulseResetDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSyncPulseResetDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSyncPulseResetDelay', taskHandle);
        end

        function [status, data] = DAQmxGetSyncPulseTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncPulseTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetSyncPulseTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetSyncPulseTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetSyncPulseTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetSyncClkInterval(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSyncClkInterval', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSyncClkInterval', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSyncClkInterval', taskHandle, data);
        end

        function [status] = DAQmxSetSyncClkInterval(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSyncClkInterval', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSyncClkInterval', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSyncClkInterval', taskHandle, data);
        end

        function [status] = DAQmxResetSyncClkInterval(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSyncClkInterval', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSyncClkInterval', taskHandle);
        end

        function [status, data] = DAQmxGetSampTimingEngine(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampTimingEngine', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetSampTimingEngine', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampTimingEngine', taskHandle, data);
        end

        function [status] = DAQmxSetSampTimingEngine(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampTimingEngine', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetSampTimingEngine', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampTimingEngine', taskHandle, data);
        end

        function [status] = DAQmxResetSampTimingEngine(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampTimingEngine', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampTimingEngine', taskHandle);
        end

        function [status, data] = DAQmxGetStartTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetStartTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetStartTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetStartTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetStartTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetStartTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetStartTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetStartTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetStartTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetStartTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetStartTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetStartTrigTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetStartTrigTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetStartTrigTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetStartTrigTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetStartTrigTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeStartTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeStartTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeStartTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigEdge', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeStartTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeStartTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeStartTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeStartTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternStartTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternStartTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternStartTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternStartTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternStartTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternStartTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternStartTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternStartTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternStartTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternStartTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternStartTrigPattern(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternStartTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternStartTrigPattern', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternStartTrigPattern', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternStartTrigPattern', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternStartTrigPattern(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternStartTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternStartTrigPattern', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternStartTrigPattern', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternStartTrigPattern(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternStartTrigPattern', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternStartTrigPattern', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternStartTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternStartTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigPatternStartTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternStartTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetDigPatternStartTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternStartTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigPatternStartTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigPatternStartTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternStartTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternStartTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternStartTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgEdgeStartTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgEdgeStartTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigSlope(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigSlope', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigSlope', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigSlope', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigSlope(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigSlope', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigSlope', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigSlope', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigSlope(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigSlope', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigSlope', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigLvl', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigHyst', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigHyst', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigHyst(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigHyst', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigHyst', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgEdgeStartTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgEdgeStartTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeStartTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeStartTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeStartTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinStartTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinStartTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigTop', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigTop', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigTop', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigTop', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigTop(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigTop', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigTop', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigBtm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigBtm', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigBtm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigBtm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigBtm', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinStartTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinStartTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinStartTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinStartTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinStartTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetStartTrigDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetStartTrigDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetStartTrigDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetStartTrigDelay', taskHandle, data);
        end

        function [status] = DAQmxSetStartTrigDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetStartTrigDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetStartTrigDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetStartTrigDelay', taskHandle, data);
        end

        function [status] = DAQmxResetStartTrigDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetStartTrigDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetStartTrigDelay', taskHandle);
        end

        function [status, data] = DAQmxGetStartTrigDelayUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetStartTrigDelayUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetStartTrigDelayUnits', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetStartTrigDelayUnits', taskHandle, data);
        end

        function [status] = DAQmxSetStartTrigDelayUnits(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetStartTrigDelayUnits', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetStartTrigDelayUnits', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetStartTrigDelayUnits', taskHandle, data);
        end

        function [status] = DAQmxResetStartTrigDelayUnits(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetStartTrigDelayUnits', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetStartTrigDelayUnits', taskHandle);
        end

        function [status, data] = DAQmxGetStartTrigRetriggerable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetStartTrigRetriggerable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetStartTrigRetriggerable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetStartTrigRetriggerable', taskHandle, data);
        end

        function [status] = DAQmxSetStartTrigRetriggerable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetStartTrigRetriggerable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetStartTrigRetriggerable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetStartTrigRetriggerable', taskHandle, data);
        end

        function [status] = DAQmxResetStartTrigRetriggerable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetStartTrigRetriggerable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetStartTrigRetriggerable', taskHandle);
        end

        function [status, data] = DAQmxGetRefTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetRefTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetRefTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetRefTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRefTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetRefTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetRefTrigPretrigSamples(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigPretrigSamples', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRefTrigPretrigSamples', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigPretrigSamples', taskHandle, data);
        end

        function [status] = DAQmxSetRefTrigPretrigSamples(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefTrigPretrigSamples', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetRefTrigPretrigSamples', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRefTrigPretrigSamples', taskHandle, data);
        end

        function [status] = DAQmxResetRefTrigPretrigSamples(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefTrigPretrigSamples', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefTrigPretrigSamples', taskHandle);
        end

        function [status, data] = DAQmxGetRefTrigTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetRefTrigTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetRefTrigTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeRefTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeRefTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeRefTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigEdge', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeRefTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeRefTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeRefTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeRefTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternRefTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternRefTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternRefTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternRefTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternRefTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternRefTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternRefTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternRefTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternRefTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternRefTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternRefTrigPattern(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternRefTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternRefTrigPattern', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternRefTrigPattern', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternRefTrigPattern', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternRefTrigPattern(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternRefTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternRefTrigPattern', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternRefTrigPattern', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternRefTrigPattern(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternRefTrigPattern', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternRefTrigPattern', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternRefTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternRefTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigPatternRefTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternRefTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetDigPatternRefTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternRefTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigPatternRefTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigPatternRefTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternRefTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternRefTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternRefTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgEdgeRefTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgEdgeRefTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigSlope(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigSlope', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigSlope', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigSlope', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigSlope(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigSlope', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigSlope', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigSlope', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigSlope(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigSlope', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigSlope', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigLvl', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigHyst', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigHyst', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigHyst(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigHyst', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigHyst', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgEdgeRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgEdgeRefTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgEdgeRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgEdgeRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgEdgeRefTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgEdgeRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgEdgeRefTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgEdgeRefTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgEdgeRefTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinRefTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinRefTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigTop', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigTop', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigTop', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigTop', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigTop(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigTop', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigTop', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigBtm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigBtm', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigBtm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigBtm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigBtm', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinRefTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinRefTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinRefTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinRefTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinRefTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinRefTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinRefTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetRefTrigAutoTrigEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigAutoTrigEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRefTrigAutoTrigEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigAutoTrigEnable', taskHandle, data);
        end

        function [status] = DAQmxSetRefTrigAutoTrigEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefTrigAutoTrigEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetRefTrigAutoTrigEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRefTrigAutoTrigEnable', taskHandle, data);
        end

        function [status] = DAQmxResetRefTrigAutoTrigEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefTrigAutoTrigEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefTrigAutoTrigEnable', taskHandle);
        end

        function [status, data] = DAQmxGetRefTrigAutoTriggered(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigAutoTriggered', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetRefTrigAutoTriggered', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigAutoTriggered', taskHandle, data);
        end

        function [status, data] = DAQmxGetRefTrigDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetRefTrigDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetRefTrigDelay', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetRefTrigDelay', taskHandle, data);
        end

        function [status] = DAQmxSetRefTrigDelay(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetRefTrigDelay', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetRefTrigDelay', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetRefTrigDelay', taskHandle, data);
        end

        function [status] = DAQmxResetRefTrigDelay(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetRefTrigDelay', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetRefTrigDelay', taskHandle);
        end

        function [status, data] = DAQmxGetAdvTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAdvTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAdvTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAdvTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetAdvTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAdvTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAdvTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAdvTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetAdvTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAdvTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAdvTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeAdvTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeAdvTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeAdvTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeAdvTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeAdvTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeAdvTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeAdvTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeAdvTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeAdvTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeAdvTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeAdvTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeAdvTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeAdvTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeAdvTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigEdgeAdvTrigEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeAdvTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeAdvTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeAdvTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigEdgeAdvTrigEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeAdvTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeAdvTrigEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeAdvTrigEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeAdvTrigEdge', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeAdvTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeAdvTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeAdvTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeAdvTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeAdvTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeAdvTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeAdvTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeAdvTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeAdvTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeAdvTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeAdvTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetHshkTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetHshkTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetHshkTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetHshkTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetHshkTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetHshkTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetHshkTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetHshkTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetHshkTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetHshkTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetHshkTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetInterlockedHshkTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetInterlockedHshkTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetInterlockedHshkTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetInterlockedHshkTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetInterlockedHshkTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetInterlockedHshkTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetInterlockedHshkTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetInterlockedHshkTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetInterlockedHshkTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetInterlockedHshkTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetInterlockedHshkTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetInterlockedHshkTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetInterlockedHshkTrigAssertedLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetInterlockedHshkTrigAssertedLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetInterlockedHshkTrigAssertedLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetInterlockedHshkTrigAssertedLvl', taskHandle, data);
        end

        function [status] = DAQmxSetInterlockedHshkTrigAssertedLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetInterlockedHshkTrigAssertedLvl', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetInterlockedHshkTrigAssertedLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetInterlockedHshkTrigAssertedLvl', taskHandle, data);
        end

        function [status] = DAQmxResetInterlockedHshkTrigAssertedLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetInterlockedHshkTrigAssertedLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetInterlockedHshkTrigAssertedLvl', taskHandle);
        end

        function [status, data] = DAQmxGetPauseTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetPauseTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetPauseTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPauseTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetPauseTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetPauseTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetPauseTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetPauseTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetPauseTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetPauseTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetPauseTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetPauseTrigTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetPauseTrigTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPauseTrigTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPauseTrigTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPauseTrigTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgLvlPauseTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgLvlPauseTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigLvl', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigLvl(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigLvl', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigLvl', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigLvl', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigLvl(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigLvl', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigLvl', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigHyst', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigHyst(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigHyst', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigHyst', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigHyst', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigHyst(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigHyst', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigHyst', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgLvlPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgLvlPauseTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgLvlPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgLvlPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgLvlPauseTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgLvlPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgLvlPauseTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgLvlPauseTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinPauseTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinPauseTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigTop', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigTop', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigTop(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigTop', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigTop', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigTop', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigTop(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigTop', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigTop', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigBtm', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigBtm(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigBtm', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigBtm', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigBtm', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigBtm(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigBtm', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigBtm', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigCoupling', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigCoupling(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigCoupling', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigCoupling', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigCoupling', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigCoupling(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigCoupling', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigCoupling', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetAnlgWinPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetAnlgWinPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetAnlgWinPauseTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetAnlgWinPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetAnlgWinPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetAnlgWinPauseTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetAnlgWinPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetAnlgWinPauseTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetAnlgWinPauseTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetAnlgWinPauseTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigLvlPauseTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigLvlPauseTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetDigLvlPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigLvlPauseTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetDigLvlPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigLvlPauseTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigLvlPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigLvlPauseTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigLvlPauseTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigLvlPauseTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigLvlPauseTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigLvlPauseTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigLvlPauseTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternPauseTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternPauseTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternPauseTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternPauseTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternPauseTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternPauseTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternPauseTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternPauseTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternPauseTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternPauseTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternPauseTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternPauseTrigPattern(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternPauseTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigPatternPauseTrigPattern', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigPatternPauseTrigPattern', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternPauseTrigPattern', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigPatternPauseTrigPattern(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternPauseTrigPattern', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigPatternPauseTrigPattern', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigPatternPauseTrigPattern', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternPauseTrigPattern(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternPauseTrigPattern', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternPauseTrigPattern', taskHandle);
        end

        function [status, data] = DAQmxGetDigPatternPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigPatternPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigPatternPauseTrigWhen', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigPatternPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxSetDigPatternPauseTrigWhen(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigPatternPauseTrigWhen', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigPatternPauseTrigWhen', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigPatternPauseTrigWhen', taskHandle, data);
        end

        function [status] = DAQmxResetDigPatternPauseTrigWhen(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigPatternPauseTrigWhen', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigPatternPauseTrigWhen', taskHandle);
        end

        function [status, data] = DAQmxGetArmStartTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetArmStartTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetArmStartTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetArmStartTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetArmStartTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetArmStartTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetArmStartTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetArmStartTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetArmStartTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetArmStartTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetArmStartTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetArmStartTerm(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetArmStartTerm', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetArmStartTerm', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetArmStartTerm', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetArmStartTerm', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeArmStartTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeArmStartTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeArmStartTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigEdge', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeArmStartTrigDigFltrEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigDigFltrEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigDigFltrEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigDigFltrEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigDigFltrEnable', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeArmStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeArmStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetDigEdgeArmStartTrigDigSyncEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeArmStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeArmStartTrigDigSyncEnable(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigSyncEnable', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetDigEdgeArmStartTrigDigSyncEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeArmStartTrigDigSyncEnable', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeArmStartTrigDigSyncEnable(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeArmStartTrigDigSyncEnable', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeArmStartTrigDigSyncEnable', taskHandle);
        end

        function [status, data] = DAQmxGetTriggerSyncType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetTriggerSyncType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetTriggerSyncType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetTriggerSyncType', taskHandle, data);
        end

        function [status] = DAQmxSetTriggerSyncType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetTriggerSyncType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetTriggerSyncType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetTriggerSyncType', taskHandle, data);
        end

        function [status] = DAQmxResetTriggerSyncType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetTriggerSyncType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetTriggerSyncType', taskHandle);
        end

        function [status, data] = DAQmxGetWatchdogTimeout(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWatchdogTimeout', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetWatchdogTimeout', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWatchdogTimeout', taskHandle, data);
        end

        function [status] = DAQmxSetWatchdogTimeout(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWatchdogTimeout', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetWatchdogTimeout', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWatchdogTimeout', taskHandle, data);
        end

        function [status] = DAQmxResetWatchdogTimeout(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWatchdogTimeout', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWatchdogTimeout', taskHandle);
        end

        function [status, data] = DAQmxGetWatchdogExpirTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWatchdogExpirTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWatchdogExpirTrigType', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWatchdogExpirTrigType', taskHandle, data);
        end

        function [status] = DAQmxSetWatchdogExpirTrigType(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWatchdogExpirTrigType', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWatchdogExpirTrigType', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWatchdogExpirTrigType', taskHandle, data);
        end

        function [status] = DAQmxResetWatchdogExpirTrigType(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWatchdogExpirTrigType', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWatchdogExpirTrigType', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeWatchdogExpirTrigSrc(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeWatchdogExpirTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetDigEdgeWatchdogExpirTrigSrc', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetDigEdgeWatchdogExpirTrigSrc', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeWatchdogExpirTrigSrc', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxSetDigEdgeWatchdogExpirTrigSrc(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeWatchdogExpirTrigSrc', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxSetDigEdgeWatchdogExpirTrigSrc', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxSetDigEdgeWatchdogExpirTrigSrc', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeWatchdogExpirTrigSrc(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeWatchdogExpirTrigSrc', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeWatchdogExpirTrigSrc', taskHandle);
        end

        function [status, data] = DAQmxGetDigEdgeWatchdogExpirTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetDigEdgeWatchdogExpirTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetDigEdgeWatchdogExpirTrigEdge', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetDigEdgeWatchdogExpirTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxSetDigEdgeWatchdogExpirTrigEdge(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetDigEdgeWatchdogExpirTrigEdge', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetDigEdgeWatchdogExpirTrigEdge', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetDigEdgeWatchdogExpirTrigEdge', taskHandle, data);
        end

        function [status] = DAQmxResetDigEdgeWatchdogExpirTrigEdge(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetDigEdgeWatchdogExpirTrigEdge', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetDigEdgeWatchdogExpirTrigEdge', taskHandle);
        end

        function [status, data] = DAQmxGetWatchdogDOExpirState(taskHandle, lines, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWatchdogDOExpirState', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxGetWatchdogDOExpirState', 'lines', 2);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWatchdogDOExpirState', 'data', 3);
                [status, data]= mexNIDAQmx('DAQmxGetWatchdogDOExpirState', taskHandle, lines, data);
        end

        function [status] = DAQmxSetWatchdogDOExpirState(taskHandle, lines, data)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWatchdogDOExpirState', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxSetWatchdogDOExpirState', 'lines', 2);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWatchdogDOExpirState', 'data', 3);
                [status]= mexNIDAQmx('DAQmxSetWatchdogDOExpirState', taskHandle, lines, data);
        end

        function [status] = DAQmxResetWatchdogDOExpirState(taskHandle, lines)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWatchdogDOExpirState', 'taskHandle', 1);
            validateattributes(lines, {'char'}, {'vector'}, 'DAQmxResetWatchdogDOExpirState', 'lines', 2);
                [status]= mexNIDAQmx('DAQmxResetWatchdogDOExpirState', taskHandle, lines);
        end

        function [status, data] = DAQmxGetWatchdogHasExpired(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWatchdogHasExpired', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWatchdogHasExpired', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWatchdogHasExpired', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteRelativeTo(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteRelativeTo', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWriteRelativeTo', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteRelativeTo', taskHandle, data);
        end

        function [status] = DAQmxSetWriteRelativeTo(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteRelativeTo', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWriteRelativeTo', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteRelativeTo', taskHandle, data);
        end

        function [status] = DAQmxResetWriteRelativeTo(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteRelativeTo', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteRelativeTo', taskHandle);
        end

        function [status, data] = DAQmxGetWriteOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOffset', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWriteOffset', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOffset', taskHandle, data);
        end

        function [status] = DAQmxSetWriteOffset(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteOffset', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWriteOffset', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteOffset', taskHandle, data);
        end

        function [status] = DAQmxResetWriteOffset(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteOffset', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteOffset', taskHandle);
        end

        function [status, data] = DAQmxGetWriteRegenMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteRegenMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWriteRegenMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteRegenMode', taskHandle, data);
        end

        function [status] = DAQmxSetWriteRegenMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteRegenMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWriteRegenMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteRegenMode', taskHandle, data);
        end

        function [status] = DAQmxResetWriteRegenMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteRegenMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteRegenMode', taskHandle);
        end

        function [status, data] = DAQmxGetWriteCurrWritePos(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteCurrWritePos', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'vector'}, 'DAQmxGetWriteCurrWritePos', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteCurrWritePos', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteOvercurrentChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOvercurrentChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteOvercurrentChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOvercurrentChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteOvercurrentChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOvercurrentChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetWriteOvercurrentChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetWriteOvercurrentChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOvercurrentChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetWriteOvertemperatureChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOvertemperatureChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteOvertemperatureChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOvertemperatureChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteOpenCurrentLoopChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOpenCurrentLoopChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteOpenCurrentLoopChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOpenCurrentLoopChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteOpenCurrentLoopChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteOpenCurrentLoopChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetWriteOpenCurrentLoopChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetWriteOpenCurrentLoopChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetWriteOpenCurrentLoopChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetWritePowerSupplyFaultChansExist(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWritePowerSupplyFaultChansExist', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWritePowerSupplyFaultChansExist', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWritePowerSupplyFaultChansExist', taskHandle, data);
        end

        function [status, data] = DAQmxGetWritePowerSupplyFaultChans(taskHandle, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWritePowerSupplyFaultChans', 'taskHandle', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetWritePowerSupplyFaultChans', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetWritePowerSupplyFaultChans', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetWritePowerSupplyFaultChans', taskHandle, data, bufferSize);
        end

        function [status, data] = DAQmxGetWriteSpaceAvail(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteSpaceAvail', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteSpaceAvail', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteSpaceAvail', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteTotalSampPerChanGenerated(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteTotalSampPerChanGenerated', 'taskHandle', 1);
            validateattributes(data, {'uint64'}, {'vector'}, 'DAQmxGetWriteTotalSampPerChanGenerated', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteTotalSampPerChanGenerated', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteRawDataWidth(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteRawDataWidth', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteRawDataWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteRawDataWidth', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteNumChans(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteNumChans', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteNumChans', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteNumChans', taskHandle, data);
        end

        function [status, data] = DAQmxGetWriteWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetWriteWaitMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteWaitMode', taskHandle, data);
        end

        function [status] = DAQmxSetWriteWaitMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteWaitMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetWriteWaitMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteWaitMode', taskHandle, data);
        end

        function [status] = DAQmxResetWriteWaitMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteWaitMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteWaitMode', taskHandle);
        end

        function [status, data] = DAQmxGetWriteSleepTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteSleepTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetWriteSleepTime', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteSleepTime', taskHandle, data);
        end

        function [status] = DAQmxSetWriteSleepTime(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteSleepTime', 'taskHandle', 1);
            validateattributes(data, {'double'}, {'scalar'}, 'DAQmxSetWriteSleepTime', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteSleepTime', taskHandle, data);
        end

        function [status] = DAQmxResetWriteSleepTime(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteSleepTime', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteSleepTime', taskHandle);
        end

        function [status, data] = DAQmxGetWriteNextWriteIsLast(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteNextWriteIsLast', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteNextWriteIsLast', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteNextWriteIsLast', taskHandle, data);
        end

        function [status] = DAQmxSetWriteNextWriteIsLast(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetWriteNextWriteIsLast', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetWriteNextWriteIsLast', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetWriteNextWriteIsLast', taskHandle, data);
        end

        function [status] = DAQmxResetWriteNextWriteIsLast(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetWriteNextWriteIsLast', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetWriteNextWriteIsLast', taskHandle);
        end

        function [status, data] = DAQmxGetWriteDigitalLinesBytesPerChan(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetWriteDigitalLinesBytesPerChan', 'taskHandle', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetWriteDigitalLinesBytesPerChan', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetWriteDigitalLinesBytesPerChan', taskHandle, data);
        end

        function [status, data] = DAQmxGetPhysicalChanAITermCfgs(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAITermCfgs', 'physicalChannel', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetPhysicalChanAITermCfgs', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAITermCfgs', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanAOTermCfgs(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAOTermCfgs', 'physicalChannel', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetPhysicalChanAOTermCfgs', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAOTermCfgs', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanAOManualControlEnable(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlEnable', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlEnable', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAOManualControlEnable', physicalChannel, data);
        end

        function [status] = DAQmxSetPhysicalChanAOManualControlEnable(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxSetPhysicalChanAOManualControlEnable', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'scalar'}, 'DAQmxSetPhysicalChanAOManualControlEnable', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetPhysicalChanAOManualControlEnable', physicalChannel, data);
        end

        function [status] = DAQmxResetPhysicalChanAOManualControlEnable(physicalChannel)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxResetPhysicalChanAOManualControlEnable', 'physicalChannel', 1);
                [status]= mexNIDAQmx('DAQmxResetPhysicalChanAOManualControlEnable', physicalChannel);
        end

        function [status, data] = DAQmxGetPhysicalChanAOManualControlShortDetected(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlShortDetected', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlShortDetected', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAOManualControlShortDetected', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanAOManualControlAmplitude(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlAmplitude', 'physicalChannel', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlAmplitude', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAOManualControlAmplitude', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanAOManualControlFreq(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlFreq', 'physicalChannel', 1);
            validateattributes(data, {'double'}, {'vector'}, 'DAQmxGetPhysicalChanAOManualControlFreq', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanAOManualControlFreq', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanDIPortWidth(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanDIPortWidth', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanDIPortWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanDIPortWidth', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanDISampClkSupported(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanDISampClkSupported', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanDISampClkSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanDISampClkSupported', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanDIChangeDetectSupported(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanDIChangeDetectSupported', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanDIChangeDetectSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanDIChangeDetectSupported', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanDOPortWidth(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanDOPortWidth', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanDOPortWidth', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanDOPortWidth', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanDOSampClkSupported(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanDOSampClkSupported', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanDOSampClkSupported', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanDOSampClkSupported', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSMfgID(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSMfgID', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSMfgID', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSMfgID', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSModelNum(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSModelNum', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSModelNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSModelNum', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSSerialNum(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSSerialNum', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSSerialNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSSerialNum', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSVersionNum(physicalChannel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSVersionNum', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSVersionNum', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSVersionNum', physicalChannel, data);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSVersionLetter(physicalChannel, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSVersionLetter', 'physicalChannel', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSVersionLetter', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPhysicalChanTEDSVersionLetter', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSVersionLetter', physicalChannel, data, bufferSize);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSBitStream(physicalChannel, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSBitStream', 'physicalChannel', 1);
            validateattributes(data, {'uint8'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSBitStream', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetPhysicalChanTEDSBitStream', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSBitStream', physicalChannel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetPhysicalChanTEDSTemplateIDs(physicalChannel, data, arraySizeInElements)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(physicalChannel, {'char'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSTemplateIDs', 'physicalChannel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPhysicalChanTEDSTemplateIDs', 'data', 2);
            validateattributes(arraySizeInElements, {'uint32'}, {'scalar'}, 'DAQmxGetPhysicalChanTEDSTemplateIDs', 'arraySizeInElements', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPhysicalChanTEDSTemplateIDs', physicalChannel, data, arraySizeInElements);
        end

        function [status, data] = DAQmxGetPersistedTaskAuthor(taskName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxGetPersistedTaskAuthor', 'taskName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPersistedTaskAuthor', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPersistedTaskAuthor', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedTaskAuthor', taskName, data, bufferSize);
        end

        function [status, data] = DAQmxGetPersistedTaskAllowInteractiveEditing(taskName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxGetPersistedTaskAllowInteractiveEditing', 'taskName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedTaskAllowInteractiveEditing', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedTaskAllowInteractiveEditing', taskName, data);
        end

        function [status, data] = DAQmxGetPersistedTaskAllowInteractiveDeletion(taskName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskName, {'char'}, {'vector'}, 'DAQmxGetPersistedTaskAllowInteractiveDeletion', 'taskName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedTaskAllowInteractiveDeletion', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedTaskAllowInteractiveDeletion', taskName, data);
        end

        function [status, data] = DAQmxGetPersistedChanAuthor(channel, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetPersistedChanAuthor', 'channel', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPersistedChanAuthor', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPersistedChanAuthor', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedChanAuthor', channel, data, bufferSize);
        end

        function [status, data] = DAQmxGetPersistedChanAllowInteractiveEditing(channel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetPersistedChanAllowInteractiveEditing', 'channel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedChanAllowInteractiveEditing', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedChanAllowInteractiveEditing', channel, data);
        end

        function [status, data] = DAQmxGetPersistedChanAllowInteractiveDeletion(channel, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(channel, {'char'}, {'vector'}, 'DAQmxGetPersistedChanAllowInteractiveDeletion', 'channel', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedChanAllowInteractiveDeletion', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedChanAllowInteractiveDeletion', channel, data);
        end

        function [status, data] = DAQmxGetPersistedScaleAuthor(scaleName, data, bufferSize)
            error(nargchk(3, 3, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetPersistedScaleAuthor', 'scaleName', 1);
            validateattributes(data, {'char'}, {'vector'}, 'DAQmxGetPersistedScaleAuthor', 'data', 2);
            validateattributes(bufferSize, {'uint32'}, {'scalar'}, 'DAQmxGetPersistedScaleAuthor', 'bufferSize', 3);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedScaleAuthor', scaleName, data, bufferSize);
        end

        function [status, data] = DAQmxGetPersistedScaleAllowInteractiveEditing(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetPersistedScaleAllowInteractiveEditing', 'scaleName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedScaleAllowInteractiveEditing', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedScaleAllowInteractiveEditing', scaleName, data);
        end

        function [status, data] = DAQmxGetPersistedScaleAllowInteractiveDeletion(scaleName, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(scaleName, {'char'}, {'vector'}, 'DAQmxGetPersistedScaleAllowInteractiveDeletion', 'scaleName', 1);
            validateattributes(data, {'uint32'}, {'vector'}, 'DAQmxGetPersistedScaleAllowInteractiveDeletion', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetPersistedScaleAllowInteractiveDeletion', scaleName, data);
        end

        function [status, data] = DAQmxGetSampClkTimingResponseMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(2, 2, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxGetSampClkTimingResponseMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'vector'}, 'DAQmxGetSampClkTimingResponseMode', 'data', 2);
                [status, data]= mexNIDAQmx('DAQmxGetSampClkTimingResponseMode', taskHandle, data);
        end

        function [status] = DAQmxSetSampClkTimingResponseMode(taskHandle, data)
            error(nargchk(2, 2, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxSetSampClkTimingResponseMode', 'taskHandle', 1);
            validateattributes(data, {'int32'}, {'scalar'}, 'DAQmxSetSampClkTimingResponseMode', 'data', 2);
                [status]= mexNIDAQmx('DAQmxSetSampClkTimingResponseMode', taskHandle, data);
        end

        function [status] = DAQmxResetSampClkTimingResponseMode(taskHandle)
            error(nargchk(1, 1, nargin, 'struct'));
            error(nargoutchk(1, 1, nargout, 'struct'));
            validateattributes(taskHandle, {'uint64'}, {'scalar'}, 'DAQmxResetSampClkTimingResponseMode', 'taskHandle', 1);
                [status]= mexNIDAQmx('DAQmxResetSampClkTimingResponseMode', taskHandle);
        end

    end
end
