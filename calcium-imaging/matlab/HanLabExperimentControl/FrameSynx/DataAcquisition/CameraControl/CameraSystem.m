classdef CameraSystem < SubSystem
  % ------------------------------------------------------------------------------
  % CameraSystem
  % FrameSynx toolbox
  % 2/8/2010
  % Mark Bucklin
  % ------------------------------------------------------------------------------
  %
  % The CameraSystem class subclasses the SubSystem class, which lends
  % methods for synchronization and data-management. It serves as an
  % interface to a camera object (object of any class derived from CAMERA),
  % and also to synchronized illumination objects, and the data-files
  % generated by the image acquisition. In other words, it controls the
  % camera in uniform way, and stores data from the camera (images in this
  % case) in the same way one would store data using, say, an
  % 'EyetrackerSystem' class. Refer to SubSystem.m for more documentation
  %
  % EXAMPLE:
  %  Create a CameraSystem, start it, save all images for 10 minutes
  %
  % >> camsys = CameraSystem;
  % >> camsys.start()
  % >> camsys.trigger();
  % >> tic
  % >> while toc<600, pause(5), camsys.saveDatafile()
  %
  %
  % CameraSystem Properties:
  %   experimentSyncObj - usually a BehaviorSystem object
  %   trialSyncObj - usually a BehaviorSystem object
  %   frameSyncObj - usually the cameraObj
  %   cameraObj - a DalsaCamera or WebCamera
  %   illuminationObj - IlluminationControlInterface
  %   cameraClass - string: 'DalsaCamera'
  %   frameSyncMode - 'auto' or 'external'
  %   externalFrameSyncPeriod - for reduced frame rate
  %
  %
  %
  % SubSystem Methods:
  %   start - gets everything ready for acquisition
  %   trigger - triggers the camera to begin acquiring
  %   stop - stops acquisition
  %   delete - deletes the object
  %
  % See also SUBSYSTEM, BEHAVIORSYSTEM, DATAFILE, SYSTEMSYNCHRONIZER,
  % DATAACQUISITION, FRAMESYNX, CAMERA, MATLABCOMPATIBLECAMERA, VIDEOFILE,
  % DALSACAMERA, WEBCAMERA
  %
  
  
  
  
  
  
  properties
	 experimentSyncObj %Must broadcast 'ExperimentStart' and 'ExperimentStop' events
	 trialSyncObj %Must broadcast the 'NewTrial' event
	 frameSyncObj %Must broadcast the 'FrameAcquired' event
  end
  properties
	 cameraObj %Used to drive framesyncing if frameSyncMode is 'auto', otherwise its the frameSyncObj that generates the sync
	 illuminationObj %also synchronized with the camera
	 cameraClass %string, defaults to 'DalsaCamera'
	 frameSyncMode % 'auto' or 'external'
	 externalFrameSyncPeriod % defaults to 4 for a WebCamera synchronized with the DalsaCamera doing rrgg
	 % 		currentDataFile
	 % 		sessionPath
	 % 		systemName
	 % 		savedDataFiles
  end
  properties (Hidden)
	 % 				frameSyncListener
	 % 				experimentStateListener
	 % 				trialStateListener
	 % 				framesAcquired
	 % 				nDataFiles
	 % 				experimentRunning
	 % 				default
  end
  properties (Hidden) % Previous Version Compatibility
	 behaviorSystemObj
  end
  
  
  
  
  
  events
	 FrameAcquired
  end
  
  
  
  
  
  methods % SETUP
	 function obj = CameraSystem(varargin)
		if nargin > 1
		  for k = 1:2:length(varargin)
			 obj.(varargin{k}) = varargin{k+1};
		  end
		end
		obj.checkProperties
		obj.createSystemComponents
	 end
	 function defineDefaults(obj)
		persistent camnum
		if isempty(camnum)
		  camnum = 1;
		else
		  camnum = camnum+1;
		end
		obj.defineDefaults@SubSystem;
		obj.default.systemName =  ['CameraSystem_',num2str(camnum)];
		obj.default.frameSyncMode = 'auto';
		obj.default.externalFrameSyncPeriod = 1;
	 end
	 function checkProperties(obj)
		obj.defineDefaults;
		obj.framesAcquired = 0;
		obj.nDataFiles = 0;
		if ~isempty(obj.cameraObj)
		  obj.cameraClass = class(obj.cameraObj);
		end
		obj.savedDataFiles = VideoFile.empty(1,0);
		obj.currentDataFileSet = VideoFile.empty(1,0);
		if ~isempty(obj.experimentSyncObj)
		  if ~isempty(obj.experimentStateListener)
			 obj.experimentStateListener.Enabled = false;
		  end
		  if ~isempty(obj.trialStateListener)
			 obj.trialStateListener.Enabled = false;
		  end
		  obj.trialStateListener = addlistener(obj.trialSyncObj,...
			 'NewTrial',@(src,evnt)trialStateChangeFcn(obj,src,evnt));
		  obj.trialStateListener.Enabled = false;
		  obj.experimentStateListener = addlistener(obj.experimentSyncObj,...
			 'ExperimentStart',@(src,evnt)experimentStateChangeFcn(obj,src,evnt));
		  addlistener(obj.experimentSyncObj,...
			 'ExperimentStop',@(src,evnt)experimentStateChangeFcn(obj,src,evnt));
		  obj.experimentStateListener.Enabled = true;
		end
		obj.checkProperties@SubSystem;
	 end
	 function createSystemComponents(obj)
		persistent camnum
		if isempty(camnum)
		  camnum = 1;
		else
		  camnum = camnum+1;
		end
		% Start Camera
		if isempty(obj.cameraObj)
		  if isempty(obj.cameraClass)
			 camoptions = Camera.allConstructors;
			 if isempty(camoptions)
				error('No Camera Options')
			 end
			 if numel(camoptions)==1
				obj.cameraClass = camoptions{1};
			 else
				obj.cameraClass = questdlg('Choose a Camera type:','Camera Selection',...
				  camoptions{:},camoptions{1});
			 end
		  end
		  obj.cameraObj = eval(obj.cameraClass); % 'DalsaCamera' by default
		end
		setup(obj.cameraObj);
		start(obj.cameraObj)
		
		obj.systemName = [obj.cameraObj.name,camnum];
		obj.systemName = obj.systemName(isstrprop(obj.systemName,'graphic'));
		% Start Illumination
		% 		if ~any(strcmpi(class(obj.cameraObj),{'webcamera','dcamcamera'}))
		% 		  try
		% 			 if isempty(obj.illuminationObj) || ~isvalid(obj.illuminationObj)
		% 				obj.illuminationObj = IlluminationControl;
		% 			 end
		% 			 set(obj.illuminationObj,'cameraObj',obj.cameraObj);
		% 			 setup(obj.illuminationObj);
		% 			 start(obj.illuminationObj);
		% 		  catch me
		% 			 fprintf('Illumination-Control object creation has failed: \n%s\n',...
		% 				me.message);
		% 		  end
		% 		end
		% Define Listener
		if strcmpi(obj.frameSyncMode,'auto')
		  obj.frameSyncListener = addlistener(obj.cameraObj,...
			 'FrameAcquired',@(src,evnt)frameAcquiredFcn(obj,src,evnt));
		end
		obj.cameraObj.frameSyncMode = obj.frameSyncMode;
	 end
  end
  methods % CONTROL
	 function start(obj)
		obj.updateExperimentName();
		obj.updateExperimentPath();
		fprintf('%s: Preparing %s for Video-Acquisition\n',...
		  obj.systemName,obj.cameraObj.name);
		if ~isrunning(obj.cameraObj)
		  start(obj.cameraObj);
		end
		if ~isempty(obj.experimentStateListener)
		  obj.experimentStateListener.Enabled = true;
		end
		if ~isempty(obj.trialStateListener)
		  obj.trialStateListener.Enabled = true;
		end
		if isempty(obj.frameSyncObj)
		  obj.frameSyncObj = obj.cameraObj; % default auto sync
		end
		obj.ready = true;
	 end
	 function trigger(obj)
		if ~isready(obj)
		  obj.start();
		end
		obj.updateExperimentName();
		obj.cameraObj.imageDataDirectory = obj.currentDataSetPath;
		% added 7/15/2014
		if ~isempty(obj.frameSyncListener)
		  obj.frameSyncListener.Enabled = true;
		end
		
		if ~islogging(obj.cameraObj)
		  trigger(obj.cameraObj);
		  fprintf('%s: Triggering %s Video-Acquisition\n',...
			 obj.systemName,obj.cameraObj.name);
		end
		if ~isempty(obj.trialStateListener)
		  obj.trialStateListener.Enabled = true;
		end
		
		%       if ~isempty(obj.currentDataFileSet)
		%         obj.currentDataFileSet = VideoFile.empty(1,0);
		%         obj.nDataFiles = 0;
		%       end
	 end
	 function stop(obj)
		fprintf('Stopping %s Video-Acquisition\n',obj.cameraObj.name);
		stop(obj.cameraObj);
		if ~isempty(obj.currentDataFile) ...
			 && isopen(obj.currentDataFile) ...
			 && ~issaved(obj.currentDataFile)
		  obj.saveDataFile;
		end
		if ~isempty(obj.trialStateListener)
		  obj.trialStateListener.Enabled = false;
		end
		if ~isempty(obj.currentDataFileSet)
		  obj.saveDataSet();
		  obj.clearDataSet();
		end
		obj.currentDataFile = VideoFile.empty(1,0);
		lastwarn('')
		% 						start(obj.cameraObj)
	 end
	 function syncExternal(obj)
		persistent data	syncframe
		try
		  if isempty(obj.currentDataFile)
			 % called on first frame
			 obj.currentDataFile = VideoFile('rootPath',obj.currentDataSetPath);
		  end
		  if isempty(syncframe)
			 syncframe = 1;
		  else
			 syncframe = syncframe + 1;
		  end
		  if syncframe==obj.externalFrameSyncPeriod
			 data = getSyncFrame(obj.cameraObj);
			 obj.framesAcquired = obj.framesAcquired + 1;
			 % Get Info Structure
			 info.FrameNumber = obj.framesAcquired;
			 info.FrameTime = data.time;
			 info.AbsTime = datenum(data.meta.AbsTime);
			 if ~isempty(obj.illuminationObj)
				info.Channel = getData(obj.illuminationObj,1);
			 end
			 % may need to check frame number?
			 data = data.vid;
			 if isclosed(obj.currentDataFile)
				if ~issaved(obj.currentDataFile)
				  obj.saveDataFile;
				  % if file closes somehow, it will save on the next frame and open a new file
				  % e.g. if someone access data while it's open, it will close... ?
				end
				obj.currentDataFile = VideoFile('rootPath',obj.currentDataSetPath);
			 end
			 addFrame2File(obj.currentDataFile,data,info);
			 syncframe = 0;
		  end
		catch me
		  warning(me.message)
		  disp(me.stack(1))
		end
	 end
  end
  methods % EVENT RESPONSE
	 function frameAcquiredFcn(obj,src,evnt)
		try
		  if strcmpi(obj.frameSyncMode,'external') ...
				|| (src ~= obj.cameraObj)
			 obj.syncExternal();
			 return
		  end
		  notify(obj,'FrameAcquired');
		  if isempty(obj.currentDataFile)
			 % called on first frame
			 obj.currentDataFile = VideoFile('rootPath',obj.currentDataSetPath);
		  end
		  data = getSomeData(src,1);
		  obj.framesAcquired = obj.framesAcquired + 1;
		  % Get Info Structure
		  info.FrameNumber = data.meta.FrameNumber;
		  info.FrameTime = data.time;
		  info.AbsTime = datenum(data.meta.AbsTime);
		  if ~isempty(obj.illuminationObj)
			 info.Channel = getData(obj.illuminationObj,1);
		  end
		  % may need to check frame number?
		  data = data.vid;
		  if isclosed(obj.currentDataFile)
			 if ~issaved(obj.currentDataFile)
				obj.saveDataFile;
				% if file closes somehow, it will save on the next frame and open a new file
				% e.g. if someone access data while it's open, it will close... ?
			 end %
			 obj.currentDataFile = VideoFile('rootPath',obj.currentDataSetPath);
		  end
		  if ~isempty(obj.frameDataCallbackFcn)
			 try
				switch class(obj.frameDataCallbackFcn)
				  case 'char'
					 eval(obj.frameDataCallbackFcn)
				  case 'function_handle'
					 data = feval(obj.frameDataCallbackFcn,data);
				  case 'cell'
					 switch class(obj.frameDataCallbackFcn{1})
						case 'function_handle'
						  data = feval(obj.frameDataCallbackFcn{1},data,obj.frameDataCallbackFcn{2:end});
						case 'char'
						  for n = 1:numel(obj.frameDataCallbackFcn)
							 eval(obj.frameDataCallbackFcn{n});
						  end
					 end
				end
			 catch
				fprintf('frameDataCallbackFcn Error\n');
			 end
		  end
		  addFrame2File(obj.currentDataFile,data,info);
		catch me
		  [~,lastid] = lastwarn;
		  if ~strcmpi(lastid,'CameraSystem:frameAcquiredFcn:FrameErrorCaught')
			 warning('CameraSystem:frameAcquiredFcn:FrameErrorCaught',...
				'An error occured while executing the frameAcquiredFcn: \n%s\n',...
				me.message)
			 disp(me.stack(1))
		  end
		  if isempty(info)
			 info = struct.empty();
		  end
		  addFrame2File(obj.currentDataFile,data,info);
		end
	 end
	 function experimentStateChangeFcn(obj,src,evnt)
		switch evnt.EventName
		  case 'ExperimentStart'
			 obj.updateExperimentName();
			 obj.trigger();
		  case 'ExperimentStop'
			 obj.stop();
		end
	 end
	 function trialStateChangeFcn(obj,src,evnt)
		% 						fprintf('Frames in Imaq Memory: %i\n',get(obj.cameraObj.videoInputObj,'FramesAvailable'))
		if ~islogging(obj.cameraObj)
		  obj.trigger(); % trigger at start of first trial rather than experiment-start
		end
		obj.saveDataFile();
	 end
  end
  methods % SET
	 function set.experimentSyncObj(obj,bhv)
		if ~isempty(obj.experimentStateListener)
		  obj.experimentStateListener.Enabled = false;
		end
		obj.experimentSyncObj = bhv;
		obj.experimentStateListener = addlistener(obj.experimentSyncObj,...
		  'ExperimentStart',@(src,evnt)experimentStateChangeFcn(obj,src,evnt));
		addlistener(obj.experimentSyncObj,...
		  'ExperimentStop',@(src,evnt)experimentStateChangeFcn(obj,src,evnt));
		obj.experimentStateListener.Enabled = true;
	 end
	 function set.trialSyncObj(obj,bhv)
		obj.trialSyncObj = bhv;
		if ~isempty(obj.trialStateListener)
		  obj.trialStateListener.Enabled = false;
		end
		obj.trialStateListener = addlistener(obj.trialSyncObj,...
		  'NewTrial',@(src,evnt)trialStateChangeFcn(obj,src,evnt));
		obj.trialStateListener.Enabled = false;
	 end
	 function set.frameSyncObj(obj,cam)
		if cam == obj.cameraObj % (free running camera)
		  obj.frameSyncMode = 'auto';
		  obj.frameSyncObj = obj.cameraObj;
		else
		  obj.frameSyncMode = 'external';
		end
		if any(strcmpi(events(cam),'FrameAcquired'))
		  obj.frameSyncObj = cam;
		  if ~isempty(obj.frameSyncListener)
			 obj.frameSyncListener.Enabled = false;
		  end
		  obj.frameSyncListener = addlistener(cam,...
			 'FrameAcquired',@(src,evnt)frameAcquiredFcn(obj,src,evnt));
		else
		  warning('CameraSystem:set_frameSyncObj:MissingFrameAcquiredEvent',...
			 'The assigned frameSync object should have a FrameAcquired event');
		end
	 end
	 function set.frameSyncMode(obj,fsmode)
		% useless other than to print an update?!?
		switch lower(fsmode)
		  case 'auto'
			 obj.frameSyncMode = 'auto';
		  case 'external'
			 obj.frameSyncMode = 'external';
		  otherwise
			 warning('CameraSystem:set_frameSyncMode:Invalid','invalid setting');
		end
		fprintf('%s: frameSyncMode set to %s\n',obj.systemName,obj.frameSyncMode);
		if ~isempty(obj.cameraObj) && isa(obj.cameraObj,'Camera')
		  obj.cameraObj.frameSyncMode = obj.frameSyncMode;
		end
	 end
  end
  methods % CLEANUP
	 function delete(obj)
		delete(obj.cameraObj)
		obj.delete@SubSystem;
		delete(obj.illuminationObj)
	 end
  end
  methods % BACKWARDS COMPATIBILTY
	 function set.behaviorSystemObj(obj,bhv)
		fprintf('Setting experimentSyncObj and trialSyncObj using behaviorSystemObj (for backwards compatibility\n')
		obj.experimentSyncObj = bhv;
		obj.trialSyncObj = bhv;
	 end
	 function bhv = get.behaviorSystemObj(obj)
		bhv = obj.experimentSyncObj;
	 end
  end
  
  
  
  
  
end
















