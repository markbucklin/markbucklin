classdef ExperimentControlGUI < hgsetget
		
		
		
		
		properties
				% Figure and UIControl Handles
				mainFig % graphics handles structure
				camControlFig
				dataControlFig
				bhvControlFig
				illumControlFig
				mainControl
				camControl
				dataControl
				bhvControl
				illumControl
				mainAx
				mainMenu
				
				% DataVisual Objects
				traceViewerObj
				frameViewerObj
				
				% Image Acquisition Objects
				cameraObj
				cameraSystem
				stimulusPresentationObj
				behaviorSystem
				dataGeneratorObj
				illuminationControlObj
				
				% GUI Working Variable Set
				default
				pos % structure of position info
				camConnected
				behavControlMsgLog = [];
				camStatus % Ready,Recording,Stopped
				exptStatus % Stopped, Waiting, STR6
				exptRunning
				guiStimIndex
				previewOn = true;
				debugMode = false;
				
				% Shared Variables to Update
				saveRoot
				savePath
				behavControlComputerName
				channelSequence
		end
		properties (Dependent)
				% Camera Settings
				resolution
				frameRate
				gain
				offset
				configFileDirectory
				serialPort
				
				% Data/Experiment Settings
				animalName
				nFramesPreTrigger
				nFramesPostTrigger
				trigger
				stimOnMinimum
				trialLengthMinimum
				computeTrigAvgOnline
				componentControlFigs
				nStimPanels
				
				% Video Display Settings
				vidColorMap
				vidDisplayMode
		end %TODO: triggerSetting
		
		
		
		
		
		events
				FileNameChange
				SwitchToExperimentMode
				StopAcquisition
		end
		
		
			
		
		
		methods % Construct/Desctructor/Close
				function obj = ExperimentControlGUI(varargin)
						if nargin > 1
								for k = 1:2:length(varargin)
										obj.(varargin{k}) = varargin{k+1};
								end
                        end
                        imaqreset
                        instrreset
						defineDefaults(obj)
						definePositionStucture(obj)
						initializeMainFigure(obj)
						buildCamControlFigure(obj)
						buildDataControlFigure(obj)
						buildIllumControlFigure(obj)
						buildBhvControlFigure(obj)
						% 						obj.dataGeneratorObj = GuiDataGenerator('guiObj',obj);
						buildVisualObjects(obj)
                        if isvalid(obj.behaviorSystem)
                            addlistener(obj.behaviorSystem,'NewStimulus',@(src,evnt)newStimFcn(obj,src,evnt));
                            addlistener(obj.behaviorSystem,'NewTrial',@(src,evnt)newTrialUpdateFcn(obj,src,evnt));
                        end
						buildMainFigure(obj)
						setFigureAccess(obj)
						connectSystems(obj)
						obj.exptRunning = false;
				end
				function delete(obj)
						try
								% 								delete(obj.frameViewerObj)
								% 								delete(obj.traceViewerObj)
								% 								delete(obj.dataGeneratorObj)
						catch me
								warning(me.message)
								delete(gcf)
						end
				end
				function closeFigFcn(obj,src,evnt)
						try
								selection = questdlg('Close Image Acquisition Figure?',...
										'Close Request',...
										'Yes','No','Yes');%TODO: change to uigetpref preference
								switch selection,
										case 'Yes',
												if obj.camConnected
														disconnectCam(obj);
												end
												if get(obj.bhvControl.listenForBehavButt,'value') %behavCtrl is connected
														delete(obj.stimulusPresentationObj)
														obj.stimulusPresentationObj = [];
												end
												% 									if ~isempty(ishandle(obj.mainFig))
												% 										  close(obj.mainFig)
												% 									end
												delete(gcf)
												if ishandle(obj.camControlFig)
														delete(obj.camControlFig)
												end
												if ishandle(obj.dataControlFig)
														delete(obj.dataControlFig)
												end
												if ishandle(obj.bhvControlFig)
														delete(obj.bhvControlFig)
												end
												if ishandle(obj.illumControlFig)
														delete(obj.illumControlFig)
												end
												delete(obj)
												if ~isempty(imaqfind)
														flushdata(imaqfind)
														delete(imaqfind)
												end
												if ~isempty(instrfind)
														delete(instrfind)
												end
												clear obj
										case 'No'
												return
								end
						catch me
								warning(me.message)
								delete(gcf)
% 								errordlg('Closing error occured, figure will now close')
						end
				end
		end
		methods % Building Functions
				function defineDefaults(obj)
						obj.default = ImageAcquisitionGUIDefault;		
						if isdir(obj.default.saveRoot)
								obj.saveRoot = obj.default.saveRoot;
						else
								obj.saveRoot = uigetdir(pwd,'Enter a valid root path for image data');
						end
				end
				function definePositionStucture(obj)
						sz = get(0,'MonitorPositions');
						if size(sz,1) > 1
								obj.pos.dualmonitor = true;
								obj.pos.rightmonwidth = sz(1,3)-sz(1,1);
								obj.pos.rightmonheight = sz(1,4);
								obj.pos.rightmonpos = sz(1,1:2);
								obj.pos.leftmonwidth = sz(2,3);
								obj.pos.leftmonheight = sz(2,4);
						else
								obj.pos.dualmonitor = false;
								obj.pos.monwidth = sz(1,3);
								obj.pos.monheight = sz(1,4);
						end
						obj.pos.sliderlength = 190;
						obj.pos.sliderwidth = 25;
						obj.pos.standard = [10 10];
						obj.pos.bigbutton = [90 30];
						obj.pos.medbutton = [60 20];
						obj.pos.smallbutton = [40 15];
						obj.pos.shorttext = [40 20];
						obj.pos.medtext = [60 20];
						obj.pos.longtext = [90 20];
						obj.pos.xlongtext = [120 20];
						obj.pos.panwidth1 = 110;
						
						obj.pos.campanel = [40 100 420 460];
						obj.pos.datapanel = [500 100 240 560];
						obj.pos.bhvpanel = [750 100 250 600];
						obj.pos.illumpanel = [40 590 260 100];
						if obj.pos.dualmonitor
								obj.pos.mainfig = [40 60 1100 900];
						else
								obj.pos.mainfig = [40 60 1100 900];
						end
				end
				function initializeMainFigure(obj)
						obj.mainFig = figure('units','pixels',...
								'position',obj.pos.mainfig,...
								'menubar','none',...
								'name','Das Lab Image Acquisition',...
								'numbertitle','off',...
								'tag','mainfig',...
								'closerequestfcn',@(src,evnt)closeFigFcn(obj,src,evnt),...
								'units','pixels',...
								'numbertitle','off');%,...
% 								'resize','off');
						obj.mainAx = axes('parent',obj.mainFig);
						obj.mainControl.previewIm = image('parent',obj.mainAx);
						axis off image ij
				end
				function buildCamControlFigure(obj)
						%% Initialize Figure
						obj.camControlFig = figure;
						set(obj.camControlFig,...
								'units','pixels',...
								'tag','camconfigpanel',...
								'menubar','none',...
								'name','Camera Configuration',...
								'numbertitle','off',...
								'resize','off',...
								'position',obj.pos.campanel);
						%% Resolution Control
						obj.camControl.resBg = uibuttongroup(obj.camControlFig,...
								'units','pix',...
								'pos',[10 10 obj.pos.panwidth1 110],...
								'tag','resbuttongroup',...
								'title','Resolution');
						obj.camControl.resradio(1) = uicontrol(obj.camControl.resBg,...
								'style','rad',...
								'unit','pix',...
								'position',[10 70 obj.pos.medtext],...
								'string','1024');
						obj.camControl.resradio(2) = uicontrol(obj.camControl.resBg,...
								'style','rad',...
								'unit','pix',...
								'position',[10 50 obj.pos.medtext],...
								'string','512');
						obj.camControl.resradio(3) = uicontrol(obj.camControl.resBg,...
								'style','rad',...
								'unit','pix',...
								'position',[10 30 obj.pos.medtext],...
								'string','256',...
								'value',1); % Make 256 the Default
						obj.camControl.resradio(4) = uicontrol(obj.camControl.resBg,...
								'style','rad',...
								'unit','pix',...
								'position',[10 10 obj.pos.medtext],...
								'string','128');
						set(obj.camControl.resradio,...
								'callback',@(src,evnt)resolutionControlFcn(obj,src,evnt));
						%% FrameRate Control
						panpos = get(obj.camControl.resBg,'position');
						pany= panpos(4)+15;
						obj.camControl.frPan = uipanel(obj.camControlFig,...
								'units','pixels',...
								'tag','frpanel',...
								'position',[10 pany obj.pos.panwidth1 50],...
								'title','Frame Rate');
						obj.camControl.frTxt = uicontrol(obj.camControl.frPan,...
								'style','edit',...
								'tag','fredit',...
								'units','pixels',...
								'position',[10 10 obj.pos.shorttext],...
								'string','30',...
								'callback',@(src,evnt)framerateControlFcn(obj,src,evnt));
						%% Gain Control
						obj.camControl.gainPan =  uipanel(obj.camControlFig,...
								'units','pixels',...
								'tag','gainpanel',...
								'position',[10 180 50 260 ],...
								'title','Gain');
						obj.camControl.gainTxt = uicontrol(obj.camControl.gainPan,...
								'units','pixels',...
								'style','edit',...
								'tag','gainedit',...
								'position',[5 5 30 20],...
								'string','1');
						obj.camControl.gainSlider = uicontrol(obj.camControl.gainPan,...
								'units','pixels',...
								'style','slider',...
								'tag','gainslider',...
								'position',[5 30 26 195],...
								'max',obj.default.maxgain,...
								'min',obj.default.gain,...
								'value',obj.default.gain);
						obj.camControl.gainResetButt = uicontrol(obj.camControl.gainPan,...
								'style','pushbutton',...
								'tag','gainresetbutton',...
								'units','pixels',...
								'position',[3 230 40 15],...
								'string','Reset');
						set([obj.camControl.gainTxt, obj.camControl.gainSlider obj.camControl.gainResetButt],...
								'callback',@(src,evnt)gainControlFcn(obj,src,evnt));
						%% Offset Control
						obj.camControl.offsetPan = uipanel(obj.camControlFig,...
								'units','pixels',...
								'tag','offsetpanel',...
								'position',[70 180 50 260 ],...
								'title','Offset');
						obj.camControl.offsetTxt = uicontrol(obj.camControl.offsetPan,...
								'units','pixels',...
								'style','edit',...
								'tag','offsetedit',...
								'position',[2 5 34 20],...
								'string','0');
						obj.camControl.offsetSlider = uicontrol(obj.camControl.offsetPan,...
								'units','pixels',...
								'style','slider',...
								'tag','offsetslider',...
								'position',[5 30 26 195],...
								'max',obj.default.maxminoffset,...
								'min',-obj.default.maxminoffset,...
								'value',obj.default.offset);
						obj.camControl.offsetResetButt = uicontrol(obj.camControl.offsetPan,...
								'style','pushbutton',...
								'tag','offsetresetbutton',...
								'units','pixels',...
								'position',[3 230 40 15],...
								'string','Reset');
						set([obj.camControl.offsetTxt, obj.camControl.offsetSlider, obj.camControl.offsetResetButt],...
								'callback',@(src,evnt)offsetControlFcn(obj,src,evnt));
						%% Pixel Intensity Histogram Frame
						obj.camControl.intensityHistAx = axes('parent',obj.camControlFig);
						set(obj.camControl.intensityHistAx,...
								'units','pixels',...
								'position',[130 182 280 250],...
								'tag','intensityhist');
						axis off
						%% Configuration File Control
						obj.camControl.configFilePan = uipanel(obj.camControlFig,...
								'units','pixels',...
								'tag','configfilepanel',...
								'position',[127 10 280 55],...
								'title','Configuration File');
						obj.camControl.configFileTxt = uicontrol(obj.camControl.configFilePan,...
								'style','edit',...
								'tag','configfileedit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 10 180 20],...
								'string',obj.default.configFileDir);
						obj.camControl.configFileChgDirButt = uicontrol(obj.camControl.configFilePan,...
								'style','pushbutton',...
								'tag','configfilechangebutt',...
								'units','pixels',...
								'position',[210 10 60 20],...
								'string','Open');
						set([obj.camControl.configFileTxt, obj.camControl.configFileChgDirButt],...
								'callback',@(src,evnt)configFileControlFcn(obj,src,evnt));
						%% Camera Object Control
						obj.camControl.camObjPan = uipanel(obj.camControlFig,...
								'units','pixels',...
								'tag','camobjpanel',...
								'position',[127 75 280 55],...
								'title','Matlab Camera Object');
						obj.camControl.camObjPoplist = uicontrol(obj.camControl.camObjPan,...
								'style','pop',...
								'tag','camobjpoplist',...
								'units','pixels',...
								'position',[10 10 100 20],...
								'string',[obj.default.camObjList',{'other'}],...
								'value',1);
						comOptions = instrhwinfo('serial');
						obj.camControl.camObjComPoplist = uicontrol(obj.camControl.camObjPan,...
								'style','pop',...
								'tag','camobjcompoplist',...
								'units','pixels',...
								'position',[120 10 80 20],...
								'string',comOptions.SerialPorts);
						obj.camControl.camObjLoadButton = uicontrol(obj.camControl.camObjPan,...
								'style','togglebutton',...
								'tag','camobjloadbutton',...
								'units','pixels',...
								'position',[210 10 60 20],...
								'string','Connect');
						set([obj.camControl.camObjPoplist, obj.camControl.camObjLoadButton],...
								'callback',@(src,evnt)camobjControlFcn(obj,src,evnt));
						camlist = get(obj.camControl.camObjPoplist,'string');
						choice = camlist{get(obj.camControl.camObjPoplist,'val')};
						connectCam(obj,choice);
				end
				function buildDataControlFigure(obj)
						%% Initialize Figure
						obj.dataControlFig = figure;
						set(obj.dataControlFig,...
								'units','pixels',...
								'tag','experimentseettingspanel',...
								'menubar','none',...
								'Name','ExperimentConfiguration',...
								'numbertitle','off',...
								'resize','off',...
								'position',obj.pos.datapanel);
						% 						%% Save Directory
						% 						obj.dataControl.savePathPan = uipanel(obj.dataControlFig,...
						% 								'units','pixels',...
						% 								'tag','savefilepanel',...
						% 								'position',[10 10 220 110],...
						% 								'title','Save to Directory');
						% 						obj.dataControl.saveRootChgDirButt = uicontrol(obj.dataControl.savePathPan,...
						% 								'style','pushbutton',...
						% 								'tag','savefilechangebutt',...
						% 								'units','pixels',...
						% 								'position',[10 10 90 20],...
						% 								'string','Change Root');
						% 						obj.dataControl.monkeyPop = uicontrol(obj.dataControl.savePathPan,...
						% 								'style','popup',...
						% 								'tag','monkeypop',...
						% 								'units','pixels',...
						% 								'position',[110 10 100 20],...
						% 								'string',obj.default.monkeyList);
						% 						obj.dataControl.savePathAutoName = uicontrol(obj.dataControl.savePathPan,...
						% 								'style','checkbox',...
						% 								'tag','saveautocheck',...
						% 								'units','pixels',...
						% 								'position',[10 40 120 20],...
						% 								'value',1,...
						% 								'string','Use Default Naming');
						% 						if get(obj.dataControl.savePathAutoName,'value')%is checked
						% % 								obj.savePath = [obj.default.saveRoot,...
						% % 										obj.animalName,'\',...
						% % 										obj.animalName,datestr(date,'_mm_dd_yy'),'\'];
						% 								obj.savePath = fullfile(obj.saveRoot,...
						% 										obj.animalName,...
						% 										[obj.animalName,datestr(date,'_yyyy_mm_dd')]);
						% 						else
						% 								obj.savePath = obj.saveRoot;
						% 						end
						% 						obj.dataControl.savePathTxt = uicontrol(obj.dataControl.savePathPan,...
						% 								'style','edit',...
						% 								'tag','savefileedit',...
						% 								'horizontalalignment','left',...
						% 								'units','pixels',...
						% 								'position',[10 70 200 20],...
						% 								'string',obj.savePath);
						% 						set([obj.dataControl.savePathTxt,...
						% 								obj.dataControl.saveRootChgDirButt,...
						% 								obj.dataControl.monkeyPop,...
						% 								obj.dataControl.savePathAutoName],...
						% 								'callback',@(src,evnt)savePathControlFcn(obj,src,evnt));
						%% Triggered Average Presets
						obj.dataControl.trigAvgPan = uipanel(...
								'parent',obj.dataControlFig,...
								'units','pixels',...
								'tag','trigavgpanel',...
								'title','Triggered Average Settings',...
								'position',[10 130 220 300]);
						obj.dataControl.trigFromButtPan = uibuttongroup(...
								'parent',obj.dataControl.trigAvgPan,...
								'units','pix',...
								'pos',[10 10 200 80],...
								'tag','trigavgbuttongroup',...
								'title','Trigger');
						buttpos = [10 10 85 20];
						obj.dataControl.trigradio(1) = uicontrol(...
								'parent',obj.dataControl.trigFromButtPan,...
								'style','rad',...
								'unit','pix',...
								'position',buttpos + [0 25 0 0],...
								'string','Trial Start');
						obj.dataControl.trigradio(2) = uicontrol(...
								'parent',obj.dataControl.trigFromButtPan,...
								'style','rad',...
								'unit','pix',...
								'position',buttpos + [100 25 0 0],...
								'string','Stimulus On');
						obj.dataControl.trigradio(3) = uicontrol(...
								'parent',obj.dataControl.trigFromButtPan,...
								'style','rad',...
								'unit','pix',...
								'position',buttpos + [0 0 0 0],...
								'string','Stimulus Shift');
						obj.dataControl.trigradio(4) = uicontrol(...
								'parent',obj.dataControl.trigFromButtPan,...
								'style','rad',...
								'unit','pix',...
								'position',buttpos + [100 0 0 0],...
								'string','Stimulus Off');
						set(obj.dataControl.trigradio(2),'value',1)
						
						obj.dataControl.onlineAvgChk = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','checkbox',...
								'tag','onlineaveragecheck',...
								'units','pixels',...
								'position',[10 260 200 20],...
								'value',1,...
								'string','Compute Triggered Average Online',...
								'callback',@(src,evnt)trigAverageControlFcn(obj,src,evnt));
						obj.dataControl.preTriggerEdit = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','edit',...
								'tag','pretriggeredit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 230 40 20],...
								'string','5');
						obj.dataControl.preTriggerTxt = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','text',...
								'tag','pretriggertext',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',get(obj.dataControl.preTriggerEdit,'position')+[42 0 120 0],...
								'string','Pre-Trigger Period');
						obj.dataControl.postTriggerEdit = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','edit',...
								'tag','posttriggeredit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 200 40 20],...
								'string','30');
						obj.dataControl.postTriggerTxt = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','text',...
								'tag','posttriggertext',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',get(obj.dataControl.postTriggerEdit,'position')+[42 0 120 0],...
								'string','Post-Trigger Period');
						obj.dataControl.prepostTriggerUnitPop = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','pop',...
								'tag','trigunitspoplist',...
								'units','pixels',...
								'position',[10 170 100 20],...
								'string',{'frames','seconds','milliseconds'});
						
						obj.dataControl.stimOnMinEdit = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','edit',...
								'tag','stimonminedit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 140 40 20],...
								'string',num2str(obj.default.stimOnMinimum));
						obj.dataControl.stimOnMinTxt = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','text',...
								'tag','stimonmintext',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',get(obj.dataControl.stimOnMinEdit,'position')+[42 0 120 0],...
								'string','Stim On Minimum (sec)');
						obj.dataControl.trialLengthMinEdit = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','edit',...
								'tag','trialonminedit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 110 40 20],...
								'string',num2str(obj.default.trialLengthMinimum));
						obj.dataControl.trialLengthMinTxt = uicontrol(...
								'parent',obj.dataControl.trigAvgPan,...
								'style','text',...
								'tag','trialonmintext',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',get(obj.dataControl.trialLengthMinEdit,'position')+[42 0 120 0],...
								'string','Trial Length Minimum (sec)');
				end
				function buildIllumControlFigure(obj)
						obj.illumControlFig = figure;
						set(obj.illumControlFig,...
								'units','pixels',...
								'tag','illuminationsettingsfigure',...
								'menubar','none',...
								'Name','Illumination Configuration',...
								'numbertitle','off',...
								'resize','off',...
								'position',obj.pos.illumpanel);
						obj.illumControl.illumPan = uipanel(obj.illumControlFig,...
								'units','pixels',...
								'tag','illuminationpanel',...
								'position',[10 10 220 50],...
								'title','Illumination Settings');
						obj.illumControl.illumSequenceEdit = uicontrol(obj.illumControl.illumPan,...
								'style','edit',...
								'tag','illuminationsequenceedit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 10 130 20],...
								'string','red,red,green,green');
						obj.illumControl.illumOnButt= uicontrol(obj.illumControl.illumPan,...
								'style','toggle',...
								'tag','illuminationbutton',...
								'units','pixels',...
								'position',[150 10 60 20],...
								'string','Lights');
						set([obj.illumControl.illumSequenceEdit, obj.illumControl.illumOnButt],...
								'callback',@(src,evnt)illuminationControlFcn(obj,src,evnt));
						connectIllumination(obj);
				end
				function buildBhvControlFigure(obj)
						%% Initialize Figure
						obj.bhvControlFig = figure;
						set(obj.bhvControlFig,...
								'units','pixels',...
								'tag','bhvconfigpanel',...
								'menubar','none',...
								'name','BehavControl Configuration',...
								'numbertitle','off',...
								'resize','off',...
								'position',obj.pos.bhvpanel);
						%% BehavControl Settings
						obj.bhvControl.behavPan = uipanel(...
								'parent',obj.bhvControlFig,...
								'units','pixels',...
								'tag','behavpanel',...
								'position',[10 obj.pos.bhvpanel(4)-70 220 50],...
								'title','BehavControl Settings');
						obj.bhvControl.behavCompnameTxt = uicontrol(obj.bhvControl.behavPan,...
								'style','edit',...
								'tag','behavcompedit',...
								'units','pixels',...
								'horizontalalignment','left',...
								'position',[10 10 130 20],...
								'string',obj.default.behavControlComputerName);
						obj.behavControlComputerName = obj.default.behavControlComputerName;
						obj.bhvControl.listenForBehavButt = uicontrol(obj.bhvControl.behavPan,...
								'style','toggle',...
								'tag','listenforbehavbutt',...
								'units','pixels',...
								'position',[150 10 60 20],...
								'string','Connect');
						set([obj.bhvControl.behavCompnameTxt, obj.bhvControl.listenForBehavButt],...
								'callback',@(src,evnt)behavControlControlFcn(obj,src,evnt));
						%% Log Box
						obj.bhvControl.logBox = uicontrol(...
								'parent',obj.bhvControlFig,...
								'units','pixels',...
								'tag','behavlog',...
								'position',[10 10 obj.pos.bhvpanel(3)-20 obj.pos.bhvpanel(4)-90],...
								'style','edit',...
								'max',100,...
								'enable','inactive',...
								'horizontalalignment','left',...
								'string',obj.behavControlMsgLog);
						connectBhv(obj)
				end
				function buildVisualObjects(obj)
% 						obj.traceViewerObj = TraceViewer('dataGeneratorObj',obj.dataGeneratorObj);
% 						hide(obj.traceViewerObj)
% 						obj.frameViewerObj = FrameViewer('dataGeneratorObj',obj.dataGeneratorObj);
% 						hide(obj.frameViewerObj)
				end
				function buildMainFigure(obj)
						try
								%% GuiLayout
								mainLayout = uiextras.HBoxFlex('Parent',obj.mainFig);
								leftpanel = uiextras.VBox('Parent',mainLayout,...
										'Spacing',40,...
										'Padding',10);
								rightpanel = uipanel('Parent',mainLayout);
								set(mainLayout,'Sizes',[270 -1]);
								%% Image Axes Panel
								figpos = getpixelposition(obj.mainFig);
								leftpanwidth = 250;
								toppanheight = 150;
								leftpanheight = figpos(4)-60-toppanheight;
								topwidth = figpos(3)-60-leftpanwidth;
								toppan1width = round(4*(topwidth-40)/10);
								toppan2width = round(3*(topwidth-40)/10);
								toppan3width = round(3*(topwidth-40)/10);
								figure(obj.mainFig);								
								winsize = min(figpos(3)-leftpanwidth-40,figpos(4)-40);
								obj.mainControl.axpan = rightpanel;
								set(obj.mainAx,...
										'parent',obj.mainControl.axpan,...
										'tag','campreview',...
										'visible','on',...
										'position',[0 0 1 1]);
								axis image ij off
								colormap(gray)
								%% Experiment Status Panel
								% 								obj.mainControl.exptStatusPan = uipanel(...
								% 										'parent',obj.mainFig,...
								% 										'units','pixels',...
								% 										'tag','experimentstatuspanel',...
								% 										'title','',...
								% 										'position',[20 leftpanheight+40 leftpanwidth toppanheight]);
								obj.mainControl.exptStatusPan = uipanel(...
										'Parent',leftpanel,...
										'Title','Experiment Status');							
								obj.mainControl.exptStatusLbl = uicontrol(...
										'Parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'fontsize',16,...
										'horizontalalignment','left',...
										'string','Experiment: ',...
										'position',[5 toppanheight-35 leftpanwidth/2-5 30]);
								obj.mainControl.exptStatusTxt = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'units','pixels',...
										'fontsize',16,...
										'horizontalalignment','left',...
										'string','Stopped',...
										'position',[leftpanwidth/2 toppanheight-35 leftpanwidth/2-5 30]);
								obj.mainControl.trialNumLbl = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'units','pixels',...
										'fontsize',16,...
										'horizontalalignment','left',...
										'string','Trial: ',...
										'position',[5  toppanheight-65  leftpanwidth/2-5 30]);
								obj.mainControl.trialNumTxt = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'units','pixels',...
										'fontsize',16,...
										'horizontalalignment','left',...
										'string','0',...
										'position',[leftpanwidth/2  toppanheight-65  leftpanwidth/2-5 30]);
								if ~isempty(obj.cameraObj) && isobject(obj.cameraObj)
										if islogging(obj.cameraObj)
												obj.camStatus = 'Recording';
												txtcolor = obj.default.green;
										elseif isrunning(obj.cameraObj)
												obj.camStatus = 'Ready';
												txtcolor = obj.default.yellow;
										else
												obj.camStatus = 'Stopped';
												txtcolor = obj.default.red;
										end
								else
										obj.camStatus = 'Stopped';
										txtcolor = obj.default.red;
								end
								obj.mainControl.camStatusLbl = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'units','pixels',...
										'fontsize',16,...
										'horizontalalignment','left',...
										'string','Camera: ',...
										'position',[5 toppanheight-95 leftpanwidth/2-5 30]);
								obj.mainControl.camStatusTxt = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','text',...
										'units','pixels',...
										'fontsize',16,...
										'fontweight','bold',...
										'foregroundcolor',txtcolor,...
										'horizontalalignment','left',...
										'string',obj.camStatus,...
										'position',[leftpanwidth/2  toppanheight-95 leftpanwidth/2-5 30]);
								obj.mainControl.runButt = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','togglebutton',...
										'units','pixels',...
										'position',[10 10 80 30],...
										'string','Run',...
										'callback',@(src,evnt)runExperimentControlFcn(obj,src,evnt));
								obj.mainControl.previewButt = uicontrol(...
										'parent',obj.mainControl.exptStatusPan,...
										'style','togglebutton',...
										'units','pixels',...
										'position',[100 10 80 30],...
										'string','Preview On',...
										'value',1,...
										'callback',@(src,evnt)previewOnOffFcn(obj,src,evnt));
								%% Stimuli Status Panel
								% 								obj.mainControl.stimStatusPan = uipanel(obj.mainFig,...
								% 										'units','pixels',...
								% 										'tag','stimstatuspanel',...
								% 										'position',[20 20 leftpanwidth leftpanheight],...
								% 										'title','Stimuli');
								%% Save Directory
								% 								obj.dataControl.savePathPan = uipanel(obj.dataControlFig,...
								% 										'units','pixels',...
								% 										'tag','savefilepanel',...
								% 										'position',[10 10 220 110],...
								% 										'title','Save to Directory');
								% 								obj.mainControl.savePathPan = uipanel(obj.mainFig,...
								% 										'units','pixels',...
								% 										'tag','savefilepanel',...
								% 										'position',[20 leftpanheight-toppanheight+20 leftpanwidth toppanheight],...
								% 										'title','Save to Directory');
								obj.mainControl.savePathPan = uipanel(...
										'Parent',leftpanel,...
										'Title','Save to Directory');
								obj.dataControl.saveRootChgDirButt = uicontrol(obj.mainControl.savePathPan,...
										'style','pushbutton',...
										'tag','savefilechangebutt',...
										'units','pixels',...
										'position',[10 10 90 20],...
										'string','Change Root');
								obj.dataControl.monkeyPop = uicontrol(obj.mainControl.savePathPan,...
										'style','popup',...
										'tag','monkeypop',...
										'units','pixels',...
										'position',[110 10 100 20],...
										'string',obj.default.monkeyList);
								obj.dataControl.savePathAutoName = uicontrol(obj.mainControl.savePathPan,...
										'style','checkbox',...
										'tag','saveautocheck',...
										'units','pixels',...
										'position',[10 40 120 20],...
										'value',1,...
										'string','Use Default Naming');
								if get(obj.dataControl.savePathAutoName,'value')%is checked
										% 								obj.savePath = [obj.default.saveRoot,...
										% 										obj.animalName,'\',...
										% 										obj.animalName,datestr(date,'_mm_dd_yy'),'\'];
										obj.savePath = fullfile(obj.saveRoot,...
												obj.animalName,...
												[obj.animalName,datestr(date,'_yyyy_mm_dd')]);
								else
										obj.savePath = obj.saveRoot;
								end
								obj.dataControl.savePathTxt = uicontrol(obj.mainControl.savePathPan,...
										'style','edit',...
										'tag','savefileedit',...
										'horizontalalignment','left',...
										'units','pixels',...
										'position',[10 70 200 20],...
										'string',obj.savePath);
								set([obj.dataControl.savePathTxt,...
										obj.dataControl.saveRootChgDirButt,...
										obj.dataControl.monkeyPop,...
										obj.dataControl.savePathAutoName],...
										'callback',@(src,evnt)savePathControlFcn(obj,src,evnt));
								% 								%% Online Processing Panel
								% 																obj.mainControl.onlineProcessOptionsPan= uipanel(obj.mainFig,...
								% 																		'units','pixels',...
								% 																		'tag','onlineprocessingoptionspanel',...
								% 																		'position',[leftpanwidth+40 leftpanheight+40 toppan1width toppanheight],...
								% 																		'title','Online Image Processing');
								% 								obj.mainControl.onlineTriggeredAvgChk = uicontrol(...
								% 										'parent',obj.mainControl.onlineProcessOptionsPan,...
								% 										'style','checkbox',...
								% 										'tag','onlinetrigavgcheck',...
								% 										'units','pixels',...
								% 										'position',[10 10 toppan1width-15 20],...
								% 										'value',1,...
								% 										'string','Triggered Average');
								% 								obj.mainControl.onlineChannelSepChk = uicontrol(...
								% 										'parent',obj.mainControl.onlineProcessOptionsPan,...
								% 										'style','checkbox',...
								% 										'tag','onlinechannelseparationcheck',...
								% 										'units','pixels',...
								% 										'position',[10 40 toppan1width-15 20],...
								% 										'value',0,...
								% 										'string','Frame Sequence Separation');
								% 								obj.mainControl.onlineMeanTraceChk = uicontrol(...
								% 										'parent',obj.mainControl.onlineProcessOptionsPan,...
								% 										'style','checkbox',...
								% 										'tag','onlinemeantracecheck',...
								% 										'units','pixels',...
								% 										'position',[10 70 toppan1width-15 20],...
								% 										'value',1,...
								% 										'string','Frame-Mean Intensity Trace');
								% 								obj.mainControl.onlineRoiTraceChk = uicontrol(...
								% 										'parent',obj.mainControl.onlineProcessOptionsPan,...
								% 										'style','checkbox',...
								% 										'tag','onlineroitracecheck',...
								% 										'units','pixels',...
								% 										'position',[10 100 toppan1width-15 20],...
								% 										'value',0,...
								% 										'string','ROI Intensity Trace');
								%% Software Binning Panel
								% 								obj.mainControl.softwareBinPanel = uibuttongroup(...
								% 										'parent',obj.mainFig,...
								% 										'units','pix',...
								% 										'position',[20 leftpanheight-toppanheight*2-20 leftpanwidth toppanheight],...
								% 										'tag','softwarebinpanel',...
								% 										'title','Spatial Binning');
								obj.mainControl.softwareBinPanel = uibuttongroup(...
										'Parent',leftpanel,...
										'Title','Spatial Binning');
								obj.mainControl.softwareBinChk = uicontrol(...
										'parent',obj.mainControl.softwareBinPanel,...
										'style','checkbox',...
										'tag','softwarebincheck',...
										'units','pixels',...
										'position',[10 100 toppan2width-15 20],...
										'value',0,...
										'string','Bin Pixels in Software');
								obj.mainControl.softwareBinFactor(1) = uicontrol(...
										'parent',obj.mainControl.softwareBinPanel,...
										'style','rad',...
										'unit','pix',...
										'position',[10 70 toppan2width-15 20],...
										'string','2x2');
								obj.mainControl.softwareBinFactor(2) = uicontrol(...
										'parent',obj.mainControl.softwareBinPanel,...
										'style','rad',...
										'unit','pix',...
										'position',[10 40 toppan2width-15 20],...
										'string','4x4');
								obj.mainControl.softwareBinFactor(3) = uicontrol(...
										'parent',obj.mainControl.softwareBinPanel,...
										'style','rad',...
										'unit','pix',...
										'position',[10 10 toppan2width-15 20],...
										'string','8x8');
								set(allchild(obj.mainControl.softwareBinPanel),...
										'callback',@(src,evnt)softwareBinFcn(obj,src,evnt));								
								%% Preview Display Panel
								popos = getpixelposition(obj.mainControl.softwareBinPanel);
								dopos = popos(1:2) + [popos(3)+20 0];
								% 								obj.mainControl.displayOptionsPan= uipanel(obj.mainFig,...
								% 										'units','pixels',...
								% 										'tag','displayoptionspanel',...
								% 										'position',[20 leftpanheight-toppanheight*3-40 leftpanwidth toppanheight],...
								% 										'title','Main Display');
								obj.mainControl.displayOptionsPan = uipanel(...
										'Parent',leftpanel,...
										'Title','Main Display');
								%% Colormap
								popwidth = toppan3width/2-40;
								textwidth = toppan3width/2;
								obj.mainControl.imageColormapPop = uicontrol(...
										'parent',obj.mainControl.displayOptionsPan,...
										'style','popup',...
										'tag','colormappop',...
										'units','pixels',...
										'position',[10 10 popwidth 20],...
										'string',obj.default.colormapList,...
										'callback',@(src,evnt)colormapControlFcn(obj,src,evnt));
								obj.mainControl.imageColormapTxt = uicontrol(...
										'parent',obj.mainControl.displayOptionsPan,...
										'style','text',...
										'tag','colormapoptionstext',...
										'units','pixels',...
										'horizontalalignment','left',...
										'position',[popwidth+10 10 textwidth 20],...
										'string','Colormap');
								obj.mainControl.colormapSaturationChk  = uicontrol(...
										'parent',obj.mainControl.displayOptionsPan,...
										'style','checkbox',...
										'tag','colormapsaturationcheck',...
										'units','pixels',...
										'position',[10 40 toppan3width-40 20],...
										'value',0,...
										'string','Show Saturation in Colormap',...
										'callback',@(src,evnt)colormapControlFcn(obj,src,evnt));
								%% Preview Flip
								obj.mainControl.previewFlipLeftRightButt = uicontrol(...
										'parent',obj.mainControl.displayOptionsPan,...
										'style','pushbutton',...
										'units','pixels',...
										'position',[10 70 60 20],...
										'string','Flip LR',...
										'callback',@(src,evnt)previewFlipFcn(obj,src,evnt));
								obj.mainControl.previewFlipUpDownButt = uicontrol(...
										'parent',obj.mainControl.displayOptionsPan,...
										'style','pushbutton',...
										'units','pixels',...
										'position',[80 70 60 20],...
										'string','Flip UD',...
										'callback',@(src,evnt)previewFlipFcn(obj,src,evnt));
								%% Movie Sequence Style
% 								obj.mainControl.movieSequenceOptionPop= uicontrol(...
% 										'parent',obj.mainControl.displayOptionsPan,...
% 										'style','popup',...
% 										'tag','moviesequenceoptionpop',...
% 										'units','pixels',...
% 										'position',[10 70 popwidth 20],...
% 										'string',obj.default.moveSequenceOptions);
% 								obj.mainControl.movieSequenceOptionTxt = uicontrol(...
% 										'parent',obj.mainControl.displayOptionsPan,...
% 										'style','text',...
% 										'tag','moviesequenceoptiontext',...
% 										'units','pixels',...
% 										'horizontalalignment','left',...
% 										'position',[popwidth+10 70 textwidth 20],...
% 										'string','Movie-Sequence Options');
								%% Menu
								buildMenu(obj)
						catch me
								warning(me.message)
								disp(me.stack(1))
								keyboard
						end
				end
				function buildMenu(obj)
						obj.mainMenu.settings.list = uimenu(obj.mainFig,'Label','Settings');
						obj.mainMenu.settings.camControl = uimenu(...
								obj.mainMenu.settings.list,...
								'Label','Camera',...
								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
						obj.mainMenu.settings.dataControl = uimenu(...
								obj.mainMenu.settings.list,...
								'Label','Data/Experiment',...
								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
						obj.mainMenu.settings.bhvControl = uimenu(...
								obj.mainMenu.settings.list,...
								'Label','BehavControl',...
								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
						obj.mainMenu.settings.illumControl = uimenu(...
								obj.mainMenu.settings.list,...
								'Label','Illumination',...
								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
						% 						obj.mainMenu.dataview.list = uimenu(obj.mainFig,'Label','Data-View');
						% 						obj.mainMenu.dataview.traceviewer = uimenu(...
						% 								obj.mainMenu.dataview.list,...
						% 								'Label','Live Trace',...
						% 								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
						% 						obj.mainMenu.dataview.frameviewer = uimenu(...
						% 								obj.mainMenu.dataview.list,...
						% 								'Label','PlayMatMovie',...
						% 								'callback',@(src,evnt)openMenuItem(obj,src,evnt));
				end
				function setFigureAccess(obj)
						set([obj.mainFig; obj.componentControlFigs],...
								'HandleVisibility','callback');
						set(obj.componentControlFigs,...
								'visible','off',...
								'CloseRequestFcn',@(src,evnt)hideDontClose(obj,src,evnt));
				end
				
		end
		methods (Hidden)% Control Functions
				function resolutionControlFcn(obj,src,evnt)
						if ~isempty(obj.cameraObj)
								obj.cameraObj.resolution = obj.resolution;
						end
						axis(obj.cameraObj.previewAxes,'image','off')
						figure(obj.camControlFig)
				end
				function framerateControlFcn(obj,src,evnt)
						txt = get(obj.camControl.frTxt,'string');
						try
								num = eval(txt);
						catch me
								errordlg(['Frame rate must be numeric (',me.message,')'])
						end
						if num > obj.default.maxFR
								set(obj.camControl.frTxt,'string',num2str(obj.default.maxFR))
						end
						if ~isempty(obj.cameraObj)
								set(obj.cameraObj,'frameRate',obj.frameRate);
						end
				end
				function gainControlFcn(obj,src,~)
						switch src
								case obj.camControl.gainTxt
										L = get(obj.camControl.gainSlider,{'min','max','value'});  % Get the slider's info.
										E = str2double(get(src,'string'));  % Numerical edit string.
										if E >= L{1} && E <= L{2}
												set(obj.camControl.gainSlider,'value',E)  % E falls within range of slider.
										else
												set(src,'string',L{3}) % User tried to set slider out of range.
										end
								case obj.camControl.gainSlider
										set(obj.camControl.gainTxt,'string',get(src,'value'));
								case obj.camControl.gainResetButt
										set(obj.camControl.gainTxt,'string',obj.default.gain);
										set(obj.camControl.gainSlider,'value',obj.default.gain);
						end
						if ~isempty(obj.cameraObj)
								obj.cameraObj.gain = obj.gain;
						end
				end
				function offsetControlFcn(obj,src,evnt)
						switch src
								case obj.camControl.offsetTxt
										L = get(obj.camControl.offsetSlider,{'min','max','value'});  % Get the slider's info.
										E = str2double(get(src,'string'));  % Numerical edit string.
										if E >= L{1} && E <= L{2}
												set(obj.camControl.offsetSlider,'value',round(E))  % E falls within range of slider.
										else
												set(src,'string',round(L{3})) % User tried to set slider out of range.
										end
								case obj.camControl.offsetSlider
										set(obj.camControl.offsetSlider,'value',round(get(obj.camControl.offsetSlider,'value')))
										set(obj.camControl.offsetTxt,'string',get(src,'value'));
								case obj.camControl.offsetResetButt
										set(obj.camControl.offsetTxt,'string',obj.default.offset);
										set(obj.camControl.offsetSlider,'value',obj.default.offset);
						end
						if ~isempty(obj.cameraObj)
								obj.cameraObj.offset = obj.offset;
						end
				end
				function configFileControlFcn(obj,src,evnt)
						switch src
								case obj.camControl.configFileTxt
										txt = get(src,'string');
										if isdir(txt)
												return
										else
												cfdir = uigetdir(obj.default.configFileDir);
										end
								case obj.camControl.configFileChgDirButt
										cfdir = uigetdir(obj.default.configFileDir);
						end
						set(obj.camControl.configFileTxt,'string',cfdir);
						if ~isempty(obj.cameraObj)
								obj.cameraObj.configFileDirectory = cfdir;
						end
						figure(obj.camControlFig)
				end
				function camobjControlFcn(obj,src,evnt)
						%TODO: add control that resets Camera, hard or soft
						camlist = get(obj.camControl.camObjPoplist,'string');
						choice = camlist{get(obj.camControl.camObjPoplist,'val')};
						switch src
								case obj.camControl.camObjPoplist
										if strcmp(choice,'other')
												specObj = inputdlg('Enter the name of the derived Camera class');
												set(src,'string',[specObj,obj.default.camObjList,{'other'}],...
														'value',1);
										end
								case obj.camControl.camObjLoadButton
										if get(obj.camControl.camObjLoadButton,'value') % -> connect
												connectCam(obj,choice);
										else % disconnect
												disconnectCam(obj);
										end
						end
						figure(obj.camControlFig)
				end
				function illuminationControlFcn(obj,src,evnt)
						switch src
								case obj.illumControl.illumOnButt
										if get(obj.illumControl.illumOnButt,'value') % lights on
												connectIllumination(obj);
										else
												disconnectIllumination(obj);
										end
								case obj.illumControl.illumSequenceEdit
										str = get(obj.illumControl.illumSequenceEdit,'string');
										n=1;
										while ~isempty(str)
												[obj.channelSequence{n},str] = strtok(str,',;:.- ');
												n=n+1;
										end
										disconnectIllumination(obj);
										connectIllumination(obj);
						end
				end
				function savePathControlFcn(obj,src,evnt)
						if src == obj.dataControl.saveRootChgDirButt
								obj.saveRoot = uigetdir(obj.default.saveRoot);
								if char(obj.saveRoot(end)) ~= char('\')
										obj.saveRoot = [obj.saveRoot,'\'];
								end
								set(obj.dataControl.savePathTxt,'string',obj.saveRoot);
								% if savePath is defined by user, savePath and saveRoot
								% are the same.
						end
						if get(obj.dataControl.savePathAutoName,'value')%is checked
								if char(obj.saveRoot(end)) ~= char('\')
										obj.saveRoot = [obj.saveRoot,'\'];
								end
								obj.savePath =  fullfile(obj.saveRoot,...
										obj.animalName,...
										[obj.animalName,datestr(date,'_yyyy_mm_dd')]);
								set(obj.dataControl.savePathTxt,'string',obj.savePath);
						else
								obj.savePath = get(obj.dataControl.savePathTxt,'string');
						end
				end
				function behavControlControlFcn(obj,src,evnt)
						compname = get(obj.bhvControl.behavCompnameTxt,'string');
						[~,stimIP] = resolvehost(compname);
						if ~isempty(stimIP)
								obj.behavControlComputerName = compname;
								switch src
										case obj.bhvControl.listenForBehavButt
												if get(obj.bhvControl.listenForBehavButt,'value') %connect
														connectBhv(obj)
												else % disconnect
														disconnectBhv(obj)
												end
										case obj.bhvControl.behavCompnameTxt
												if ~isempty(obj.stimulusPresentationObj) && get(obj.bhvControl.listenForBehavButt,'value')
														delete(obj.stimulusPresentationObj)
														connectBhv(obj)
												end
								end
						else
								set(obj.bhvControl.behavCompnameTxt,'string',obj.behavControlComputerName);
								errordlg(['Could not find the computer named: ',compname]);
						end
				end
				function runExperimentControlFcn(obj,src,evnt)
						try
								configPanelHandleSet = [allchild(obj.componentControlFigs);...
										allchild(obj.mainControl.savePathPan);...
										allchild(obj.mainControl.softwareBinPanel)];
								uihandles = [];
								for n = 1:length(configPanelHandleSet)
										uihandles = [uihandles; findobj(configPanelHandleSet{n},'type','uicontrol')];
								end
								switch get(src,'value')
										case 1 % Button pressed -> Run
												set(uihandles,'enable','off')
												set(obj.bhvControl.logBox,'enable','on')
												runExperiment(obj);
												if obj.exptRunning
														notify(obj,'SwitchToExperimentMode')
														set(src,'enable','on',...
																'string','Stop')
														set(obj.mainControl.exptStatusTxt,'string','Waiting')
												else
														set(uihandles,'enable','on')
												end
										case 0 % Button pressed -> Stop
												interruptExperiment(obj)
												notify(obj,'StopAcquisition');
												set(src,'string','Run')
												set(obj.mainControl.exptStatusTxt,'string','Stopped')
												set(uihandles,'enable','on');
								end
						catch me
								warning(me.message)
								disp(me.stack(1))
								set(src,'value',~get(src,'value'),'enable','on')
						end
				end
				function trigAverageControlFcn(obj,src,evnt) % ???
						 % What the hell is this function?
						uihandles = findall(obj.dataControlFig,...
								'type','uicontrol',...
								'parent',obj.dataControl.trigAvgPan);
						uihandles = [uihandles; findall(obj.dataControlFig,...
								'parent',obj.dataControl.trigFromButtPan)];
						if ~get(obj.dataControl.onlineAvgChk,'value')
								set(uihandles,'enable','off')
								set(obj.dataControl.onlineAvgChk,'enable','on')
						else
								set(uihandles,'enable','on')
						end
				end
				function previewOnOffFcn(obj,src,evnt)
						try
								if ~isempty(obj.cameraObj) && isvalid(obj.cameraObj)
										switch get(src,'Value')
												case 0 %Turn off
														stoppreview(obj.cameraObj)
														set(src,'String','Preview Off')
												case 1 %Turn On
														cmap = get(obj.mainFig,'ColorMap');
														preview(obj.cameraObj)
														set(src,'String','Preview On')
														set(obj.mainFig,'ColorMap',cmap);
										end
								else
										set(src,'Value',~get(src,'Value'))
								end
						catch me
								set(src,'Value',~get(src,'Value'))
								if ~isrunning(obj.cameraObj)
										set(src,'String','Preview Off')
								end
						end
										
				end
				function colormapControlFcn(obj,src,evnt)
						persistent blackwhitesaturate
						try
								blackwhitesaturate = get(obj.mainControl.colormapSaturationChk,'val');
								colormaplist = get(obj.mainControl.imageColormapPop,'string');
								choice = colormaplist{get(obj.mainControl.imageColormapPop,'val')};
								cmap = eval(cat(2,choice,'(256)'));
								if blackwhitesaturate % set 1st/Last points in colormap to black/white
										cmap(1,:) = 0;
										cmap(end,:) = 1;
								end
								set(obj.mainFig,'ColorMap',cmap);
% 								colormap(obj.mainAx,cmap);
						catch me
								disp(me.stack(1))
								warndlg('That colormap did not work!')
								set(obj.mainControl.imageColormapPop,'val',1);
						end
				end
				function previewFlipFcn(obj,src,evnt)
						imageObject = obj.cameraObj.previewImageObj;
						switch src
								case obj.mainControl.previewFlipUpDownButt
										set(imageObject,'YData',fliplr(get(imageObject,'YData')));
								case obj.mainControl.previewFlipLeftRightButt
										set(imageObject,'XData',fliplr(get(imageObject,'XData')));
						end
				end
				function softwareBinFcn(obj,src,evnt)
						try
								bin = get(obj.mainControl.softwareBinChk,'value');
								if bin
										binfactorstring = get(findobj(obj.mainControl.softwareBinFactor,'val',1),'string');
										switch binfactorstring
												case '2x2'
														binfactor = 2;
												case '4x4'
														binfactor = 4;
												case '8x8'
														binfactor = 8;
												otherwise
														binfactor = 1;
										end
										obj.cameraSystem.frameDataCallbackFcn = ...
												@(data)spatialBinData(data,binfactor);
								else
										obj.cameraSystem.frameDataCallbackFcn = [];
								end
						catch me
								warning(me.message)
						end
				end
		end
		methods % Get Functions
				function res = get.resolution(obj)
						if ~isempty(obj.camControl) && isfield(obj.camControl,'resradio')
								res = eval(get(findobj(obj.camControl.resradio,'val',1),'string'));
						else
								res = [];
						end
				end
				function fr = get.frameRate(obj)
						fr = eval(get(obj.camControl.frTxt,'string'));
				end
				function offset = get.offset(obj)
						offset = get(obj.camControl.offsetSlider,'value');
				end
				function gain = get.gain(obj)
						gain = get(obj.camControl.gainSlider,'value');
				end
				function configdir = get.configFileDirectory(obj)
						configdir = get(obj.camControl.configFileTxt,'string');
				end
				function hserial = get.serialPort(obj)
						comlist = get(obj.camControl.camObjComPoplist,'string');
						hserial = comlist{get(obj.camControl.camObjComPoplist,'val')};
				end
				function name = get.animalName(obj)
						alist = get(obj.dataControl.monkeyPop,'string');
						name = alist{get(obj.dataControl.monkeyPop,'value')};
				end
				function nframes = get.nFramesPreTrigger(obj)
						tmp = eval(get(obj.dataControl.preTriggerEdit,'string'));
						unitlist = get(obj.dataControl.prepostTriggerUnitPop,'string');
						units = unitlist{get(obj.dataControl.prepostTriggerUnitPop,'val')};
						switch units
								case 'frames'
										nframes = tmp;
								case 'seconds'
										nframes = round(tmp * obj.frameRate);
								case 'milliseconds'
										nframes = round(tmp/1000 * obj.frameRate);
						end
				end
				function nframes = get.nFramesPostTrigger(obj)
						tmp = eval(get(obj.dataControl.postTriggerEdit,'string'));
						unitlist = get(obj.dataControl.prepostTriggerUnitPop,'string');
						units = unitlist{get(obj.dataControl.prepostTriggerUnitPop,'val')};
						switch units
								case 'frames'
										nframes = tmp;
								case 'seconds'
										nframes = round(tmp * obj.frameRate);
								case 'milliseconds'
										nframes = round(tmp/1000 * obj.frameRate);
						end
				end
				function trigstring = get.trigger(obj)
						trigstring = get(findobj(obj.dataControl.trigradio,'value',1),'string');
				end
				function minframes = get.stimOnMinimum(obj)
						minframes = eval(get(obj.dataControl.stimOnMinEdit,'string'));
						minframes = floor(minframes*obj.frameRate);
				end
				function minframes = get.trialLengthMinimum(obj)
						minframes = eval(get(obj.dataControl.trialLengthMinEdit,'string'));
						minframes = floor(minframes*obj.frameRate);
				end
				function choice = get.computeTrigAvgOnline(obj)
						choice = logical(get(obj.dataControl.onlineAvgChk,'value'));
				end
				function figlist = get.componentControlFigs(obj)
						figlist = [...
								obj.camControlFig;...
								obj.dataControlFig;...
								obj.bhvControlFig;...
								obj.illumControlFig];
				end
				function nstimpan = get.nStimPanels(obj)
						if ~isfield(obj.mainControl,'stimdisplaypanel') || isempty(obj.mainControl.stimdisplaypanel)
								nstimpan = 0;
						else
								nstimpan = length(obj.mainControl.stimdisplaypanel);
						end
				end
		end
		methods % Connect/Disconnect Component Functions
				function connectBhv(obj)
						try
								if ~isempty(obj.behaviorSystem) && isvalid(obj.behaviorSystem)
										delete(obj.behaviorSystem)
								end
								stimInterfaceProps = struct(...
										'BhvControlComputerName',obj.behavControlComputerName,...
										'savePath',obj.savePath,...
										'showLog','no');
								obj.behaviorSystem = BehaviorSystem(...
										'stimulusPresentationObjProperties',stimInterfaceProps,...
										'sessionPath',obj.savePath,...
										'cameraObj',obj.cameraObj);
								obj.stimulusPresentationObj = obj.behaviorSystem.stimulusPresentationObj;
								set(obj.bhvControl.listenForBehavButt,'value',1)
								set(obj.bhvControl.listenForBehavButt,'string','Disconnect');
								addlistener(obj.stimulusPresentationObj,'BehavControlMsg',...
										@obj.udpMessageUpdate);
								addlistener(obj.stimulusPresentationObj,'experimentState','PostSet',...
										@(src,evnt)exptStatusChange(obj,src,evnt));
								addlistener(obj.stimulusPresentationObj,'currentTrialNumber','PostSet',...
										@(src,evnt)trialNumberChange(obj,src,evnt));
								if ~isempty(obj.behaviorSystem) && ~isempty(obj.cameraSystem)
										obj.behaviorSystem.cameraObj = obj.cameraObj;
										obj.cameraSystem.behaviorSystemObj = obj.behaviorSystem;
								end
						catch me
								warning(me.message); disp(me.stack(1))
						end
				end
				function disconnectBhv(obj)
						if ~isempty(obj.behaviorSystem) && isvalid(obj.behaviorSystem)
								stop(obj.behaviorSystem)
								delete(obj.behaviorSystem)
						end
						obj.behaviorSystem = [];
						obj.stimulusPresentationObj = [];
						set(obj.bhvControl.listenForBehavButt,'value',0)
						set(obj.bhvControl.listenForBehavButt,'string','Connect')
				end
				function connectCam(obj,choice)
						if obj.debugMode
								answer = questdlg('Connect Camera?');
								if ~strcmpi('yes',answer)
										return
								end
						end
						if nargin<2
								choice = 'DalsaCamera';
						end
						dalsasettings = {'configFileDirectory',obj.configFileDirectory;...
								'serialPort',obj.serialPort;...
								'gain',obj.gain;...
								'offset',obj.offset;...
								'gui',obj}';
						commonsettings = {'previewFigure',obj.mainFig;...
								'previewImageObj',obj.mainControl.previewIm;...
								'resolution',obj.resolution;...
								'frameRate',obj.frameRate}';
						if strcmpi(choice,'DalsaCamera')
								camsettings = [dalsasettings commonsettings];
						else
								camsettings = commonsettings;
						end
						try
								if ~isempty(obj.cameraObj)...
												&& isvalid(obj.cameraObj)... % Already Exists
												&& isa(obj.cameraObj,choice) % Same Class as Existing
										stop(obj.cameraObj)
										propnames = camsettings(1,:);
										propvals = camsettings(2,:);
										set(obj.cameraObj,propnames,propvals)
								else
										switch lower(choice)
												case 'dalsacamera'
														obj.cameraObj = DalsaCamera(camsettings{:});%TODO: trigger settings/control
														checkProperties(obj.cameraObj)
												case 'webcamera'
														obj.cameraObj = WebCamera;
												otherwise
														obj.cameraObj = eval(choice);
										end
										addlistener(obj.cameraObj,'CameraLogging',@obj.camStatusChange);
										addlistener(obj.cameraObj,'CameraStopped',@obj.camStatusChange);
										addlistener(obj.cameraObj,'CameraReady',@obj.camStatusChange);
								end
								obj.cameraSystem = CameraSystem('cameraObj',obj.cameraObj);
								if ~isempty(obj.behaviorSystem) && ~isempty(obj.cameraSystem)
										obj.behaviorSystem.cameraObj = obj.cameraSystem;
										obj.cameraSystem.behaviorSystemObj = obj.behaviorSystem;
								end
								obj.camConnected = true;
								set(obj.camControl.camObjLoadButton,'value',1,'string','Disconnect')
								addlistener(obj.cameraObj,'PreviewFrameAcquired',...
										@(src,evnt)updateHistWindow(obj,src,evnt));
								start(obj.cameraObj)
						catch me
								warning('ImageAcuisitionGUI:connectCam:CameraCommunicationFailure',...
										'Failure to communicate with Camera.');
								obj.camConnected = false;
								set(obj.camControl.camObjLoadButton,'value',0,'string','Connect')
						end
				end
				function disconnectCam(obj)
						try
								lastwarn('');
								warning('off','imaq:coreco:lowLevelError');
								if ~isempty(obj.cameraSystem)...
												&& isvalid(obj.cameraSystem)
										if isrunning(obj.cameraObj)
												stop(obj.cameraSystem)
										end
										delete(obj.cameraSystem);
								end
								[~,id] = lastwarn;
								if strcmp(id,'imaq:coreco:lowLevelError')
										warning('ImageAcuisitionGUI:DalsaCamera:delete:lostconnection','Matlab has lost connection to Camera');
								end
								obj.cameraSystem = [];
								obj.cameraObj = [];
								obj.camConnected = false;
								set(obj.camControl.camObjLoadButton,...
										'string','Connect','value',0);
						catch me
								warning(me.message)
								disp(me.stack(1))
						end
				end
				function connectIllumination(obj)
						% 						if obj.debugMode
						% 								answer = questdlg('Connect Illumination?');
						% 								if ~strcmpi('yes',answer)
						% 										return
						% 								end
						% 						end
						if ~isempty(obj.illuminationControlObj) && isvalid(obj.illuminationControlObj)
								delete(obj.illuminationControlObj)
						end
						% 						if isempty(obj.cameraSystem)
						% 								obj.connectSystems();
						% 						end
						% 						obj.illuminationControlObj = obj.cameraSystem.illuminationObj;
						% 						obj.illuminationControlObj.channelSequence = obj.channelSequence;
						set(obj.illumControl.illumOnButt,'value',1,'string','Turn Off')
				end
				function disconnectIllumination(obj)
						if obj.debugMode
								answer = questdlg('Disconnect Illumination?');
								if ~strcmpi('yes',answer)
										return
								end
						end
						if ~isempty(obj.illuminationControlObj) && isvalid(obj.illuminationControlObj)
								delete(obj.illuminationControlObj)
						end
						obj.illuminationControlObj = [];
						set(obj.illumControl.illumOnButt,'value',0,'string','Turn On')
				end
				function connectSystems(obj)
						fprintf('Connecting All Systems\n')
						if isempty(obj.behaviorSystem)
								obj.behaviorSystem = BehaviorSystem;
						end
						if isempty(obj.cameraSystem)
								obj.cameraSystem = CameraSystem;
						end
						if ~isempty(obj.behaviorSystem) && ~isempty(obj.cameraSystem)
								obj.behaviorSystem.cameraObj = obj.cameraObj;
								obj.cameraSystem.behaviorSystemObj = obj.behaviorSystem;
						end
						obj.cameraObj = obj.cameraSystem.cameraObj;
						obj.stimulusPresentationObj = obj.behaviorSystem.stimulusPresentationObj;
            try
              obj.illuminationControlObj = obj.cameraSystem.illuminationObj;
							obj.illuminationControlObj.channelSequence = obj.channelSequence;% added 7/22
              obj.illuminationControlObj.cameraObj = obj.cameraObj;
            catch me
              warning('ExperimentControlGUI:connectSystems:IlluminationControlConnectionFailure',...
                'Failure to connect an IlluminationControl object: %s\n',me.message);
            end
				end
				function runExperiment(obj)
						% Check to see if all Components are Connected
						if isempty(obj.cameraObj) ...
										|| ~isvalid(obj.cameraObj) ...
										|| ~isrunning(obj.cameraObj) ...
										|| isempty(obj.stimulusPresentationObj) ...
										|| ~isvalid(obj.stimulusPresentationObj) ...
										|| isempty(obj.illuminationControlObj) ...
										|| ~isvalid(obj.illuminationControlObj)
								response = questdlg(...
										['Camera, BehavControl, and/or illumination are not connected.',...
										'Connect and proceed?'],...
										'AutoConfigure',...
										'Yes','Force Proceed','Cancel','Cancel');
								switch lower(response)
										case 'yes'
												if isempty(obj.cameraObj) || ~isvalid(obj.cameraObj)
														% cam not connected yet -> connect
														camlist = get(obj.camControl.camObjPoplist,'string');
														choice = camlist{get(obj.camControl.camObjPoplist,'val')};
														connectCam(obj,choice);
												end
												if ~isrunning(obj.cameraObj)
														start(obj.cameraObj)
												end
												if isempty(obj.stimulusPresentationObj) || ~isvalid(obj.stimulusPresentationObj)
														connectBhv(obj)
												end
												if isempty(obj.illuminationControlObj) || ~isvalid(obj.illuminationControlObj)
														connectIllumination(obj)
												end
										case 'cancel'
												if isempty(obj.cameraObj) ...
																|| ~isvalid(obj.cameraObj) ...
																|| ~isrunning(obj.cameraObj)
														set(obj.camControlFig,'visible','on')
												end
												if isempty(obj.stimulusPresentationObj) || ~isvalid(obj.stimulusPresentationObj)
														set(obj.bhvControlFig,'visible','on')
												end
												if isempty(obj.illuminationControlObj) || ~isvalid(obj.illuminationControlObj)
														set(obj.illumControlFig,'visible','on')
												end
												obj.exptRunning = false;
												return
                  case 'force proceed'
                    try
                      if isempty(obj.cameraObj) || ~isvalid(obj.cameraObj)
                        % cam not connected yet -> connect
                        camlist = get(obj.camControl.camObjPoplist,'string');
                        choice = camlist{get(obj.camControl.camObjPoplist,'val')};
                        connectCam(obj,choice);
                      end
                    catch me
                      fprintf('Connection Failure: %s\n',me.message)
                      me.stack(1)
                    end
                    try
                      if ~isrunning(obj.cameraObj)
                        start(obj.cameraObj)
                      end
                    catch me
                      fprintf('Connection Failure: %s\n',me.message)
                      me.stack(1)
                    end
                    try
                      if isempty(obj.stimulusPresentationObj) || ~isvalid(obj.stimulusPresentationObj)
                        connectBhv(obj)
                      end
                    catch me
                      fprintf('Connection Failure: %s\n',me.message)
                      me.stack(1)
                    end
                    try
                      if isempty(obj.illuminationControlObj) || ~isvalid(obj.illuminationControlObj)
                        connectIllumination(obj)
                      end
                    catch me
                      fprintf('Connection Failure: %s\n',me.message)
                      me.stack(1)
                    end
								end
						end
						figure(obj.mainFig)
            obj.cameraSystem.sessionPath = obj.savePath;
            obj.behaviorSystem.sessionPath = obj.savePath;
            obj.exptRunning = true;
						start(obj.behaviorSystem);
				end
				function interruptExperiment(obj)
						stop(obj.behaviorSystem);
                        if islogging(obj.cameraObj)
                            stop(obj.cameraSystem);
                        end
						obj.exptRunning = false;
				end
		end
		methods % Event Response Functions
				function udpMessageUpdate(obj,eventSrc,eventData)
						message = eventData.udpMessage;
						obj.behavControlMsgLog = [message ; obj.behavControlMsgLog];
						set(obj.bhvControl.logBox,'string',obj.behavControlMsgLog);
				end
				function updateHistWindow(obj,camobj,previewmsg) %Respond to Camera PreviewFrameAcquired event
						try
								if strcmp(get(obj.camControlFig,'visible'),'on')
										evnt = previewmsg.previewEvent;
										hist(obj.camControl.intensityHistAx,double(evnt.Data(:)),1:256);
										set(obj.camControl.intensityHistAx,...
												'xlim',[1 256],...
												'ytick',[],...
												'yticklabel',[],...
												'xtick',[])
								end
						catch me % error thrown when camera is restarted
								warning(me.message)
								disp(me.stack(1))
						end
				end
				function openMenuItem(obj,src,evnt)
						switch src
								case obj.mainMenu.settings.camControl
										set(obj.camControlFig,'visible','on')
										figure(obj.camControlFig)
								case obj.mainMenu.settings.dataControl
										set(obj.dataControlFig,'visible','on')
										figure(obj.dataControlFig)
								case obj.mainMenu.settings.bhvControl
										set(obj.bhvControlFig,'visible','on')
										figure(obj.bhvControlFig)
								case obj.mainMenu.settings.illumControl
										set(obj.illumControlFig,'visible','on')
										figure(obj.illumControlFig)
										% 								case obj.mainMenu.dataview.traceviewer
										% 										unhide(obj.traceViewerObj)
										% 								case obj.mainMenu.dataview.frameviewer
										% 										unhide(obj.frameViewerObj)
						end
				end
				function hideDontClose(obj,src,evnt)
						set(src,'visible','off')
				end
				function camStatusChange(obj,eventSrc,eventData)
						switch eventData.EventName
								case 'CameraLogging'
										obj.camStatus = 'Recording';
										txtcolor = obj.default.green;
								case 'CameraStopped'
										obj.camStatus = 'Stopped';
										txtcolor = obj.default.red;
								case 'CameraReady'
										obj.camStatus = 'Ready';
										txtcolor = obj.default.yellow;
						end
						if ~isempty(obj.mainControl) && isfield(obj.mainControl,'camStatusTxt')
								set(obj.mainControl.camStatusTxt,...
										'string',obj.camStatus,...
										'ForegroundColor',txtcolor);
						end
				end
				function exptStatusChange(obj,eventSrc,eventData)
						exptState = eventData.AffectedObject.experimentState;
						if obj.exptRunning
								switch exptState
										case 'start exp'
												obj.exptStatus = obj.stimulusPresentationObj.fileName(1:4);
												if isfield(obj.mainControl,'stimdisplaypanel')
														delete(obj.mainControl.stimdisplaypanel)
														obj.mainControl.stimdisplaypanel = [];
												end
% 												stoppreview(obj.cameraObj)
										case 'unpause'
												obj.exptStatus = obj.stimulusPresentationObj.fileName(1:4);
% 												stoppreview(obj.cameraObj)
										case 'pause exp'
												obj.exptStatus = 'Paused';
% 												preview(obj.cameraObj)
										case 'finished'
												obj.exptStatus = 'Finished';
												obj.guiStimIndex = [];
% 												preview(obj.cameraObj)
								end
								if ~isempty(obj.mainControl) && isfield(obj.mainControl,'exptStatusTxt')
										set(obj.mainControl.exptStatusTxt,...
												'string',obj.exptStatus)
								end
						end
				end
				function trialNumberChange(obj,src,evnt)
						if ~isempty(obj.mainControl) && isfield(obj.mainControl,'trialNumTxt')
								set(obj.mainControl.trialNumTxt,...
										'string',num2str(obj.stimulusPresentationObj.currentTrialNumber));
						end
				end
				function newStimFcn(obj,src,stimEventData)
						try
						nstimpan = obj.nStimPanels+1;
						if nstimpan ~= src.experimentObj.currentStimIndex
								warning('ImageAcuisitionGUI:MainFigure:StimPanelMismatch','Stim panels and stim index do not match')
								return
						end
						newStimNumber = stimEventData.stimNumber;
% 						if newStimNumber ~= obj.dataGeneratorObj.experimentObj.stimNumbers(nstimpan)
% 								warning('ImageAcuisitionGUI:MainFigure:StimNumberMismatch',...
% 										'Stim number in event and Experiment do not match')
% 								return
% 						end
						obj.guiStimIndex(nstimpan) = newStimNumber;
						pansz = get(obj.mainControl.stimStatusPan,'position');
						panwid = pansz(3)-20;
						panheit = pansz(4)/5-60;
						obj.mainControl.stimdisplaypanel(nstimpan) = uipanel(...
								'parent',obj.mainControl.stimStatusPan,...
								'units','pixels',...
								'position',[10 pansz(4)-(10+panheit)*nstimpan-10 panwid panheit],...
								'title','');
						obj.mainControl.stimdisplaytext(nstimpan) = uicontrol(...
								'parent',obj.mainControl.stimdisplaypanel(nstimpan),...
								'style','text',...
								'units','pixels',...
								'position',[10 panheit-30 panwid/2 20],...
								'string',['Stim: ',num2str(newStimNumber)],...
								'horizontalalignment','left');
						obj.mainControl.stimcompletetext(nstimpan) = uicontrol(...
								'parent',obj.mainControl.stimdisplaypanel(nstimpan),...
								'style','text',...
								'units','pixels',...
								'position',[10 panheit-50 panwid/2 20],...
								'string','Complete: ',...
								'horizontalalignment','left');
						obj.mainControl.stimaborttext(nstimpan) = uicontrol(...
								'parent',obj.mainControl.stimdisplaypanel(nstimpan),...
								'style','text',...
								'units','pixels',...
								'position',[10 panheit-70 panwid/2 20],...
								'string','Aborted: ',...
								'horizontalalignment','left');
						catch me
								warning(me.message)
								beep
                                disp(me.stack(1))
						end
				end
				function newTrialUpdateFcn(obj,src,trialEventData)
						% Check trialObject.outcome
						% evnt.EventData has fields: currentTrial , previousTrial
						try
								if obj.nStimPanels % check to see if there are panels to update
										finishedTrial = trialEventData.previousTrial;
										switch finishedTrial.outcome %BUG: sometimes outcome is empty?
												case {'CompleteStim','CompleteBlank'}
														if ~isempty(finishedTrial.stimulus) && ~isnan(finishedTrial.stimulus)
																nstimpan = find(obj.guiStimIndex == finishedTrial.stimulus,1,'first');
																set(obj.mainControl.stimcompletetext(nstimpan),'string',['Complete: ',...
																		num2str(obj.dataGeneratorObj.experimentObj.stimTallyComplete(nstimpan))]);
														end
												case 'EarlyAbort'
														if ~isempty(finishedTrial.stimulus) && ~isnan(finishedTrial.stimulus)
																nstimpan = find(obj.guiStimIndex == finishedTrial.stimulus);
																set(obj.mainControl.stimaborttext(nstimpan),'string',['Aborted: ',...
																		num2str(obj.dataGeneratorObj.experimentObj.stimTallyAbort(nstimpan))]);
														end
												case 'NoAttempt'
														% Could add a tally of incomplete/non-attempted trials
												otherwise
														warning('ImageAcuisitionGUI:newTrialUpdateFcn','No Trial outcome recorded');
										end
% 										nstimpan = obj.dataGeneratorObj.experimentObj.currentStimIndex;
								end
						catch me
								beep
								warning(me.message); 								disp(me.stack(1))
						end
				end
		end
		methods % Set Functions
				function set.behavControlComputerName(obj,compname)
						[returnedname,stimIP] = resolvehost(compname);
						if ~isempty(stimIP)
								obj.behavControlComputerName = returnedname;
						else
								warndlg(['No computer can be found by the name: ',compname,...
										'. Setting BehavControl computer name to localhost']);
								obj.behavControlComputerName = 'localhost';
						end
				end
		end
		
		
		
		
end







































